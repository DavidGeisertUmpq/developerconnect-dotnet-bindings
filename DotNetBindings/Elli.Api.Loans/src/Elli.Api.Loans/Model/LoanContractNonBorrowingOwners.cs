/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/


/* 
 * Loan
 *
 * Returns the entire loan or specific entities of a loan.
 *
 * OpenAPI spec version: 1.4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elli.Api.Loans.Client.SwaggerDateConverter;

namespace Elli.Api.Loans.Model
{
    /// <summary>
    /// LoanContractNonBorrowingOwners
    /// </summary>
    [DataContract]
    public partial class LoanContractNonBorrowingOwners :  IEquatable<LoanContractNonBorrowingOwners>, IValidatableObject
    {
    
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets MiddleName
        /// </summary>
        [DataMember(Name="middleName", EmitDefaultValue=false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets SuffixName
        /// </summary>
        [DataMember(Name="suffixName", EmitDefaultValue=false)]
        public string SuffixName { get; set; }

        /// <summary>
        /// Gets or Sets AddressStreet
        /// </summary>
        [DataMember(Name="addressStreet", EmitDefaultValue=false)]
        public string AddressStreet { get; set; }

        /// <summary>
        /// Gets or Sets AddressCity
        /// </summary>
        [DataMember(Name="addressCity", EmitDefaultValue=false)]
        public string AddressCity { get; set; }

        /// <summary>
        /// Gets or Sets AddressState
        /// </summary>
        [DataMember(Name="addressState", EmitDefaultValue=false)]
        public string AddressState { get; set; }

        /// <summary>
        /// Gets or Sets AddressPostalCode
        /// </summary>
        [DataMember(Name="addressPostalCode", EmitDefaultValue=false)]
        public string AddressPostalCode { get; set; }

        /// <summary>
        /// Gets or Sets BorrowerType
        /// </summary>
        [DataMember(Name="borrowerType", EmitDefaultValue=false)]
        public string BorrowerType { get; set; }

        /// <summary>
        /// Gets or Sets HomePhoneNumber
        /// </summary>
        [DataMember(Name="homePhoneNumber", EmitDefaultValue=false)]
        public string HomePhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets No3rdPartyEmailIndicator
        /// </summary>
        [DataMember(Name="no3rdPartyEmailIndicator", EmitDefaultValue=false)]
        public bool? No3rdPartyEmailIndicator { get; set; }

        /// <summary>
        /// Gets or Sets BusinessPhoneNumber
        /// </summary>
        [DataMember(Name="businessPhoneNumber", EmitDefaultValue=false)]
        public string BusinessPhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets CellPhoneNumber
        /// </summary>
        [DataMember(Name="cellPhoneNumber", EmitDefaultValue=false)]
        public string CellPhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets FaxNumber
        /// </summary>
        [DataMember(Name="faxNumber", EmitDefaultValue=false)]
        public string FaxNumber { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name="dateOfBirth", EmitDefaultValue=false)]
        public DateTime? DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets ESignConsentNBOCStatus
        /// </summary>
        [DataMember(Name="eSignConsentNBOCStatus", EmitDefaultValue=false)]
        public string ESignConsentNBOCStatus { get; set; }

        /// <summary>
        /// Gets or Sets ESignConsentNBOCDateAccepted
        /// </summary>
        [DataMember(Name="eSignConsentNBOCDateAccepted", EmitDefaultValue=false)]
        public DateTime? ESignConsentNBOCDateAccepted { get; set; }

        /// <summary>
        /// Gets or Sets ESignConsentNBOCIPAddress
        /// </summary>
        [DataMember(Name="eSignConsentNBOCIPAddress", EmitDefaultValue=false)]
        public string ESignConsentNBOCIPAddress { get; set; }

        /// <summary>
        /// Gets or Sets ESignConsentNBOCSource
        /// </summary>
        [DataMember(Name="eSignConsentNBOCSource", EmitDefaultValue=false)]
        public string ESignConsentNBOCSource { get; set; }

        /// <summary>
        /// Gets or Sets BorrowerVestingRecordID
        /// </summary>
        [DataMember(Name="borrowerVestingRecordID", EmitDefaultValue=false)]
        public string BorrowerVestingRecordID { get; set; }

        /// <summary>
        /// Gets or Sets EntityDeleted
        /// </summary>
        [DataMember(Name="entityDeleted", EmitDefaultValue=false)]
        public bool? EntityDeleted { get; set; }

        /// <summary>
        /// Gets or Sets NBOID
        /// </summary>
        [DataMember(Name="nBOID", EmitDefaultValue=false)]
        public string NBOID { get; set; }

        /// <summary>
        /// Gets or Sets ESignConsentNBOCDateSent
        /// </summary>
        [DataMember(Name="eSignConsentNBOCDateSent", EmitDefaultValue=false)]
        public DateTime? ESignConsentNBOCDateSent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanContractNonBorrowingOwners {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  SuffixName: ").Append(SuffixName).Append("\n");
            sb.Append("  AddressStreet: ").Append(AddressStreet).Append("\n");
            sb.Append("  AddressCity: ").Append(AddressCity).Append("\n");
            sb.Append("  AddressState: ").Append(AddressState).Append("\n");
            sb.Append("  AddressPostalCode: ").Append(AddressPostalCode).Append("\n");
            sb.Append("  BorrowerType: ").Append(BorrowerType).Append("\n");
            sb.Append("  HomePhoneNumber: ").Append(HomePhoneNumber).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  No3rdPartyEmailIndicator: ").Append(No3rdPartyEmailIndicator).Append("\n");
            sb.Append("  BusinessPhoneNumber: ").Append(BusinessPhoneNumber).Append("\n");
            sb.Append("  CellPhoneNumber: ").Append(CellPhoneNumber).Append("\n");
            sb.Append("  FaxNumber: ").Append(FaxNumber).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  ESignConsentNBOCStatus: ").Append(ESignConsentNBOCStatus).Append("\n");
            sb.Append("  ESignConsentNBOCDateAccepted: ").Append(ESignConsentNBOCDateAccepted).Append("\n");
            sb.Append("  ESignConsentNBOCIPAddress: ").Append(ESignConsentNBOCIPAddress).Append("\n");
            sb.Append("  ESignConsentNBOCSource: ").Append(ESignConsentNBOCSource).Append("\n");
            sb.Append("  BorrowerVestingRecordID: ").Append(BorrowerVestingRecordID).Append("\n");
            sb.Append("  EntityDeleted: ").Append(EntityDeleted).Append("\n");
            sb.Append("  NBOID: ").Append(NBOID).Append("\n");
            sb.Append("  ESignConsentNBOCDateSent: ").Append(ESignConsentNBOCDateSent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanContractNonBorrowingOwners);
        }

        /// <summary>
        /// Returns true if LoanContractNonBorrowingOwners instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanContractNonBorrowingOwners to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanContractNonBorrowingOwners input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.SuffixName == input.SuffixName ||
                    (this.SuffixName != null &&
                    this.SuffixName.Equals(input.SuffixName))
                ) && 
                (
                    this.AddressStreet == input.AddressStreet ||
                    (this.AddressStreet != null &&
                    this.AddressStreet.Equals(input.AddressStreet))
                ) && 
                (
                    this.AddressCity == input.AddressCity ||
                    (this.AddressCity != null &&
                    this.AddressCity.Equals(input.AddressCity))
                ) && 
                (
                    this.AddressState == input.AddressState ||
                    (this.AddressState != null &&
                    this.AddressState.Equals(input.AddressState))
                ) && 
                (
                    this.AddressPostalCode == input.AddressPostalCode ||
                    (this.AddressPostalCode != null &&
                    this.AddressPostalCode.Equals(input.AddressPostalCode))
                ) && 
                (
                    this.BorrowerType == input.BorrowerType ||
                    (this.BorrowerType != null &&
                    this.BorrowerType.Equals(input.BorrowerType))
                ) && 
                (
                    this.HomePhoneNumber == input.HomePhoneNumber ||
                    (this.HomePhoneNumber != null &&
                    this.HomePhoneNumber.Equals(input.HomePhoneNumber))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.No3rdPartyEmailIndicator == input.No3rdPartyEmailIndicator ||
                    (this.No3rdPartyEmailIndicator != null &&
                    this.No3rdPartyEmailIndicator.Equals(input.No3rdPartyEmailIndicator))
                ) && 
                (
                    this.BusinessPhoneNumber == input.BusinessPhoneNumber ||
                    (this.BusinessPhoneNumber != null &&
                    this.BusinessPhoneNumber.Equals(input.BusinessPhoneNumber))
                ) && 
                (
                    this.CellPhoneNumber == input.CellPhoneNumber ||
                    (this.CellPhoneNumber != null &&
                    this.CellPhoneNumber.Equals(input.CellPhoneNumber))
                ) && 
                (
                    this.FaxNumber == input.FaxNumber ||
                    (this.FaxNumber != null &&
                    this.FaxNumber.Equals(input.FaxNumber))
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.ESignConsentNBOCStatus == input.ESignConsentNBOCStatus ||
                    (this.ESignConsentNBOCStatus != null &&
                    this.ESignConsentNBOCStatus.Equals(input.ESignConsentNBOCStatus))
                ) && 
                (
                    this.ESignConsentNBOCDateAccepted == input.ESignConsentNBOCDateAccepted ||
                    (this.ESignConsentNBOCDateAccepted != null &&
                    this.ESignConsentNBOCDateAccepted.Equals(input.ESignConsentNBOCDateAccepted))
                ) && 
                (
                    this.ESignConsentNBOCIPAddress == input.ESignConsentNBOCIPAddress ||
                    (this.ESignConsentNBOCIPAddress != null &&
                    this.ESignConsentNBOCIPAddress.Equals(input.ESignConsentNBOCIPAddress))
                ) && 
                (
                    this.ESignConsentNBOCSource == input.ESignConsentNBOCSource ||
                    (this.ESignConsentNBOCSource != null &&
                    this.ESignConsentNBOCSource.Equals(input.ESignConsentNBOCSource))
                ) && 
                (
                    this.BorrowerVestingRecordID == input.BorrowerVestingRecordID ||
                    (this.BorrowerVestingRecordID != null &&
                    this.BorrowerVestingRecordID.Equals(input.BorrowerVestingRecordID))
                ) && 
                (
                    this.EntityDeleted == input.EntityDeleted ||
                    (this.EntityDeleted != null &&
                    this.EntityDeleted.Equals(input.EntityDeleted))
                ) && 
                (
                    this.NBOID == input.NBOID ||
                    (this.NBOID != null &&
                    this.NBOID.Equals(input.NBOID))
                ) && 
                (
                    this.ESignConsentNBOCDateSent == input.ESignConsentNBOCDateSent ||
                    (this.ESignConsentNBOCDateSent != null &&
                    this.ESignConsentNBOCDateSent.Equals(input.ESignConsentNBOCDateSent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.MiddleName != null)
                    hashCode = hashCode * 59 + this.MiddleName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.SuffixName != null)
                    hashCode = hashCode * 59 + this.SuffixName.GetHashCode();
                if (this.AddressStreet != null)
                    hashCode = hashCode * 59 + this.AddressStreet.GetHashCode();
                if (this.AddressCity != null)
                    hashCode = hashCode * 59 + this.AddressCity.GetHashCode();
                if (this.AddressState != null)
                    hashCode = hashCode * 59 + this.AddressState.GetHashCode();
                if (this.AddressPostalCode != null)
                    hashCode = hashCode * 59 + this.AddressPostalCode.GetHashCode();
                if (this.BorrowerType != null)
                    hashCode = hashCode * 59 + this.BorrowerType.GetHashCode();
                if (this.HomePhoneNumber != null)
                    hashCode = hashCode * 59 + this.HomePhoneNumber.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.No3rdPartyEmailIndicator != null)
                    hashCode = hashCode * 59 + this.No3rdPartyEmailIndicator.GetHashCode();
                if (this.BusinessPhoneNumber != null)
                    hashCode = hashCode * 59 + this.BusinessPhoneNumber.GetHashCode();
                if (this.CellPhoneNumber != null)
                    hashCode = hashCode * 59 + this.CellPhoneNumber.GetHashCode();
                if (this.FaxNumber != null)
                    hashCode = hashCode * 59 + this.FaxNumber.GetHashCode();
                if (this.DateOfBirth != null)
                    hashCode = hashCode * 59 + this.DateOfBirth.GetHashCode();
                if (this.ESignConsentNBOCStatus != null)
                    hashCode = hashCode * 59 + this.ESignConsentNBOCStatus.GetHashCode();
                if (this.ESignConsentNBOCDateAccepted != null)
                    hashCode = hashCode * 59 + this.ESignConsentNBOCDateAccepted.GetHashCode();
                if (this.ESignConsentNBOCIPAddress != null)
                    hashCode = hashCode * 59 + this.ESignConsentNBOCIPAddress.GetHashCode();
                if (this.ESignConsentNBOCSource != null)
                    hashCode = hashCode * 59 + this.ESignConsentNBOCSource.GetHashCode();
                if (this.BorrowerVestingRecordID != null)
                    hashCode = hashCode * 59 + this.BorrowerVestingRecordID.GetHashCode();
                if (this.EntityDeleted != null)
                    hashCode = hashCode * 59 + this.EntityDeleted.GetHashCode();
                if (this.NBOID != null)
                    hashCode = hashCode * 59 + this.NBOID.GetHashCode();
                if (this.ESignConsentNBOCDateSent != null)
                    hashCode = hashCode * 59 + this.ESignConsentNBOCDateSent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
