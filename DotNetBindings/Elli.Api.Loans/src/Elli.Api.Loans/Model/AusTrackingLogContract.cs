/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/


/* 
 * Loan
 *
 * Returns the entire loan or specific entities of a loan.
 *
 * OpenAPI spec version: 1.4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elli.Api.Loans.Client.SwaggerDateConverter;

namespace Elli.Api.Loans.Model
{
    /// <summary>
    /// AusTrackingLogContract
    /// </summary>
    [DataContract]
    public partial class AusTrackingLogContract :  IEquatable<AusTrackingLogContract>, IValidatableObject
    {
    
        
        /// <summary>
        /// Unique Id of AusTrackingLog.
        /// </summary>
        /// <value>Unique Id of AusTrackingLog.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Underlying application entity.
        /// </summary>
        /// <value>Underlying application entity.</value>
        [DataMember(Name="application", EmitDefaultValue=false)]
        public EntityRefContract Application { get; set; }

        /// <summary>
        /// UnderwritingRiskAssessType, possible values - Manual Underwriting, DU, LP, LQA, Other.
        /// </summary>
        /// <value>UnderwritingRiskAssessType, possible values - Manual Underwriting, DU, LP, LQA, Other.</value>
        [DataMember(Name="uwRiskAssessType", EmitDefaultValue=false)]
        public string UwRiskAssessType { get; set; }

        /// <summary>
        /// Required when UnderwritingRiskAssessType is Other.
        /// </summary>
        /// <value>Required when UnderwritingRiskAssessType is Other.</value>
        [DataMember(Name="uwOtherRiskAssessType", EmitDefaultValue=false)]
        public string UwOtherRiskAssessType { get; set; }

        /// <summary>
        /// Submission Date Time.
        /// </summary>
        /// <value>Submission Date Time.</value>
        [DataMember(Name="submissionDate", EmitDefaultValue=false)]
        public DateTime? SubmissionDate { get; set; }

        /// <summary>
        /// First Submission Date Time.
        /// </summary>
        /// <value>First Submission Date Time.</value>
        [DataMember(Name="firstSubmissionDate", EmitDefaultValue=false)]
        public DateTime? FirstSubmissionDate { get; set; }

        /// <summary>
        /// Submission Number.
        /// </summary>
        /// <value>Submission Number.</value>
        [DataMember(Name="submissionNumber", EmitDefaultValue=false)]
        public string SubmissionNumber { get; set; }

        /// <summary>
        /// Aus Recommendation.
        /// </summary>
        /// <value>Aus Recommendation.</value>
        [DataMember(Name="recommendation", EmitDefaultValue=false)]
        public string Recommendation { get; set; }

        /// <summary>
        /// DU CaseId Or LP AUS Key.
        /// </summary>
        /// <value>DU CaseId Or LP AUS Key.</value>
        [DataMember(Name="duCaseIdOrLPAUSKey", EmitDefaultValue=false)]
        public string DuCaseIdOrLPAUSKey { get; set; }

        /// <summary>
        /// Submitted By.
        /// </summary>
        /// <value>Submitted By.</value>
        [DataMember(Name="submittedBy", EmitDefaultValue=false)]
        public string SubmittedBy { get; set; }

        /// <summary>
        /// Aus Version Number.
        /// </summary>
        /// <value>Aus Version Number.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Doc Class (Freddie).
        /// </summary>
        /// <value>Doc Class (Freddie).</value>
        [DataMember(Name="docClass", EmitDefaultValue=false)]
        public string DocClass { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AusTrackingLogContract {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Application: ").Append(Application).Append("\n");
            sb.Append("  UwRiskAssessType: ").Append(UwRiskAssessType).Append("\n");
            sb.Append("  UwOtherRiskAssessType: ").Append(UwOtherRiskAssessType).Append("\n");
            sb.Append("  SubmissionDate: ").Append(SubmissionDate).Append("\n");
            sb.Append("  FirstSubmissionDate: ").Append(FirstSubmissionDate).Append("\n");
            sb.Append("  SubmissionNumber: ").Append(SubmissionNumber).Append("\n");
            sb.Append("  Recommendation: ").Append(Recommendation).Append("\n");
            sb.Append("  DuCaseIdOrLPAUSKey: ").Append(DuCaseIdOrLPAUSKey).Append("\n");
            sb.Append("  SubmittedBy: ").Append(SubmittedBy).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  DocClass: ").Append(DocClass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AusTrackingLogContract);
        }

        /// <summary>
        /// Returns true if AusTrackingLogContract instances are equal
        /// </summary>
        /// <param name="input">Instance of AusTrackingLogContract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AusTrackingLogContract input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Application == input.Application ||
                    (this.Application != null &&
                    this.Application.Equals(input.Application))
                ) && 
                (
                    this.UwRiskAssessType == input.UwRiskAssessType ||
                    (this.UwRiskAssessType != null &&
                    this.UwRiskAssessType.Equals(input.UwRiskAssessType))
                ) && 
                (
                    this.UwOtherRiskAssessType == input.UwOtherRiskAssessType ||
                    (this.UwOtherRiskAssessType != null &&
                    this.UwOtherRiskAssessType.Equals(input.UwOtherRiskAssessType))
                ) && 
                (
                    this.SubmissionDate == input.SubmissionDate ||
                    (this.SubmissionDate != null &&
                    this.SubmissionDate.Equals(input.SubmissionDate))
                ) && 
                (
                    this.FirstSubmissionDate == input.FirstSubmissionDate ||
                    (this.FirstSubmissionDate != null &&
                    this.FirstSubmissionDate.Equals(input.FirstSubmissionDate))
                ) && 
                (
                    this.SubmissionNumber == input.SubmissionNumber ||
                    (this.SubmissionNumber != null &&
                    this.SubmissionNumber.Equals(input.SubmissionNumber))
                ) && 
                (
                    this.Recommendation == input.Recommendation ||
                    (this.Recommendation != null &&
                    this.Recommendation.Equals(input.Recommendation))
                ) && 
                (
                    this.DuCaseIdOrLPAUSKey == input.DuCaseIdOrLPAUSKey ||
                    (this.DuCaseIdOrLPAUSKey != null &&
                    this.DuCaseIdOrLPAUSKey.Equals(input.DuCaseIdOrLPAUSKey))
                ) && 
                (
                    this.SubmittedBy == input.SubmittedBy ||
                    (this.SubmittedBy != null &&
                    this.SubmittedBy.Equals(input.SubmittedBy))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.DocClass == input.DocClass ||
                    (this.DocClass != null &&
                    this.DocClass.Equals(input.DocClass))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Application != null)
                    hashCode = hashCode * 59 + this.Application.GetHashCode();
                if (this.UwRiskAssessType != null)
                    hashCode = hashCode * 59 + this.UwRiskAssessType.GetHashCode();
                if (this.UwOtherRiskAssessType != null)
                    hashCode = hashCode * 59 + this.UwOtherRiskAssessType.GetHashCode();
                if (this.SubmissionDate != null)
                    hashCode = hashCode * 59 + this.SubmissionDate.GetHashCode();
                if (this.FirstSubmissionDate != null)
                    hashCode = hashCode * 59 + this.FirstSubmissionDate.GetHashCode();
                if (this.SubmissionNumber != null)
                    hashCode = hashCode * 59 + this.SubmissionNumber.GetHashCode();
                if (this.Recommendation != null)
                    hashCode = hashCode * 59 + this.Recommendation.GetHashCode();
                if (this.DuCaseIdOrLPAUSKey != null)
                    hashCode = hashCode * 59 + this.DuCaseIdOrLPAUSKey.GetHashCode();
                if (this.SubmittedBy != null)
                    hashCode = hashCode * 59 + this.SubmittedBy.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.DocClass != null)
                    hashCode = hashCode * 59 + this.DocClass.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
