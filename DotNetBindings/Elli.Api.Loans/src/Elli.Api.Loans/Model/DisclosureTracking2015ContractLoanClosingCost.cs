/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/


/* 
 * Loan
 *
 * Returns the entire loan or specific entities of a loan.
 *
 * OpenAPI spec version: 1.4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elli.Api.Loans.Client.SwaggerDateConverter;

namespace Elli.Api.Loans.Model
{
    /// <summary>
    /// DisclosureTracking2015ContractLoanClosingCost
    /// </summary>
    [DataContract]
    public partial class DisclosureTracking2015ContractLoanClosingCost :  IEquatable<DisclosureTracking2015ContractLoanClosingCost>, IValidatableObject
    {
    
        
        /// <summary>
        /// Gets or Sets LenderCredits
        /// </summary>
        [DataMember(Name="lenderCredits", EmitDefaultValue=false)]
        public string LenderCredits { get; set; }

        /// <summary>
        /// Gets or Sets TotalFeeAmount2015
        /// </summary>
        [DataMember(Name="totalFeeAmount2015", EmitDefaultValue=false)]
        public string TotalFeeAmount2015 { get; set; }

        /// <summary>
        /// Gets or Sets StdLegalLimit3
        /// </summary>
        [DataMember(Name="stdLegalLimit3", EmitDefaultValue=false)]
        public string StdLegalLimit3 { get; set; }

        /// <summary>
        /// Gets or Sets TotalLoanCost2
        /// </summary>
        [DataMember(Name="totalLoanCost2", EmitDefaultValue=false)]
        public string TotalLoanCost2 { get; set; }

        /// <summary>
        /// Gets or Sets TotalOtherCost2
        /// </summary>
        [DataMember(Name="totalOtherCost2", EmitDefaultValue=false)]
        public string TotalOtherCost2 { get; set; }

        /// <summary>
        /// Gets or Sets BorrowerClosingCostAtClosing2
        /// </summary>
        [DataMember(Name="borrowerClosingCostAtClosing2", EmitDefaultValue=false)]
        public string BorrowerClosingCostAtClosing2 { get; set; }

        /// <summary>
        /// Gets or Sets LenderCredits2
        /// </summary>
        [DataMember(Name="lenderCredits2", EmitDefaultValue=false)]
        public string LenderCredits2 { get; set; }

        /// <summary>
        /// Gets or Sets Gfe800BorPaidAmount
        /// </summary>
        [DataMember(Name="gfe800BorPaidAmount", EmitDefaultValue=false)]
        public decimal? Gfe800BorPaidAmount { get; set; }

        /// <summary>
        /// Gets or Sets Gfe1200BorPaidAmount
        /// </summary>
        [DataMember(Name="gfe1200BorPaidAmount", EmitDefaultValue=false)]
        public decimal? Gfe1200BorPaidAmount { get; set; }

        /// <summary>
        /// Gets or Sets Section1000BorrowerTotalPaidAmount
        /// </summary>
        [DataMember(Name="section1000BorrowerTotalPaidAmount", EmitDefaultValue=false)]
        public decimal? Section1000BorrowerTotalPaidAmount { get; set; }

        /// <summary>
        /// Gets or Sets Financed
        /// </summary>
        [DataMember(Name="financed", EmitDefaultValue=false)]
        public decimal? Financed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DisclosureTracking2015ContractLoanClosingCost {\n");
            sb.Append("  LenderCredits: ").Append(LenderCredits).Append("\n");
            sb.Append("  TotalFeeAmount2015: ").Append(TotalFeeAmount2015).Append("\n");
            sb.Append("  StdLegalLimit3: ").Append(StdLegalLimit3).Append("\n");
            sb.Append("  TotalLoanCost2: ").Append(TotalLoanCost2).Append("\n");
            sb.Append("  TotalOtherCost2: ").Append(TotalOtherCost2).Append("\n");
            sb.Append("  BorrowerClosingCostAtClosing2: ").Append(BorrowerClosingCostAtClosing2).Append("\n");
            sb.Append("  LenderCredits2: ").Append(LenderCredits2).Append("\n");
            sb.Append("  Gfe800BorPaidAmount: ").Append(Gfe800BorPaidAmount).Append("\n");
            sb.Append("  Gfe1200BorPaidAmount: ").Append(Gfe1200BorPaidAmount).Append("\n");
            sb.Append("  Section1000BorrowerTotalPaidAmount: ").Append(Section1000BorrowerTotalPaidAmount).Append("\n");
            sb.Append("  Financed: ").Append(Financed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DisclosureTracking2015ContractLoanClosingCost);
        }

        /// <summary>
        /// Returns true if DisclosureTracking2015ContractLoanClosingCost instances are equal
        /// </summary>
        /// <param name="input">Instance of DisclosureTracking2015ContractLoanClosingCost to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DisclosureTracking2015ContractLoanClosingCost input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LenderCredits == input.LenderCredits ||
                    (this.LenderCredits != null &&
                    this.LenderCredits.Equals(input.LenderCredits))
                ) && 
                (
                    this.TotalFeeAmount2015 == input.TotalFeeAmount2015 ||
                    (this.TotalFeeAmount2015 != null &&
                    this.TotalFeeAmount2015.Equals(input.TotalFeeAmount2015))
                ) && 
                (
                    this.StdLegalLimit3 == input.StdLegalLimit3 ||
                    (this.StdLegalLimit3 != null &&
                    this.StdLegalLimit3.Equals(input.StdLegalLimit3))
                ) && 
                (
                    this.TotalLoanCost2 == input.TotalLoanCost2 ||
                    (this.TotalLoanCost2 != null &&
                    this.TotalLoanCost2.Equals(input.TotalLoanCost2))
                ) && 
                (
                    this.TotalOtherCost2 == input.TotalOtherCost2 ||
                    (this.TotalOtherCost2 != null &&
                    this.TotalOtherCost2.Equals(input.TotalOtherCost2))
                ) && 
                (
                    this.BorrowerClosingCostAtClosing2 == input.BorrowerClosingCostAtClosing2 ||
                    (this.BorrowerClosingCostAtClosing2 != null &&
                    this.BorrowerClosingCostAtClosing2.Equals(input.BorrowerClosingCostAtClosing2))
                ) && 
                (
                    this.LenderCredits2 == input.LenderCredits2 ||
                    (this.LenderCredits2 != null &&
                    this.LenderCredits2.Equals(input.LenderCredits2))
                ) && 
                (
                    this.Gfe800BorPaidAmount == input.Gfe800BorPaidAmount ||
                    (this.Gfe800BorPaidAmount != null &&
                    this.Gfe800BorPaidAmount.Equals(input.Gfe800BorPaidAmount))
                ) && 
                (
                    this.Gfe1200BorPaidAmount == input.Gfe1200BorPaidAmount ||
                    (this.Gfe1200BorPaidAmount != null &&
                    this.Gfe1200BorPaidAmount.Equals(input.Gfe1200BorPaidAmount))
                ) && 
                (
                    this.Section1000BorrowerTotalPaidAmount == input.Section1000BorrowerTotalPaidAmount ||
                    (this.Section1000BorrowerTotalPaidAmount != null &&
                    this.Section1000BorrowerTotalPaidAmount.Equals(input.Section1000BorrowerTotalPaidAmount))
                ) && 
                (
                    this.Financed == input.Financed ||
                    (this.Financed != null &&
                    this.Financed.Equals(input.Financed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LenderCredits != null)
                    hashCode = hashCode * 59 + this.LenderCredits.GetHashCode();
                if (this.TotalFeeAmount2015 != null)
                    hashCode = hashCode * 59 + this.TotalFeeAmount2015.GetHashCode();
                if (this.StdLegalLimit3 != null)
                    hashCode = hashCode * 59 + this.StdLegalLimit3.GetHashCode();
                if (this.TotalLoanCost2 != null)
                    hashCode = hashCode * 59 + this.TotalLoanCost2.GetHashCode();
                if (this.TotalOtherCost2 != null)
                    hashCode = hashCode * 59 + this.TotalOtherCost2.GetHashCode();
                if (this.BorrowerClosingCostAtClosing2 != null)
                    hashCode = hashCode * 59 + this.BorrowerClosingCostAtClosing2.GetHashCode();
                if (this.LenderCredits2 != null)
                    hashCode = hashCode * 59 + this.LenderCredits2.GetHashCode();
                if (this.Gfe800BorPaidAmount != null)
                    hashCode = hashCode * 59 + this.Gfe800BorPaidAmount.GetHashCode();
                if (this.Gfe1200BorPaidAmount != null)
                    hashCode = hashCode * 59 + this.Gfe1200BorPaidAmount.GetHashCode();
                if (this.Section1000BorrowerTotalPaidAmount != null)
                    hashCode = hashCode * 59 + this.Section1000BorrowerTotalPaidAmount.GetHashCode();
                if (this.Financed != null)
                    hashCode = hashCode * 59 + this.Financed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
