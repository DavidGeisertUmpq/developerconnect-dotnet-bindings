/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/

/* 
 * Loan
 *
 * APIs to manage eFolder related entities - document and attachment.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Elli.Api.Loans.EFolder.Client;
using Elli.Api.Loans.EFolder.Api;
using Elli.Api.Loans.EFolder.Model;

namespace Elli.Api.Loans.EFolder.Test
{
    /// <summary>
    ///  Class for testing ConditionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ConditionsApiTests
    {
        private ConditionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ConditionsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ConditionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ConditionsApi
            //Assert.IsInstanceOfType(typeof(ConditionsApi), instance, "instance is a ConditionsApi");
        }

        
        /// <summary>
        /// Test GetEFolderPostclosingConditionById
        /// </summary>
        [Test]
        public void GetEFolderPostclosingConditionByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conditionId = null;
            //string loanId = null;
            //string includeRemoved = null;
            //var response = instance.GetEFolderPostclosingConditionById(conditionId, loanId, includeRemoved);
            //Assert.IsInstanceOf<EFolderPostClosingConditionContract> (response, "response is EFolderPostClosingConditionContract");
        }
        
        /// <summary>
        /// Test GetEFolderPostclosingConditions
        /// </summary>
        [Test]
        public void GetEFolderPostclosingConditionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string loanId = null;
            //string sort = null;
            //string filter = null;
            //string start = null;
            //string limit = null;
            //string includeRemoved = null;
            //var response = instance.GetEFolderPostclosingConditions(loanId, sort, filter, start, limit, includeRemoved);
            //Assert.IsInstanceOf<List<EFolderPostClosingConditionContract>> (response, "response is List<EFolderPostClosingConditionContract>");
        }
        
        /// <summary>
        /// Test GetEFolderPreliminaryConditionById
        /// </summary>
        [Test]
        public void GetEFolderPreliminaryConditionByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conditionId = null;
            //string loanId = null;
            //string includeRemoved = null;
            //var response = instance.GetEFolderPreliminaryConditionById(conditionId, loanId, includeRemoved);
            //Assert.IsInstanceOf<EFolderPreliminaryConditionContract> (response, "response is EFolderPreliminaryConditionContract");
        }
        
        /// <summary>
        /// Test GetEFolderPreliminaryConditions
        /// </summary>
        [Test]
        public void GetEFolderPreliminaryConditionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string loanId = null;
            //string sort = null;
            //string filter = null;
            //string start = null;
            //string limit = null;
            //string includeRemoved = null;
            //var response = instance.GetEFolderPreliminaryConditions(loanId, sort, filter, start, limit, includeRemoved);
            //Assert.IsInstanceOf<List<EFolderPreliminaryConditionContract>> (response, "response is List<EFolderPreliminaryConditionContract>");
        }
        
        /// <summary>
        /// Test GetEFolderUnderwritingConditionById
        /// </summary>
        [Test]
        public void GetEFolderUnderwritingConditionByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string conditionId = null;
            //string loanId = null;
            //string includeRemoved = null;
            //var response = instance.GetEFolderUnderwritingConditionById(conditionId, loanId, includeRemoved);
            //Assert.IsInstanceOf<EFolderUnderwritingConditionContract> (response, "response is EFolderUnderwritingConditionContract");
        }
        
        /// <summary>
        /// Test GetEFolderUnderwritingConditions
        /// </summary>
        [Test]
        public void GetEFolderUnderwritingConditionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string loanId = null;
            //string sort = null;
            //string filter = null;
            //string start = null;
            //string limit = null;
            //string includeRemoved = null;
            //var response = instance.GetEFolderUnderwritingConditions(loanId, sort, filter, start, limit, includeRemoved);
            //Assert.IsInstanceOf<List<EFolderUnderwritingConditionContract>> (response, "response is List<EFolderUnderwritingConditionContract>");
        }
        
    }

}
