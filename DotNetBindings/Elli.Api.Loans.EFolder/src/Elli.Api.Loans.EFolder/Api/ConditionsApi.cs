/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/

/* 
 * Loan
 *
 * APIs to manage eFolder related entities - document and attachment.
 *
 * OpenAPI spec version: 1.4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Elli.Api.Loans.EFolder.Client;
using Elli.Api.Loans.EFolder.Model;

namespace Elli.Api.Loans.EFolder.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConditionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets post closing condition detail for a ConditionId
        /// </summary>
        /// <remarks>
        /// Returns post closing condition detail for a ConditionId of a loan
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditionId">Guid - Unique Identifier of a condition</param>
        /// <param name="loanId">Guid - Loan id to which condition belogs to</param>
        /// <param name="includeRemoved">Flag indicating if the deleted condition has to be included (optional)</param>
        /// <returns>EFolderPostClosingConditionContract</returns>
        EFolderPostClosingConditionContract GetEFolderPostclosingConditionById (string conditionId, string loanId, string includeRemoved = null);

        /// <summary>
        /// Gets post closing condition detail for a ConditionId
        /// </summary>
        /// <remarks>
        /// Returns post closing condition detail for a ConditionId of a loan
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditionId">Guid - Unique Identifier of a condition</param>
        /// <param name="loanId">Guid - Loan id to which condition belogs to</param>
        /// <param name="includeRemoved">Flag indicating if the deleted condition has to be included (optional)</param>
        /// <returns>ApiResponse of EFolderPostClosingConditionContract</returns>
        ApiResponse<EFolderPostClosingConditionContract> GetEFolderPostclosingConditionByIdWithHttpInfo (string conditionId, string loanId, string includeRemoved = null);
        /// <summary>
        /// Get EFolder Postclosing Conditions for a loan
        /// </summary>
        /// <remarks>
        /// Returns all EFolder Postclosing Conditions for a loan
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Guid - Loan id to which condition belongs to</param>
        /// <param name="sort">Comma separated list of sort parameters. Each sort parameter can be prefixed with +/- to indicate sort direction as ascending or descending. Default is ascending. If no parameter is specified, the returned collection will be sorted on Title in asceding direction. (optional)</param>
        /// <param name="filter">Comma spearated list of filter parameters. Filter is specified in format operand:operator:value.eg. title:&#x3D;:MyCondition. Valid operators are 1. &#39;&#x3D;&#39; or &#39;&#x3D;&#x3D;&#39;, &#39;!&#x3D;&#39;, &#39;&gt;&#39;, &#39;&gt;&#x3D;&#39;, &#39;&lt;&#39;, &#39;&lt;&#x3D;&#39;, &#39;like&#39; for Contains, &#39;sw&#39; for StartsWith, &#39;ew&#39; for Endswith&lt;/param&gt; (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of conditions. This is defaulted to 1. (optional)</param>
        /// <param name="limit">Total number of records to be returned on a page. (optional)</param>
        /// <param name="includeRemoved">Flag indicating if deleted conditions have to included. (optional)</param>
        /// <returns>List&lt;EFolderPostClosingConditionContract&gt;</returns>
        List<EFolderPostClosingConditionContract> GetEFolderPostclosingConditions (string loanId, string sort = null, string filter = null, string start = null, string limit = null, string includeRemoved = null);

        /// <summary>
        /// Get EFolder Postclosing Conditions for a loan
        /// </summary>
        /// <remarks>
        /// Returns all EFolder Postclosing Conditions for a loan
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Guid - Loan id to which condition belongs to</param>
        /// <param name="sort">Comma separated list of sort parameters. Each sort parameter can be prefixed with +/- to indicate sort direction as ascending or descending. Default is ascending. If no parameter is specified, the returned collection will be sorted on Title in asceding direction. (optional)</param>
        /// <param name="filter">Comma spearated list of filter parameters. Filter is specified in format operand:operator:value.eg. title:&#x3D;:MyCondition. Valid operators are 1. &#39;&#x3D;&#39; or &#39;&#x3D;&#x3D;&#39;, &#39;!&#x3D;&#39;, &#39;&gt;&#39;, &#39;&gt;&#x3D;&#39;, &#39;&lt;&#39;, &#39;&lt;&#x3D;&#39;, &#39;like&#39; for Contains, &#39;sw&#39; for StartsWith, &#39;ew&#39; for Endswith&lt;/param&gt; (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of conditions. This is defaulted to 1. (optional)</param>
        /// <param name="limit">Total number of records to be returned on a page. (optional)</param>
        /// <param name="includeRemoved">Flag indicating if deleted conditions have to included. (optional)</param>
        /// <returns>ApiResponse of List&lt;EFolderPostClosingConditionContract&gt;</returns>
        ApiResponse<List<EFolderPostClosingConditionContract>> GetEFolderPostclosingConditionsWithHttpInfo (string loanId, string sort = null, string filter = null, string start = null, string limit = null, string includeRemoved = null);
        /// <summary>
        /// Gets preliminary condition detail for a ConditionId
        /// </summary>
        /// <remarks>
        /// Returns preliminary condition detail for a ConditionId
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditionId">Guid - Unique Identifier of a condition</param>
        /// <param name="loanId">Guid - Loan id to which condition belogs to</param>
        /// <param name="includeRemoved">Flag indicating if the deleted condition has to included (optional)</param>
        /// <returns>EFolderPreliminaryConditionContract</returns>
        EFolderPreliminaryConditionContract GetEFolderPreliminaryConditionById (string conditionId, string loanId, string includeRemoved = null);

        /// <summary>
        /// Gets preliminary condition detail for a ConditionId
        /// </summary>
        /// <remarks>
        /// Returns preliminary condition detail for a ConditionId
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditionId">Guid - Unique Identifier of a condition</param>
        /// <param name="loanId">Guid - Loan id to which condition belogs to</param>
        /// <param name="includeRemoved">Flag indicating if the deleted condition has to included (optional)</param>
        /// <returns>ApiResponse of EFolderPreliminaryConditionContract</returns>
        ApiResponse<EFolderPreliminaryConditionContract> GetEFolderPreliminaryConditionByIdWithHttpInfo (string conditionId, string loanId, string includeRemoved = null);
        /// <summary>
        /// Gets list of preliminary conditions
        /// </summary>
        /// <remarks>
        /// Returns list of preliminary conditions for a loan
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Guid - Loan id to which condition belongs to</param>
        /// <param name="sort">Comma separated list of sort parameters. Each sort parameter can be prefixed with +/- to indicate sort direction as ascending or descending. Default is ascending. If no parameter is specified, the returned collection will be sorted on Title in asceding direction. (optional)</param>
        /// <param name="filter">Comma spearated list of filter parameters. Filter is specified in format operand:operator:value.eg. title:&#x3D;:MyCondition. Valid operators are 1. &#39;&#x3D;&#39; or &#39;&#x3D;&#x3D;&#39;, &#39;!&#x3D;&#39;, &#39;&gt;&#39;, &#39;&gt;&#x3D;&#39;, &#39;&lt;&#39;, &#39;&lt;&#x3D;&#39;, &#39;like&#39; for Contains, &#39;sw&#39; for StartsWith, &#39;ew&#39; for Endswith&lt;/param&gt; (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of conditions. This is defaulted to 1. (optional)</param>
        /// <param name="limit">Total number of records to be returned on a page. (optional)</param>
        /// <param name="includeRemoved">Flag indicating if deleted conditions have to included. (optional)</param>
        /// <returns>List&lt;EFolderPreliminaryConditionContract&gt;</returns>
        List<EFolderPreliminaryConditionContract> GetEFolderPreliminaryConditions (string loanId, string sort = null, string filter = null, string start = null, string limit = null, string includeRemoved = null);

        /// <summary>
        /// Gets list of preliminary conditions
        /// </summary>
        /// <remarks>
        /// Returns list of preliminary conditions for a loan
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Guid - Loan id to which condition belongs to</param>
        /// <param name="sort">Comma separated list of sort parameters. Each sort parameter can be prefixed with +/- to indicate sort direction as ascending or descending. Default is ascending. If no parameter is specified, the returned collection will be sorted on Title in asceding direction. (optional)</param>
        /// <param name="filter">Comma spearated list of filter parameters. Filter is specified in format operand:operator:value.eg. title:&#x3D;:MyCondition. Valid operators are 1. &#39;&#x3D;&#39; or &#39;&#x3D;&#x3D;&#39;, &#39;!&#x3D;&#39;, &#39;&gt;&#39;, &#39;&gt;&#x3D;&#39;, &#39;&lt;&#39;, &#39;&lt;&#x3D;&#39;, &#39;like&#39; for Contains, &#39;sw&#39; for StartsWith, &#39;ew&#39; for Endswith&lt;/param&gt; (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of conditions. This is defaulted to 1. (optional)</param>
        /// <param name="limit">Total number of records to be returned on a page. (optional)</param>
        /// <param name="includeRemoved">Flag indicating if deleted conditions have to included. (optional)</param>
        /// <returns>ApiResponse of List&lt;EFolderPreliminaryConditionContract&gt;</returns>
        ApiResponse<List<EFolderPreliminaryConditionContract>> GetEFolderPreliminaryConditionsWithHttpInfo (string loanId, string sort = null, string filter = null, string start = null, string limit = null, string includeRemoved = null);
        /// <summary>
        /// Gets underwriting condition detail for a ConditionId
        /// </summary>
        /// <remarks>
        /// Returns underwriting condition detail for a ConditionId of a loan
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditionId">Guid - Unique Identifier of a condition</param>
        /// <param name="loanId">Guid - Loan id to which condition belogs to</param>
        /// <param name="includeRemoved">Flag indicating if the deleted condition has to included (optional)</param>
        /// <returns>EFolderUnderwritingConditionContract</returns>
        EFolderUnderwritingConditionContract GetEFolderUnderwritingConditionById (string conditionId, string loanId, string includeRemoved = null);

        /// <summary>
        /// Gets underwriting condition detail for a ConditionId
        /// </summary>
        /// <remarks>
        /// Returns underwriting condition detail for a ConditionId of a loan
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditionId">Guid - Unique Identifier of a condition</param>
        /// <param name="loanId">Guid - Loan id to which condition belogs to</param>
        /// <param name="includeRemoved">Flag indicating if the deleted condition has to included (optional)</param>
        /// <returns>ApiResponse of EFolderUnderwritingConditionContract</returns>
        ApiResponse<EFolderUnderwritingConditionContract> GetEFolderUnderwritingConditionByIdWithHttpInfo (string conditionId, string loanId, string includeRemoved = null);
        /// <summary>
        /// Gets list of underwriting conditions
        /// </summary>
        /// <remarks>
        /// Returns all underwriting conditions for a loan
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Guid - Loan id to which condition belongs to</param>
        /// <param name="sort">Comma separated list of sort parameters. Each sort parameter can be prefixed with +/- to indicate sort direction as ascending or descending. Default is ascending. If no parameter is specified, the returned collection will be sorted on Title in asceding direction. (optional)</param>
        /// <param name="filter">Comma spearated list of filter parameters. Filter is specified in format operand:operator:value.eg. title:&#x3D;:MyCondition. Valid operators are 1. &#39;&#x3D;&#39; or &#39;&#x3D;&#x3D;&#39;, &#39;!&#x3D;&#39;, &#39;&gt;&#39;, &#39;&gt;&#x3D;&#39;, &#39;&lt;&#39;, &#39;&lt;&#x3D;&#39;, &#39;like&#39; for Contains, &#39;sw&#39; for StartsWith, &#39;ew&#39; for Endswith&lt;/param&gt; (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of conditions. This is defaulted to 1. (optional)</param>
        /// <param name="limit">Total number of records to be returned on a page. (optional)</param>
        /// <param name="includeRemoved">Flag indicating if deleted conditions have to included. (optional)</param>
        /// <returns>List&lt;EFolderUnderwritingConditionContract&gt;</returns>
        List<EFolderUnderwritingConditionContract> GetEFolderUnderwritingConditions (string loanId, string sort = null, string filter = null, string start = null, string limit = null, string includeRemoved = null);

        /// <summary>
        /// Gets list of underwriting conditions
        /// </summary>
        /// <remarks>
        /// Returns all underwriting conditions for a loan
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Guid - Loan id to which condition belongs to</param>
        /// <param name="sort">Comma separated list of sort parameters. Each sort parameter can be prefixed with +/- to indicate sort direction as ascending or descending. Default is ascending. If no parameter is specified, the returned collection will be sorted on Title in asceding direction. (optional)</param>
        /// <param name="filter">Comma spearated list of filter parameters. Filter is specified in format operand:operator:value.eg. title:&#x3D;:MyCondition. Valid operators are 1. &#39;&#x3D;&#39; or &#39;&#x3D;&#x3D;&#39;, &#39;!&#x3D;&#39;, &#39;&gt;&#39;, &#39;&gt;&#x3D;&#39;, &#39;&lt;&#39;, &#39;&lt;&#x3D;&#39;, &#39;like&#39; for Contains, &#39;sw&#39; for StartsWith, &#39;ew&#39; for Endswith&lt;/param&gt; (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of conditions. This is defaulted to 1. (optional)</param>
        /// <param name="limit">Total number of records to be returned on a page. (optional)</param>
        /// <param name="includeRemoved">Flag indicating if deleted conditions have to included. (optional)</param>
        /// <returns>ApiResponse of List&lt;EFolderUnderwritingConditionContract&gt;</returns>
        ApiResponse<List<EFolderUnderwritingConditionContract>> GetEFolderUnderwritingConditionsWithHttpInfo (string loanId, string sort = null, string filter = null, string start = null, string limit = null, string includeRemoved = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets post closing condition detail for a ConditionId
        /// </summary>
        /// <remarks>
        /// Returns post closing condition detail for a ConditionId of a loan
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditionId">Guid - Unique Identifier of a condition</param>
        /// <param name="loanId">Guid - Loan id to which condition belogs to</param>
        /// <param name="includeRemoved">Flag indicating if the deleted condition has to be included (optional)</param>
        /// <returns>Task of EFolderPostClosingConditionContract</returns>
        System.Threading.Tasks.Task<EFolderPostClosingConditionContract> GetEFolderPostclosingConditionByIdAsync (string conditionId, string loanId, string includeRemoved = null);

        /// <summary>
        /// Gets post closing condition detail for a ConditionId
        /// </summary>
        /// <remarks>
        /// Returns post closing condition detail for a ConditionId of a loan
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditionId">Guid - Unique Identifier of a condition</param>
        /// <param name="loanId">Guid - Loan id to which condition belogs to</param>
        /// <param name="includeRemoved">Flag indicating if the deleted condition has to be included (optional)</param>
        /// <returns>Task of ApiResponse (EFolderPostClosingConditionContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<EFolderPostClosingConditionContract>> GetEFolderPostclosingConditionByIdAsyncWithHttpInfo (string conditionId, string loanId, string includeRemoved = null);
        /// <summary>
        /// Get EFolder Postclosing Conditions for a loan
        /// </summary>
        /// <remarks>
        /// Returns all EFolder Postclosing Conditions for a loan
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Guid - Loan id to which condition belongs to</param>
        /// <param name="sort">Comma separated list of sort parameters. Each sort parameter can be prefixed with +/- to indicate sort direction as ascending or descending. Default is ascending. If no parameter is specified, the returned collection will be sorted on Title in asceding direction. (optional)</param>
        /// <param name="filter">Comma spearated list of filter parameters. Filter is specified in format operand:operator:value.eg. title:&#x3D;:MyCondition. Valid operators are 1. &#39;&#x3D;&#39; or &#39;&#x3D;&#x3D;&#39;, &#39;!&#x3D;&#39;, &#39;&gt;&#39;, &#39;&gt;&#x3D;&#39;, &#39;&lt;&#39;, &#39;&lt;&#x3D;&#39;, &#39;like&#39; for Contains, &#39;sw&#39; for StartsWith, &#39;ew&#39; for Endswith&lt;/param&gt; (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of conditions. This is defaulted to 1. (optional)</param>
        /// <param name="limit">Total number of records to be returned on a page. (optional)</param>
        /// <param name="includeRemoved">Flag indicating if deleted conditions have to included. (optional)</param>
        /// <returns>Task of List&lt;EFolderPostClosingConditionContract&gt;</returns>
        System.Threading.Tasks.Task<List<EFolderPostClosingConditionContract>> GetEFolderPostclosingConditionsAsync (string loanId, string sort = null, string filter = null, string start = null, string limit = null, string includeRemoved = null);

        /// <summary>
        /// Get EFolder Postclosing Conditions for a loan
        /// </summary>
        /// <remarks>
        /// Returns all EFolder Postclosing Conditions for a loan
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Guid - Loan id to which condition belongs to</param>
        /// <param name="sort">Comma separated list of sort parameters. Each sort parameter can be prefixed with +/- to indicate sort direction as ascending or descending. Default is ascending. If no parameter is specified, the returned collection will be sorted on Title in asceding direction. (optional)</param>
        /// <param name="filter">Comma spearated list of filter parameters. Filter is specified in format operand:operator:value.eg. title:&#x3D;:MyCondition. Valid operators are 1. &#39;&#x3D;&#39; or &#39;&#x3D;&#x3D;&#39;, &#39;!&#x3D;&#39;, &#39;&gt;&#39;, &#39;&gt;&#x3D;&#39;, &#39;&lt;&#39;, &#39;&lt;&#x3D;&#39;, &#39;like&#39; for Contains, &#39;sw&#39; for StartsWith, &#39;ew&#39; for Endswith&lt;/param&gt; (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of conditions. This is defaulted to 1. (optional)</param>
        /// <param name="limit">Total number of records to be returned on a page. (optional)</param>
        /// <param name="includeRemoved">Flag indicating if deleted conditions have to included. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EFolderPostClosingConditionContract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EFolderPostClosingConditionContract>>> GetEFolderPostclosingConditionsAsyncWithHttpInfo (string loanId, string sort = null, string filter = null, string start = null, string limit = null, string includeRemoved = null);
        /// <summary>
        /// Gets preliminary condition detail for a ConditionId
        /// </summary>
        /// <remarks>
        /// Returns preliminary condition detail for a ConditionId
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditionId">Guid - Unique Identifier of a condition</param>
        /// <param name="loanId">Guid - Loan id to which condition belogs to</param>
        /// <param name="includeRemoved">Flag indicating if the deleted condition has to included (optional)</param>
        /// <returns>Task of EFolderPreliminaryConditionContract</returns>
        System.Threading.Tasks.Task<EFolderPreliminaryConditionContract> GetEFolderPreliminaryConditionByIdAsync (string conditionId, string loanId, string includeRemoved = null);

        /// <summary>
        /// Gets preliminary condition detail for a ConditionId
        /// </summary>
        /// <remarks>
        /// Returns preliminary condition detail for a ConditionId
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditionId">Guid - Unique Identifier of a condition</param>
        /// <param name="loanId">Guid - Loan id to which condition belogs to</param>
        /// <param name="includeRemoved">Flag indicating if the deleted condition has to included (optional)</param>
        /// <returns>Task of ApiResponse (EFolderPreliminaryConditionContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<EFolderPreliminaryConditionContract>> GetEFolderPreliminaryConditionByIdAsyncWithHttpInfo (string conditionId, string loanId, string includeRemoved = null);
        /// <summary>
        /// Gets list of preliminary conditions
        /// </summary>
        /// <remarks>
        /// Returns list of preliminary conditions for a loan
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Guid - Loan id to which condition belongs to</param>
        /// <param name="sort">Comma separated list of sort parameters. Each sort parameter can be prefixed with +/- to indicate sort direction as ascending or descending. Default is ascending. If no parameter is specified, the returned collection will be sorted on Title in asceding direction. (optional)</param>
        /// <param name="filter">Comma spearated list of filter parameters. Filter is specified in format operand:operator:value.eg. title:&#x3D;:MyCondition. Valid operators are 1. &#39;&#x3D;&#39; or &#39;&#x3D;&#x3D;&#39;, &#39;!&#x3D;&#39;, &#39;&gt;&#39;, &#39;&gt;&#x3D;&#39;, &#39;&lt;&#39;, &#39;&lt;&#x3D;&#39;, &#39;like&#39; for Contains, &#39;sw&#39; for StartsWith, &#39;ew&#39; for Endswith&lt;/param&gt; (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of conditions. This is defaulted to 1. (optional)</param>
        /// <param name="limit">Total number of records to be returned on a page. (optional)</param>
        /// <param name="includeRemoved">Flag indicating if deleted conditions have to included. (optional)</param>
        /// <returns>Task of List&lt;EFolderPreliminaryConditionContract&gt;</returns>
        System.Threading.Tasks.Task<List<EFolderPreliminaryConditionContract>> GetEFolderPreliminaryConditionsAsync (string loanId, string sort = null, string filter = null, string start = null, string limit = null, string includeRemoved = null);

        /// <summary>
        /// Gets list of preliminary conditions
        /// </summary>
        /// <remarks>
        /// Returns list of preliminary conditions for a loan
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Guid - Loan id to which condition belongs to</param>
        /// <param name="sort">Comma separated list of sort parameters. Each sort parameter can be prefixed with +/- to indicate sort direction as ascending or descending. Default is ascending. If no parameter is specified, the returned collection will be sorted on Title in asceding direction. (optional)</param>
        /// <param name="filter">Comma spearated list of filter parameters. Filter is specified in format operand:operator:value.eg. title:&#x3D;:MyCondition. Valid operators are 1. &#39;&#x3D;&#39; or &#39;&#x3D;&#x3D;&#39;, &#39;!&#x3D;&#39;, &#39;&gt;&#39;, &#39;&gt;&#x3D;&#39;, &#39;&lt;&#39;, &#39;&lt;&#x3D;&#39;, &#39;like&#39; for Contains, &#39;sw&#39; for StartsWith, &#39;ew&#39; for Endswith&lt;/param&gt; (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of conditions. This is defaulted to 1. (optional)</param>
        /// <param name="limit">Total number of records to be returned on a page. (optional)</param>
        /// <param name="includeRemoved">Flag indicating if deleted conditions have to included. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EFolderPreliminaryConditionContract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EFolderPreliminaryConditionContract>>> GetEFolderPreliminaryConditionsAsyncWithHttpInfo (string loanId, string sort = null, string filter = null, string start = null, string limit = null, string includeRemoved = null);
        /// <summary>
        /// Gets underwriting condition detail for a ConditionId
        /// </summary>
        /// <remarks>
        /// Returns underwriting condition detail for a ConditionId of a loan
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditionId">Guid - Unique Identifier of a condition</param>
        /// <param name="loanId">Guid - Loan id to which condition belogs to</param>
        /// <param name="includeRemoved">Flag indicating if the deleted condition has to included (optional)</param>
        /// <returns>Task of EFolderUnderwritingConditionContract</returns>
        System.Threading.Tasks.Task<EFolderUnderwritingConditionContract> GetEFolderUnderwritingConditionByIdAsync (string conditionId, string loanId, string includeRemoved = null);

        /// <summary>
        /// Gets underwriting condition detail for a ConditionId
        /// </summary>
        /// <remarks>
        /// Returns underwriting condition detail for a ConditionId of a loan
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditionId">Guid - Unique Identifier of a condition</param>
        /// <param name="loanId">Guid - Loan id to which condition belogs to</param>
        /// <param name="includeRemoved">Flag indicating if the deleted condition has to included (optional)</param>
        /// <returns>Task of ApiResponse (EFolderUnderwritingConditionContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<EFolderUnderwritingConditionContract>> GetEFolderUnderwritingConditionByIdAsyncWithHttpInfo (string conditionId, string loanId, string includeRemoved = null);
        /// <summary>
        /// Gets list of underwriting conditions
        /// </summary>
        /// <remarks>
        /// Returns all underwriting conditions for a loan
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Guid - Loan id to which condition belongs to</param>
        /// <param name="sort">Comma separated list of sort parameters. Each sort parameter can be prefixed with +/- to indicate sort direction as ascending or descending. Default is ascending. If no parameter is specified, the returned collection will be sorted on Title in asceding direction. (optional)</param>
        /// <param name="filter">Comma spearated list of filter parameters. Filter is specified in format operand:operator:value.eg. title:&#x3D;:MyCondition. Valid operators are 1. &#39;&#x3D;&#39; or &#39;&#x3D;&#x3D;&#39;, &#39;!&#x3D;&#39;, &#39;&gt;&#39;, &#39;&gt;&#x3D;&#39;, &#39;&lt;&#39;, &#39;&lt;&#x3D;&#39;, &#39;like&#39; for Contains, &#39;sw&#39; for StartsWith, &#39;ew&#39; for Endswith&lt;/param&gt; (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of conditions. This is defaulted to 1. (optional)</param>
        /// <param name="limit">Total number of records to be returned on a page. (optional)</param>
        /// <param name="includeRemoved">Flag indicating if deleted conditions have to included. (optional)</param>
        /// <returns>Task of List&lt;EFolderUnderwritingConditionContract&gt;</returns>
        System.Threading.Tasks.Task<List<EFolderUnderwritingConditionContract>> GetEFolderUnderwritingConditionsAsync (string loanId, string sort = null, string filter = null, string start = null, string limit = null, string includeRemoved = null);

        /// <summary>
        /// Gets list of underwriting conditions
        /// </summary>
        /// <remarks>
        /// Returns all underwriting conditions for a loan
        /// </remarks>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Guid - Loan id to which condition belongs to</param>
        /// <param name="sort">Comma separated list of sort parameters. Each sort parameter can be prefixed with +/- to indicate sort direction as ascending or descending. Default is ascending. If no parameter is specified, the returned collection will be sorted on Title in asceding direction. (optional)</param>
        /// <param name="filter">Comma spearated list of filter parameters. Filter is specified in format operand:operator:value.eg. title:&#x3D;:MyCondition. Valid operators are 1. &#39;&#x3D;&#39; or &#39;&#x3D;&#x3D;&#39;, &#39;!&#x3D;&#39;, &#39;&gt;&#39;, &#39;&gt;&#x3D;&#39;, &#39;&lt;&#39;, &#39;&lt;&#x3D;&#39;, &#39;like&#39; for Contains, &#39;sw&#39; for StartsWith, &#39;ew&#39; for Endswith&lt;/param&gt; (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of conditions. This is defaulted to 1. (optional)</param>
        /// <param name="limit">Total number of records to be returned on a page. (optional)</param>
        /// <param name="includeRemoved">Flag indicating if deleted conditions have to included. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EFolderUnderwritingConditionContract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EFolderUnderwritingConditionContract>>> GetEFolderUnderwritingConditionsAsyncWithHttpInfo (string loanId, string sort = null, string filter = null, string start = null, string limit = null, string includeRemoved = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConditionsApi : IConditionsApi
    {
        private Elli.Api.Loans.EFolder.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConditionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConditionsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Elli.Api.Loans.EFolder.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConditionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConditionsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Elli.Api.Loans.EFolder.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Elli.Api.Loans.EFolder.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets post closing condition detail for a ConditionId Returns post closing condition detail for a ConditionId of a loan
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditionId">Guid - Unique Identifier of a condition</param>
        /// <param name="loanId">Guid - Loan id to which condition belogs to</param>
        /// <param name="includeRemoved">Flag indicating if the deleted condition has to be included (optional)</param>
        /// <returns>EFolderPostClosingConditionContract</returns>
        public EFolderPostClosingConditionContract GetEFolderPostclosingConditionById (string conditionId, string loanId, string includeRemoved = null)
        {
             ApiResponse<EFolderPostClosingConditionContract> localVarResponse = GetEFolderPostclosingConditionByIdWithHttpInfo(conditionId, loanId, includeRemoved);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets post closing condition detail for a ConditionId Returns post closing condition detail for a ConditionId of a loan
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditionId">Guid - Unique Identifier of a condition</param>
        /// <param name="loanId">Guid - Loan id to which condition belogs to</param>
        /// <param name="includeRemoved">Flag indicating if the deleted condition has to be included (optional)</param>
        /// <returns>ApiResponse of EFolderPostClosingConditionContract</returns>
        public ApiResponse< EFolderPostClosingConditionContract > GetEFolderPostclosingConditionByIdWithHttpInfo (string conditionId, string loanId, string includeRemoved = null)
        {
            // verify the required parameter 'conditionId' is set
            if (conditionId == null)
                throw new ApiException(400, "Missing required parameter 'conditionId' when calling ConditionsApi->GetEFolderPostclosingConditionById");
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling ConditionsApi->GetEFolderPostclosingConditionById");

            var localVarPath = "/encompass/v1/loans/{loanId}/conditions/postclosing/{conditionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conditionId != null) localVarPathParams.Add("conditionId", Configuration.ApiClient.ParameterToString(conditionId)); // path parameter
            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (includeRemoved != null) localVarQueryParams.Add("includeRemoved", Configuration.ApiClient.ParameterToString(includeRemoved)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEFolderPostclosingConditionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EFolderPostClosingConditionContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EFolderPostClosingConditionContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EFolderPostClosingConditionContract)));
        }

        /// <summary>
        /// Gets post closing condition detail for a ConditionId Returns post closing condition detail for a ConditionId of a loan
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditionId">Guid - Unique Identifier of a condition</param>
        /// <param name="loanId">Guid - Loan id to which condition belogs to</param>
        /// <param name="includeRemoved">Flag indicating if the deleted condition has to be included (optional)</param>
        /// <returns>Task of EFolderPostClosingConditionContract</returns>
        public async System.Threading.Tasks.Task<EFolderPostClosingConditionContract> GetEFolderPostclosingConditionByIdAsync (string conditionId, string loanId, string includeRemoved = null)
        {
             ApiResponse<EFolderPostClosingConditionContract> localVarResponse = await GetEFolderPostclosingConditionByIdAsyncWithHttpInfo(conditionId, loanId, includeRemoved);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets post closing condition detail for a ConditionId Returns post closing condition detail for a ConditionId of a loan
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditionId">Guid - Unique Identifier of a condition</param>
        /// <param name="loanId">Guid - Loan id to which condition belogs to</param>
        /// <param name="includeRemoved">Flag indicating if the deleted condition has to be included (optional)</param>
        /// <returns>Task of ApiResponse (EFolderPostClosingConditionContract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EFolderPostClosingConditionContract>> GetEFolderPostclosingConditionByIdAsyncWithHttpInfo (string conditionId, string loanId, string includeRemoved = null)
        {
            // verify the required parameter 'conditionId' is set
            if (conditionId == null)
                throw new ApiException(400, "Missing required parameter 'conditionId' when calling ConditionsApi->GetEFolderPostclosingConditionById");
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling ConditionsApi->GetEFolderPostclosingConditionById");

            var localVarPath = "/encompass/v1/loans/{loanId}/conditions/postclosing/{conditionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conditionId != null) localVarPathParams.Add("conditionId", Configuration.ApiClient.ParameterToString(conditionId)); // path parameter
            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (includeRemoved != null) localVarQueryParams.Add("includeRemoved", Configuration.ApiClient.ParameterToString(includeRemoved)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEFolderPostclosingConditionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EFolderPostClosingConditionContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EFolderPostClosingConditionContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EFolderPostClosingConditionContract)));
        }

        /// <summary>
        /// Get EFolder Postclosing Conditions for a loan Returns all EFolder Postclosing Conditions for a loan
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Guid - Loan id to which condition belongs to</param>
        /// <param name="sort">Comma separated list of sort parameters. Each sort parameter can be prefixed with +/- to indicate sort direction as ascending or descending. Default is ascending. If no parameter is specified, the returned collection will be sorted on Title in asceding direction. (optional)</param>
        /// <param name="filter">Comma spearated list of filter parameters. Filter is specified in format operand:operator:value.eg. title:&#x3D;:MyCondition. Valid operators are 1. &#39;&#x3D;&#39; or &#39;&#x3D;&#x3D;&#39;, &#39;!&#x3D;&#39;, &#39;&gt;&#39;, &#39;&gt;&#x3D;&#39;, &#39;&lt;&#39;, &#39;&lt;&#x3D;&#39;, &#39;like&#39; for Contains, &#39;sw&#39; for StartsWith, &#39;ew&#39; for Endswith&lt;/param&gt; (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of conditions. This is defaulted to 1. (optional)</param>
        /// <param name="limit">Total number of records to be returned on a page. (optional)</param>
        /// <param name="includeRemoved">Flag indicating if deleted conditions have to included. (optional)</param>
        /// <returns>List&lt;EFolderPostClosingConditionContract&gt;</returns>
        public List<EFolderPostClosingConditionContract> GetEFolderPostclosingConditions (string loanId, string sort = null, string filter = null, string start = null, string limit = null, string includeRemoved = null)
        {
             ApiResponse<List<EFolderPostClosingConditionContract>> localVarResponse = GetEFolderPostclosingConditionsWithHttpInfo(loanId, sort, filter, start, limit, includeRemoved);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get EFolder Postclosing Conditions for a loan Returns all EFolder Postclosing Conditions for a loan
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Guid - Loan id to which condition belongs to</param>
        /// <param name="sort">Comma separated list of sort parameters. Each sort parameter can be prefixed with +/- to indicate sort direction as ascending or descending. Default is ascending. If no parameter is specified, the returned collection will be sorted on Title in asceding direction. (optional)</param>
        /// <param name="filter">Comma spearated list of filter parameters. Filter is specified in format operand:operator:value.eg. title:&#x3D;:MyCondition. Valid operators are 1. &#39;&#x3D;&#39; or &#39;&#x3D;&#x3D;&#39;, &#39;!&#x3D;&#39;, &#39;&gt;&#39;, &#39;&gt;&#x3D;&#39;, &#39;&lt;&#39;, &#39;&lt;&#x3D;&#39;, &#39;like&#39; for Contains, &#39;sw&#39; for StartsWith, &#39;ew&#39; for Endswith&lt;/param&gt; (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of conditions. This is defaulted to 1. (optional)</param>
        /// <param name="limit">Total number of records to be returned on a page. (optional)</param>
        /// <param name="includeRemoved">Flag indicating if deleted conditions have to included. (optional)</param>
        /// <returns>ApiResponse of List&lt;EFolderPostClosingConditionContract&gt;</returns>
        public ApiResponse< List<EFolderPostClosingConditionContract> > GetEFolderPostclosingConditionsWithHttpInfo (string loanId, string sort = null, string filter = null, string start = null, string limit = null, string includeRemoved = null)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling ConditionsApi->GetEFolderPostclosingConditions");

            var localVarPath = "/encompass/v1/loans/{loanId}/conditions/postclosing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (includeRemoved != null) localVarQueryParams.Add("includeRemoved", Configuration.ApiClient.ParameterToString(includeRemoved)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEFolderPostclosingConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EFolderPostClosingConditionContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EFolderPostClosingConditionContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EFolderPostClosingConditionContract>)));
        }

        /// <summary>
        /// Get EFolder Postclosing Conditions for a loan Returns all EFolder Postclosing Conditions for a loan
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Guid - Loan id to which condition belongs to</param>
        /// <param name="sort">Comma separated list of sort parameters. Each sort parameter can be prefixed with +/- to indicate sort direction as ascending or descending. Default is ascending. If no parameter is specified, the returned collection will be sorted on Title in asceding direction. (optional)</param>
        /// <param name="filter">Comma spearated list of filter parameters. Filter is specified in format operand:operator:value.eg. title:&#x3D;:MyCondition. Valid operators are 1. &#39;&#x3D;&#39; or &#39;&#x3D;&#x3D;&#39;, &#39;!&#x3D;&#39;, &#39;&gt;&#39;, &#39;&gt;&#x3D;&#39;, &#39;&lt;&#39;, &#39;&lt;&#x3D;&#39;, &#39;like&#39; for Contains, &#39;sw&#39; for StartsWith, &#39;ew&#39; for Endswith&lt;/param&gt; (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of conditions. This is defaulted to 1. (optional)</param>
        /// <param name="limit">Total number of records to be returned on a page. (optional)</param>
        /// <param name="includeRemoved">Flag indicating if deleted conditions have to included. (optional)</param>
        /// <returns>Task of List&lt;EFolderPostClosingConditionContract&gt;</returns>
        public async System.Threading.Tasks.Task<List<EFolderPostClosingConditionContract>> GetEFolderPostclosingConditionsAsync (string loanId, string sort = null, string filter = null, string start = null, string limit = null, string includeRemoved = null)
        {
             ApiResponse<List<EFolderPostClosingConditionContract>> localVarResponse = await GetEFolderPostclosingConditionsAsyncWithHttpInfo(loanId, sort, filter, start, limit, includeRemoved);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get EFolder Postclosing Conditions for a loan Returns all EFolder Postclosing Conditions for a loan
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Guid - Loan id to which condition belongs to</param>
        /// <param name="sort">Comma separated list of sort parameters. Each sort parameter can be prefixed with +/- to indicate sort direction as ascending or descending. Default is ascending. If no parameter is specified, the returned collection will be sorted on Title in asceding direction. (optional)</param>
        /// <param name="filter">Comma spearated list of filter parameters. Filter is specified in format operand:operator:value.eg. title:&#x3D;:MyCondition. Valid operators are 1. &#39;&#x3D;&#39; or &#39;&#x3D;&#x3D;&#39;, &#39;!&#x3D;&#39;, &#39;&gt;&#39;, &#39;&gt;&#x3D;&#39;, &#39;&lt;&#39;, &#39;&lt;&#x3D;&#39;, &#39;like&#39; for Contains, &#39;sw&#39; for StartsWith, &#39;ew&#39; for Endswith&lt;/param&gt; (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of conditions. This is defaulted to 1. (optional)</param>
        /// <param name="limit">Total number of records to be returned on a page. (optional)</param>
        /// <param name="includeRemoved">Flag indicating if deleted conditions have to included. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EFolderPostClosingConditionContract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EFolderPostClosingConditionContract>>> GetEFolderPostclosingConditionsAsyncWithHttpInfo (string loanId, string sort = null, string filter = null, string start = null, string limit = null, string includeRemoved = null)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling ConditionsApi->GetEFolderPostclosingConditions");

            var localVarPath = "/encompass/v1/loans/{loanId}/conditions/postclosing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (includeRemoved != null) localVarQueryParams.Add("includeRemoved", Configuration.ApiClient.ParameterToString(includeRemoved)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEFolderPostclosingConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EFolderPostClosingConditionContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EFolderPostClosingConditionContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EFolderPostClosingConditionContract>)));
        }

        /// <summary>
        /// Gets preliminary condition detail for a ConditionId Returns preliminary condition detail for a ConditionId
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditionId">Guid - Unique Identifier of a condition</param>
        /// <param name="loanId">Guid - Loan id to which condition belogs to</param>
        /// <param name="includeRemoved">Flag indicating if the deleted condition has to included (optional)</param>
        /// <returns>EFolderPreliminaryConditionContract</returns>
        public EFolderPreliminaryConditionContract GetEFolderPreliminaryConditionById (string conditionId, string loanId, string includeRemoved = null)
        {
             ApiResponse<EFolderPreliminaryConditionContract> localVarResponse = GetEFolderPreliminaryConditionByIdWithHttpInfo(conditionId, loanId, includeRemoved);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets preliminary condition detail for a ConditionId Returns preliminary condition detail for a ConditionId
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditionId">Guid - Unique Identifier of a condition</param>
        /// <param name="loanId">Guid - Loan id to which condition belogs to</param>
        /// <param name="includeRemoved">Flag indicating if the deleted condition has to included (optional)</param>
        /// <returns>ApiResponse of EFolderPreliminaryConditionContract</returns>
        public ApiResponse< EFolderPreliminaryConditionContract > GetEFolderPreliminaryConditionByIdWithHttpInfo (string conditionId, string loanId, string includeRemoved = null)
        {
            // verify the required parameter 'conditionId' is set
            if (conditionId == null)
                throw new ApiException(400, "Missing required parameter 'conditionId' when calling ConditionsApi->GetEFolderPreliminaryConditionById");
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling ConditionsApi->GetEFolderPreliminaryConditionById");

            var localVarPath = "/encompass/v1/loans/{loanId}/conditions/preliminary/{conditionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conditionId != null) localVarPathParams.Add("conditionId", Configuration.ApiClient.ParameterToString(conditionId)); // path parameter
            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (includeRemoved != null) localVarQueryParams.Add("includeRemoved", Configuration.ApiClient.ParameterToString(includeRemoved)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEFolderPreliminaryConditionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EFolderPreliminaryConditionContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EFolderPreliminaryConditionContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EFolderPreliminaryConditionContract)));
        }

        /// <summary>
        /// Gets preliminary condition detail for a ConditionId Returns preliminary condition detail for a ConditionId
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditionId">Guid - Unique Identifier of a condition</param>
        /// <param name="loanId">Guid - Loan id to which condition belogs to</param>
        /// <param name="includeRemoved">Flag indicating if the deleted condition has to included (optional)</param>
        /// <returns>Task of EFolderPreliminaryConditionContract</returns>
        public async System.Threading.Tasks.Task<EFolderPreliminaryConditionContract> GetEFolderPreliminaryConditionByIdAsync (string conditionId, string loanId, string includeRemoved = null)
        {
             ApiResponse<EFolderPreliminaryConditionContract> localVarResponse = await GetEFolderPreliminaryConditionByIdAsyncWithHttpInfo(conditionId, loanId, includeRemoved);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets preliminary condition detail for a ConditionId Returns preliminary condition detail for a ConditionId
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditionId">Guid - Unique Identifier of a condition</param>
        /// <param name="loanId">Guid - Loan id to which condition belogs to</param>
        /// <param name="includeRemoved">Flag indicating if the deleted condition has to included (optional)</param>
        /// <returns>Task of ApiResponse (EFolderPreliminaryConditionContract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EFolderPreliminaryConditionContract>> GetEFolderPreliminaryConditionByIdAsyncWithHttpInfo (string conditionId, string loanId, string includeRemoved = null)
        {
            // verify the required parameter 'conditionId' is set
            if (conditionId == null)
                throw new ApiException(400, "Missing required parameter 'conditionId' when calling ConditionsApi->GetEFolderPreliminaryConditionById");
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling ConditionsApi->GetEFolderPreliminaryConditionById");

            var localVarPath = "/encompass/v1/loans/{loanId}/conditions/preliminary/{conditionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conditionId != null) localVarPathParams.Add("conditionId", Configuration.ApiClient.ParameterToString(conditionId)); // path parameter
            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (includeRemoved != null) localVarQueryParams.Add("includeRemoved", Configuration.ApiClient.ParameterToString(includeRemoved)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEFolderPreliminaryConditionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EFolderPreliminaryConditionContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EFolderPreliminaryConditionContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EFolderPreliminaryConditionContract)));
        }

        /// <summary>
        /// Gets list of preliminary conditions Returns list of preliminary conditions for a loan
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Guid - Loan id to which condition belongs to</param>
        /// <param name="sort">Comma separated list of sort parameters. Each sort parameter can be prefixed with +/- to indicate sort direction as ascending or descending. Default is ascending. If no parameter is specified, the returned collection will be sorted on Title in asceding direction. (optional)</param>
        /// <param name="filter">Comma spearated list of filter parameters. Filter is specified in format operand:operator:value.eg. title:&#x3D;:MyCondition. Valid operators are 1. &#39;&#x3D;&#39; or &#39;&#x3D;&#x3D;&#39;, &#39;!&#x3D;&#39;, &#39;&gt;&#39;, &#39;&gt;&#x3D;&#39;, &#39;&lt;&#39;, &#39;&lt;&#x3D;&#39;, &#39;like&#39; for Contains, &#39;sw&#39; for StartsWith, &#39;ew&#39; for Endswith&lt;/param&gt; (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of conditions. This is defaulted to 1. (optional)</param>
        /// <param name="limit">Total number of records to be returned on a page. (optional)</param>
        /// <param name="includeRemoved">Flag indicating if deleted conditions have to included. (optional)</param>
        /// <returns>List&lt;EFolderPreliminaryConditionContract&gt;</returns>
        public List<EFolderPreliminaryConditionContract> GetEFolderPreliminaryConditions (string loanId, string sort = null, string filter = null, string start = null, string limit = null, string includeRemoved = null)
        {
             ApiResponse<List<EFolderPreliminaryConditionContract>> localVarResponse = GetEFolderPreliminaryConditionsWithHttpInfo(loanId, sort, filter, start, limit, includeRemoved);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets list of preliminary conditions Returns list of preliminary conditions for a loan
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Guid - Loan id to which condition belongs to</param>
        /// <param name="sort">Comma separated list of sort parameters. Each sort parameter can be prefixed with +/- to indicate sort direction as ascending or descending. Default is ascending. If no parameter is specified, the returned collection will be sorted on Title in asceding direction. (optional)</param>
        /// <param name="filter">Comma spearated list of filter parameters. Filter is specified in format operand:operator:value.eg. title:&#x3D;:MyCondition. Valid operators are 1. &#39;&#x3D;&#39; or &#39;&#x3D;&#x3D;&#39;, &#39;!&#x3D;&#39;, &#39;&gt;&#39;, &#39;&gt;&#x3D;&#39;, &#39;&lt;&#39;, &#39;&lt;&#x3D;&#39;, &#39;like&#39; for Contains, &#39;sw&#39; for StartsWith, &#39;ew&#39; for Endswith&lt;/param&gt; (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of conditions. This is defaulted to 1. (optional)</param>
        /// <param name="limit">Total number of records to be returned on a page. (optional)</param>
        /// <param name="includeRemoved">Flag indicating if deleted conditions have to included. (optional)</param>
        /// <returns>ApiResponse of List&lt;EFolderPreliminaryConditionContract&gt;</returns>
        public ApiResponse< List<EFolderPreliminaryConditionContract> > GetEFolderPreliminaryConditionsWithHttpInfo (string loanId, string sort = null, string filter = null, string start = null, string limit = null, string includeRemoved = null)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling ConditionsApi->GetEFolderPreliminaryConditions");

            var localVarPath = "/encompass/v1/loans/{loanId}/conditions/preliminary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (includeRemoved != null) localVarQueryParams.Add("includeRemoved", Configuration.ApiClient.ParameterToString(includeRemoved)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEFolderPreliminaryConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EFolderPreliminaryConditionContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EFolderPreliminaryConditionContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EFolderPreliminaryConditionContract>)));
        }

        /// <summary>
        /// Gets list of preliminary conditions Returns list of preliminary conditions for a loan
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Guid - Loan id to which condition belongs to</param>
        /// <param name="sort">Comma separated list of sort parameters. Each sort parameter can be prefixed with +/- to indicate sort direction as ascending or descending. Default is ascending. If no parameter is specified, the returned collection will be sorted on Title in asceding direction. (optional)</param>
        /// <param name="filter">Comma spearated list of filter parameters. Filter is specified in format operand:operator:value.eg. title:&#x3D;:MyCondition. Valid operators are 1. &#39;&#x3D;&#39; or &#39;&#x3D;&#x3D;&#39;, &#39;!&#x3D;&#39;, &#39;&gt;&#39;, &#39;&gt;&#x3D;&#39;, &#39;&lt;&#39;, &#39;&lt;&#x3D;&#39;, &#39;like&#39; for Contains, &#39;sw&#39; for StartsWith, &#39;ew&#39; for Endswith&lt;/param&gt; (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of conditions. This is defaulted to 1. (optional)</param>
        /// <param name="limit">Total number of records to be returned on a page. (optional)</param>
        /// <param name="includeRemoved">Flag indicating if deleted conditions have to included. (optional)</param>
        /// <returns>Task of List&lt;EFolderPreliminaryConditionContract&gt;</returns>
        public async System.Threading.Tasks.Task<List<EFolderPreliminaryConditionContract>> GetEFolderPreliminaryConditionsAsync (string loanId, string sort = null, string filter = null, string start = null, string limit = null, string includeRemoved = null)
        {
             ApiResponse<List<EFolderPreliminaryConditionContract>> localVarResponse = await GetEFolderPreliminaryConditionsAsyncWithHttpInfo(loanId, sort, filter, start, limit, includeRemoved);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets list of preliminary conditions Returns list of preliminary conditions for a loan
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Guid - Loan id to which condition belongs to</param>
        /// <param name="sort">Comma separated list of sort parameters. Each sort parameter can be prefixed with +/- to indicate sort direction as ascending or descending. Default is ascending. If no parameter is specified, the returned collection will be sorted on Title in asceding direction. (optional)</param>
        /// <param name="filter">Comma spearated list of filter parameters. Filter is specified in format operand:operator:value.eg. title:&#x3D;:MyCondition. Valid operators are 1. &#39;&#x3D;&#39; or &#39;&#x3D;&#x3D;&#39;, &#39;!&#x3D;&#39;, &#39;&gt;&#39;, &#39;&gt;&#x3D;&#39;, &#39;&lt;&#39;, &#39;&lt;&#x3D;&#39;, &#39;like&#39; for Contains, &#39;sw&#39; for StartsWith, &#39;ew&#39; for Endswith&lt;/param&gt; (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of conditions. This is defaulted to 1. (optional)</param>
        /// <param name="limit">Total number of records to be returned on a page. (optional)</param>
        /// <param name="includeRemoved">Flag indicating if deleted conditions have to included. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EFolderPreliminaryConditionContract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EFolderPreliminaryConditionContract>>> GetEFolderPreliminaryConditionsAsyncWithHttpInfo (string loanId, string sort = null, string filter = null, string start = null, string limit = null, string includeRemoved = null)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling ConditionsApi->GetEFolderPreliminaryConditions");

            var localVarPath = "/encompass/v1/loans/{loanId}/conditions/preliminary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (includeRemoved != null) localVarQueryParams.Add("includeRemoved", Configuration.ApiClient.ParameterToString(includeRemoved)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEFolderPreliminaryConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EFolderPreliminaryConditionContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EFolderPreliminaryConditionContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EFolderPreliminaryConditionContract>)));
        }

        /// <summary>
        /// Gets underwriting condition detail for a ConditionId Returns underwriting condition detail for a ConditionId of a loan
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditionId">Guid - Unique Identifier of a condition</param>
        /// <param name="loanId">Guid - Loan id to which condition belogs to</param>
        /// <param name="includeRemoved">Flag indicating if the deleted condition has to included (optional)</param>
        /// <returns>EFolderUnderwritingConditionContract</returns>
        public EFolderUnderwritingConditionContract GetEFolderUnderwritingConditionById (string conditionId, string loanId, string includeRemoved = null)
        {
             ApiResponse<EFolderUnderwritingConditionContract> localVarResponse = GetEFolderUnderwritingConditionByIdWithHttpInfo(conditionId, loanId, includeRemoved);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets underwriting condition detail for a ConditionId Returns underwriting condition detail for a ConditionId of a loan
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditionId">Guid - Unique Identifier of a condition</param>
        /// <param name="loanId">Guid - Loan id to which condition belogs to</param>
        /// <param name="includeRemoved">Flag indicating if the deleted condition has to included (optional)</param>
        /// <returns>ApiResponse of EFolderUnderwritingConditionContract</returns>
        public ApiResponse< EFolderUnderwritingConditionContract > GetEFolderUnderwritingConditionByIdWithHttpInfo (string conditionId, string loanId, string includeRemoved = null)
        {
            // verify the required parameter 'conditionId' is set
            if (conditionId == null)
                throw new ApiException(400, "Missing required parameter 'conditionId' when calling ConditionsApi->GetEFolderUnderwritingConditionById");
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling ConditionsApi->GetEFolderUnderwritingConditionById");

            var localVarPath = "/encompass/v1/loans/{loanId}/conditions/underwriting/{conditionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conditionId != null) localVarPathParams.Add("conditionId", Configuration.ApiClient.ParameterToString(conditionId)); // path parameter
            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (includeRemoved != null) localVarQueryParams.Add("includeRemoved", Configuration.ApiClient.ParameterToString(includeRemoved)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEFolderUnderwritingConditionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EFolderUnderwritingConditionContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EFolderUnderwritingConditionContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EFolderUnderwritingConditionContract)));
        }

        /// <summary>
        /// Gets underwriting condition detail for a ConditionId Returns underwriting condition detail for a ConditionId of a loan
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditionId">Guid - Unique Identifier of a condition</param>
        /// <param name="loanId">Guid - Loan id to which condition belogs to</param>
        /// <param name="includeRemoved">Flag indicating if the deleted condition has to included (optional)</param>
        /// <returns>Task of EFolderUnderwritingConditionContract</returns>
        public async System.Threading.Tasks.Task<EFolderUnderwritingConditionContract> GetEFolderUnderwritingConditionByIdAsync (string conditionId, string loanId, string includeRemoved = null)
        {
             ApiResponse<EFolderUnderwritingConditionContract> localVarResponse = await GetEFolderUnderwritingConditionByIdAsyncWithHttpInfo(conditionId, loanId, includeRemoved);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets underwriting condition detail for a ConditionId Returns underwriting condition detail for a ConditionId of a loan
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conditionId">Guid - Unique Identifier of a condition</param>
        /// <param name="loanId">Guid - Loan id to which condition belogs to</param>
        /// <param name="includeRemoved">Flag indicating if the deleted condition has to included (optional)</param>
        /// <returns>Task of ApiResponse (EFolderUnderwritingConditionContract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EFolderUnderwritingConditionContract>> GetEFolderUnderwritingConditionByIdAsyncWithHttpInfo (string conditionId, string loanId, string includeRemoved = null)
        {
            // verify the required parameter 'conditionId' is set
            if (conditionId == null)
                throw new ApiException(400, "Missing required parameter 'conditionId' when calling ConditionsApi->GetEFolderUnderwritingConditionById");
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling ConditionsApi->GetEFolderUnderwritingConditionById");

            var localVarPath = "/encompass/v1/loans/{loanId}/conditions/underwriting/{conditionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conditionId != null) localVarPathParams.Add("conditionId", Configuration.ApiClient.ParameterToString(conditionId)); // path parameter
            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (includeRemoved != null) localVarQueryParams.Add("includeRemoved", Configuration.ApiClient.ParameterToString(includeRemoved)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEFolderUnderwritingConditionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EFolderUnderwritingConditionContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EFolderUnderwritingConditionContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EFolderUnderwritingConditionContract)));
        }

        /// <summary>
        /// Gets list of underwriting conditions Returns all underwriting conditions for a loan
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Guid - Loan id to which condition belongs to</param>
        /// <param name="sort">Comma separated list of sort parameters. Each sort parameter can be prefixed with +/- to indicate sort direction as ascending or descending. Default is ascending. If no parameter is specified, the returned collection will be sorted on Title in asceding direction. (optional)</param>
        /// <param name="filter">Comma spearated list of filter parameters. Filter is specified in format operand:operator:value.eg. title:&#x3D;:MyCondition. Valid operators are 1. &#39;&#x3D;&#39; or &#39;&#x3D;&#x3D;&#39;, &#39;!&#x3D;&#39;, &#39;&gt;&#39;, &#39;&gt;&#x3D;&#39;, &#39;&lt;&#39;, &#39;&lt;&#x3D;&#39;, &#39;like&#39; for Contains, &#39;sw&#39; for StartsWith, &#39;ew&#39; for Endswith&lt;/param&gt; (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of conditions. This is defaulted to 1. (optional)</param>
        /// <param name="limit">Total number of records to be returned on a page. (optional)</param>
        /// <param name="includeRemoved">Flag indicating if deleted conditions have to included. (optional)</param>
        /// <returns>List&lt;EFolderUnderwritingConditionContract&gt;</returns>
        public List<EFolderUnderwritingConditionContract> GetEFolderUnderwritingConditions (string loanId, string sort = null, string filter = null, string start = null, string limit = null, string includeRemoved = null)
        {
             ApiResponse<List<EFolderUnderwritingConditionContract>> localVarResponse = GetEFolderUnderwritingConditionsWithHttpInfo(loanId, sort, filter, start, limit, includeRemoved);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets list of underwriting conditions Returns all underwriting conditions for a loan
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Guid - Loan id to which condition belongs to</param>
        /// <param name="sort">Comma separated list of sort parameters. Each sort parameter can be prefixed with +/- to indicate sort direction as ascending or descending. Default is ascending. If no parameter is specified, the returned collection will be sorted on Title in asceding direction. (optional)</param>
        /// <param name="filter">Comma spearated list of filter parameters. Filter is specified in format operand:operator:value.eg. title:&#x3D;:MyCondition. Valid operators are 1. &#39;&#x3D;&#39; or &#39;&#x3D;&#x3D;&#39;, &#39;!&#x3D;&#39;, &#39;&gt;&#39;, &#39;&gt;&#x3D;&#39;, &#39;&lt;&#39;, &#39;&lt;&#x3D;&#39;, &#39;like&#39; for Contains, &#39;sw&#39; for StartsWith, &#39;ew&#39; for Endswith&lt;/param&gt; (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of conditions. This is defaulted to 1. (optional)</param>
        /// <param name="limit">Total number of records to be returned on a page. (optional)</param>
        /// <param name="includeRemoved">Flag indicating if deleted conditions have to included. (optional)</param>
        /// <returns>ApiResponse of List&lt;EFolderUnderwritingConditionContract&gt;</returns>
        public ApiResponse< List<EFolderUnderwritingConditionContract> > GetEFolderUnderwritingConditionsWithHttpInfo (string loanId, string sort = null, string filter = null, string start = null, string limit = null, string includeRemoved = null)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling ConditionsApi->GetEFolderUnderwritingConditions");

            var localVarPath = "/encompass/v1/loans/{loanId}/conditions/underwriting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (includeRemoved != null) localVarQueryParams.Add("includeRemoved", Configuration.ApiClient.ParameterToString(includeRemoved)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEFolderUnderwritingConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EFolderUnderwritingConditionContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EFolderUnderwritingConditionContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EFolderUnderwritingConditionContract>)));
        }

        /// <summary>
        /// Gets list of underwriting conditions Returns all underwriting conditions for a loan
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Guid - Loan id to which condition belongs to</param>
        /// <param name="sort">Comma separated list of sort parameters. Each sort parameter can be prefixed with +/- to indicate sort direction as ascending or descending. Default is ascending. If no parameter is specified, the returned collection will be sorted on Title in asceding direction. (optional)</param>
        /// <param name="filter">Comma spearated list of filter parameters. Filter is specified in format operand:operator:value.eg. title:&#x3D;:MyCondition. Valid operators are 1. &#39;&#x3D;&#39; or &#39;&#x3D;&#x3D;&#39;, &#39;!&#x3D;&#39;, &#39;&gt;&#39;, &#39;&gt;&#x3D;&#39;, &#39;&lt;&#39;, &#39;&lt;&#x3D;&#39;, &#39;like&#39; for Contains, &#39;sw&#39; for StartsWith, &#39;ew&#39; for Endswith&lt;/param&gt; (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of conditions. This is defaulted to 1. (optional)</param>
        /// <param name="limit">Total number of records to be returned on a page. (optional)</param>
        /// <param name="includeRemoved">Flag indicating if deleted conditions have to included. (optional)</param>
        /// <returns>Task of List&lt;EFolderUnderwritingConditionContract&gt;</returns>
        public async System.Threading.Tasks.Task<List<EFolderUnderwritingConditionContract>> GetEFolderUnderwritingConditionsAsync (string loanId, string sort = null, string filter = null, string start = null, string limit = null, string includeRemoved = null)
        {
             ApiResponse<List<EFolderUnderwritingConditionContract>> localVarResponse = await GetEFolderUnderwritingConditionsAsyncWithHttpInfo(loanId, sort, filter, start, limit, includeRemoved);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets list of underwriting conditions Returns all underwriting conditions for a loan
        /// </summary>
        /// <exception cref="Elli.Api.Loans.EFolder.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loanId">Guid - Loan id to which condition belongs to</param>
        /// <param name="sort">Comma separated list of sort parameters. Each sort parameter can be prefixed with +/- to indicate sort direction as ascending or descending. Default is ascending. If no parameter is specified, the returned collection will be sorted on Title in asceding direction. (optional)</param>
        /// <param name="filter">Comma spearated list of filter parameters. Filter is specified in format operand:operator:value.eg. title:&#x3D;:MyCondition. Valid operators are 1. &#39;&#x3D;&#39; or &#39;&#x3D;&#x3D;&#39;, &#39;!&#x3D;&#39;, &#39;&gt;&#39;, &#39;&gt;&#x3D;&#39;, &#39;&lt;&#39;, &#39;&lt;&#x3D;&#39;, &#39;like&#39; for Contains, &#39;sw&#39; for StartsWith, &#39;ew&#39; for Endswith&lt;/param&gt; (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of conditions. This is defaulted to 1. (optional)</param>
        /// <param name="limit">Total number of records to be returned on a page. (optional)</param>
        /// <param name="includeRemoved">Flag indicating if deleted conditions have to included. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EFolderUnderwritingConditionContract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EFolderUnderwritingConditionContract>>> GetEFolderUnderwritingConditionsAsyncWithHttpInfo (string loanId, string sort = null, string filter = null, string start = null, string limit = null, string includeRemoved = null)
        {
            // verify the required parameter 'loanId' is set
            if (loanId == null)
                throw new ApiException(400, "Missing required parameter 'loanId' when calling ConditionsApi->GetEFolderUnderwritingConditions");

            var localVarPath = "/encompass/v1/loans/{loanId}/conditions/underwriting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loanId != null) localVarPathParams.Add("loanId", Configuration.ApiClient.ParameterToString(loanId)); // path parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (includeRemoved != null) localVarQueryParams.Add("includeRemoved", Configuration.ApiClient.ParameterToString(includeRemoved)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEFolderUnderwritingConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EFolderUnderwritingConditionContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EFolderUnderwritingConditionContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EFolderUnderwritingConditionContract>)));
        }

    }
}
