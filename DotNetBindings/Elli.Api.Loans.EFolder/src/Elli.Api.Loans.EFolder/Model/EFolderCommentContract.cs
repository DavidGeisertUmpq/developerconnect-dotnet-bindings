/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/


/* 
 * Loan
 *
 * APIs to manage eFolder related entities - document and attachment.
 *
 * OpenAPI spec version: 1.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elli.Api.Loans.EFolder.Client.SwaggerDateConverter;

namespace Elli.Api.Loans.EFolder.Model
{
    /// <summary>
    /// EFolderCommentContract
    /// </summary>
    [DataContract]
    public partial class EFolderCommentContract :  IEquatable<EFolderCommentContract>, IValidatableObject
    {
    
        
        /// <summary>
        /// unique identifier of a comment
        /// </summary>
        /// <value>unique identifier of a comment</value>
        [DataMember(Name="commentId", EmitDefaultValue=false)]
        public string CommentId { get; set; }

        /// <summary>
        /// comments
        /// </summary>
        /// <value>comments</value>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// forRoleId
        /// </summary>
        /// <value>forRoleId</value>
        [DataMember(Name="forRoleId", EmitDefaultValue=false)]
        public int? ForRoleId { get; set; }

        /// <summary>
        /// Role details
        /// </summary>
        /// <value>Role details</value>
        [DataMember(Name="forRole", EmitDefaultValue=false)]
        public EntityRefContract ForRole { get; set; }

        /// <summary>
        /// dateCreated
        /// </summary>
        /// <value>dateCreated</value>
        [DataMember(Name="dateCreated", EmitDefaultValue=false)]
        public DateTime? DateCreated { get; set; }

        /// <summary>
        /// Userid of an user who adds the comment.
        /// </summary>
        /// <value>Userid of an user who adds the comment.</value>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Name of an user who adds the comment.
        /// </summary>
        /// <value>Name of an user who adds the comment.</value>
        [DataMember(Name="createdByName", EmitDefaultValue=false)]
        public string CreatedByName { get; set; }

        /// <summary>
        /// dateReviewed
        /// </summary>
        /// <value>dateReviewed</value>
        [DataMember(Name="dateReviewed", EmitDefaultValue=false)]
        public DateTime? DateReviewed { get; set; }

        /// <summary>
        /// Userid of an user who reviewed the comment.
        /// </summary>
        /// <value>Userid of an user who reviewed the comment.</value>
        [DataMember(Name="reviewedBy", EmitDefaultValue=false)]
        public string ReviewedBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EFolderCommentContract {\n");
            sb.Append("  CommentId: ").Append(CommentId).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  ForRoleId: ").Append(ForRoleId).Append("\n");
            sb.Append("  ForRole: ").Append(ForRole).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedByName: ").Append(CreatedByName).Append("\n");
            sb.Append("  DateReviewed: ").Append(DateReviewed).Append("\n");
            sb.Append("  ReviewedBy: ").Append(ReviewedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EFolderCommentContract);
        }

        /// <summary>
        /// Returns true if EFolderCommentContract instances are equal
        /// </summary>
        /// <param name="input">Instance of EFolderCommentContract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EFolderCommentContract input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CommentId == input.CommentId ||
                    (this.CommentId != null &&
                    this.CommentId.Equals(input.CommentId))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.ForRoleId == input.ForRoleId ||
                    (this.ForRoleId != null &&
                    this.ForRoleId.Equals(input.ForRoleId))
                ) && 
                (
                    this.ForRole == input.ForRole ||
                    (this.ForRole != null &&
                    this.ForRole.Equals(input.ForRole))
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedByName == input.CreatedByName ||
                    (this.CreatedByName != null &&
                    this.CreatedByName.Equals(input.CreatedByName))
                ) && 
                (
                    this.DateReviewed == input.DateReviewed ||
                    (this.DateReviewed != null &&
                    this.DateReviewed.Equals(input.DateReviewed))
                ) && 
                (
                    this.ReviewedBy == input.ReviewedBy ||
                    (this.ReviewedBy != null &&
                    this.ReviewedBy.Equals(input.ReviewedBy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CommentId != null)
                    hashCode = hashCode * 59 + this.CommentId.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.ForRoleId != null)
                    hashCode = hashCode * 59 + this.ForRoleId.GetHashCode();
                if (this.ForRole != null)
                    hashCode = hashCode * 59 + this.ForRole.GetHashCode();
                if (this.DateCreated != null)
                    hashCode = hashCode * 59 + this.DateCreated.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.CreatedByName != null)
                    hashCode = hashCode * 59 + this.CreatedByName.GetHashCode();
                if (this.DateReviewed != null)
                    hashCode = hashCode * 59 + this.DateReviewed.GetHashCode();
                if (this.ReviewedBy != null)
                    hashCode = hashCode * 59 + this.ReviewedBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
