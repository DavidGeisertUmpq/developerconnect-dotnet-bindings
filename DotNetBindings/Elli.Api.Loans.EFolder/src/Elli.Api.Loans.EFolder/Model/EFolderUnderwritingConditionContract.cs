/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/


/* 
 * Loan
 *
 * APIs to manage eFolder related entities - document and attachment.
 *
 * OpenAPI spec version: 1.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elli.Api.Loans.EFolder.Client.SwaggerDateConverter;

namespace Elli.Api.Loans.EFolder.Model
{
    /// <summary>
    /// EFolderUnderwritingConditionContract
    /// </summary>
    [DataContract]
    public partial class EFolderUnderwritingConditionContract :  IEquatable<EFolderUnderwritingConditionContract>, IValidatableObject
    {
    
        
        /// <summary>
        /// Unique Identifier of a Underwriting Condition
        /// </summary>
        /// <value>Unique Identifier of a Underwriting Condition</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// priorTo
        /// </summary>
        /// <value>priorTo</value>
        [DataMember(Name="priorTo", EmitDefaultValue=false)]
        public string PriorTo { get; set; }

        /// <summary>
        /// category
        /// </summary>
        /// <value>category</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// owner
        /// </summary>
        /// <value>owner</value>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public string Owner { get; set; }

        /// <summary>
        /// allowToClear
        /// </summary>
        /// <value>allowToClear</value>
        [DataMember(Name="allowToClear", EmitDefaultValue=false)]
        public bool? AllowToClear { get; set; }

        /// <summary>
        /// printExternally
        /// </summary>
        /// <value>printExternally</value>
        [DataMember(Name="printExternally", EmitDefaultValue=false)]
        public bool? PrintExternally { get; set; }

        /// <summary>
        /// printInternally
        /// </summary>
        /// <value>printInternally</value>
        [DataMember(Name="printInternally", EmitDefaultValue=false)]
        public bool? PrintInternally { get; set; }

        /// <summary>
        /// expirationDate
        /// </summary>
        /// <value>expirationDate</value>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// isFulfilled
        /// </summary>
        /// <value>isFulfilled</value>
        [DataMember(Name="isFulfilled", EmitDefaultValue=false)]
        public bool? IsFulfilled { get; set; }

        /// <summary>
        /// fulfilledDate
        /// </summary>
        /// <value>fulfilledDate</value>
        [DataMember(Name="fulfilledDate", EmitDefaultValue=false)]
        public DateTime? FulfilledDate { get; set; }

        /// <summary>
        /// fulfilledBy
        /// </summary>
        /// <value>fulfilledBy</value>
        [DataMember(Name="fulfilledBy", EmitDefaultValue=false)]
        public EntityRefContract FulfilledBy { get; set; }

        /// <summary>
        /// isReviewed
        /// </summary>
        /// <value>isReviewed</value>
        [DataMember(Name="isReviewed", EmitDefaultValue=false)]
        public bool? IsReviewed { get; set; }

        /// <summary>
        /// reviewedDate
        /// </summary>
        /// <value>reviewedDate</value>
        [DataMember(Name="reviewedDate", EmitDefaultValue=false)]
        public DateTime? ReviewedDate { get; set; }

        /// <summary>
        /// reviewedBy
        /// </summary>
        /// <value>reviewedBy</value>
        [DataMember(Name="reviewedBy", EmitDefaultValue=false)]
        public EntityRefContract ReviewedBy { get; set; }

        /// <summary>
        /// isRejected
        /// </summary>
        /// <value>isRejected</value>
        [DataMember(Name="isRejected", EmitDefaultValue=false)]
        public bool? IsRejected { get; set; }

        /// <summary>
        /// rejectedDate
        /// </summary>
        /// <value>rejectedDate</value>
        [DataMember(Name="rejectedDate", EmitDefaultValue=false)]
        public DateTime? RejectedDate { get; set; }

        /// <summary>
        /// rejectedBy
        /// </summary>
        /// <value>rejectedBy</value>
        [DataMember(Name="rejectedBy", EmitDefaultValue=false)]
        public EntityRefContract RejectedBy { get; set; }

        /// <summary>
        /// isCleared
        /// </summary>
        /// <value>isCleared</value>
        [DataMember(Name="isCleared", EmitDefaultValue=false)]
        public bool? IsCleared { get; set; }

        /// <summary>
        /// clearedDate
        /// </summary>
        /// <value>clearedDate</value>
        [DataMember(Name="clearedDate", EmitDefaultValue=false)]
        public DateTime? ClearedDate { get; set; }

        /// <summary>
        /// clearedBy
        /// </summary>
        /// <value>clearedBy</value>
        [DataMember(Name="clearedBy", EmitDefaultValue=false)]
        public EntityRefContract ClearedBy { get; set; }

        /// <summary>
        /// isWaived
        /// </summary>
        /// <value>isWaived</value>
        [DataMember(Name="isWaived", EmitDefaultValue=false)]
        public bool? IsWaived { get; set; }

        /// <summary>
        /// WaivedDate
        /// </summary>
        /// <value>WaivedDate</value>
        [DataMember(Name="waivedDate", EmitDefaultValue=false)]
        public DateTime? WaivedDate { get; set; }

        /// <summary>
        /// waivedBy
        /// </summary>
        /// <value>waivedBy</value>
        [DataMember(Name="waivedBy", EmitDefaultValue=false)]
        public EntityRefContract WaivedBy { get; set; }

        /// <summary>
        /// tpoConditionDocType
        /// </summary>
        /// <value>tpoConditionDocType</value>
        [DataMember(Name="tpoConditionDocType", EmitDefaultValue=false)]
        public string TpoConditionDocType { get; set; }

        /// <summary>
        /// tpoConditionDocGuid
        /// </summary>
        /// <value>tpoConditionDocGuid</value>
        [DataMember(Name="tpoConditionDocGuid", EmitDefaultValue=false)]
        public string TpoConditionDocGuid { get; set; }

        /// <summary>
        /// templateId
        /// </summary>
        /// <value>templateId</value>
        [DataMember(Name="templateId", EmitDefaultValue=false)]
        public string TemplateId { get; set; }

        /// <summary>
        /// conditionType
        /// </summary>
        /// <value>conditionType</value>
        [DataMember(Name="conditionType", EmitDefaultValue=false)]
        public string ConditionType { get; set; }

        /// <summary>
        /// isRemoved
        /// </summary>
        /// <value>isRemoved</value>
        [DataMember(Name="isRemoved", EmitDefaultValue=false)]
        public bool? IsRemoved { get; set; }

        /// <summary>
        /// title
        /// </summary>
        /// <value>title</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// application
        /// </summary>
        /// <value>application</value>
        [DataMember(Name="application", EmitDefaultValue=false)]
        public EntityRefContract Application { get; set; }

        /// <summary>
        /// source
        /// </summary>
        /// <value>source</value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// expectedDate
        /// </summary>
        /// <value>expectedDate</value>
        [DataMember(Name="expectedDate", EmitDefaultValue=false)]
        public DateTime? ExpectedDate { get; set; }

        /// <summary>
        /// status
        /// </summary>
        /// <value>status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// statusDate
        /// </summary>
        /// <value>statusDate</value>
        [DataMember(Name="statusDate", EmitDefaultValue=false)]
        public DateTime? StatusDate { get; set; }

        /// <summary>
        /// daysToReceive
        /// </summary>
        /// <value>daysToReceive</value>
        [DataMember(Name="daysToReceive", EmitDefaultValue=false)]
        public int? DaysToReceive { get; set; }

        /// <summary>
        /// requestedFrom
        /// </summary>
        /// <value>requestedFrom</value>
        [DataMember(Name="requestedFrom", EmitDefaultValue=false)]
        public string RequestedFrom { get; set; }

        /// <summary>
        /// createdDate
        /// </summary>
        /// <value>createdDate</value>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// createdBy
        /// </summary>
        /// <value>createdBy</value>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public EntityRefContract CreatedBy { get; set; }

        /// <summary>
        /// isRequested
        /// </summary>
        /// <value>isRequested</value>
        [DataMember(Name="isRequested", EmitDefaultValue=false)]
        public bool? IsRequested { get; set; }

        /// <summary>
        /// requestedDate
        /// </summary>
        /// <value>requestedDate</value>
        [DataMember(Name="requestedDate", EmitDefaultValue=false)]
        public DateTime? RequestedDate { get; set; }

        /// <summary>
        /// requestedBy
        /// </summary>
        /// <value>requestedBy</value>
        [DataMember(Name="requestedBy", EmitDefaultValue=false)]
        public EntityRefContract RequestedBy { get; set; }

        /// <summary>
        /// isRerequested
        /// </summary>
        /// <value>isRerequested</value>
        [DataMember(Name="isRerequested", EmitDefaultValue=false)]
        public bool? IsRerequested { get; set; }

        /// <summary>
        /// rerequestedDate
        /// </summary>
        /// <value>rerequestedDate</value>
        [DataMember(Name="rerequestedDate", EmitDefaultValue=false)]
        public DateTime? RerequestedDate { get; set; }

        /// <summary>
        /// rerequestedBy
        /// </summary>
        /// <value>rerequestedBy</value>
        [DataMember(Name="rerequestedBy", EmitDefaultValue=false)]
        public EntityRefContract RerequestedBy { get; set; }

        /// <summary>
        /// isReceived
        /// </summary>
        /// <value>isReceived</value>
        [DataMember(Name="isReceived", EmitDefaultValue=false)]
        public bool? IsReceived { get; set; }

        /// <summary>
        /// receivedDate
        /// </summary>
        /// <value>receivedDate</value>
        [DataMember(Name="receivedDate", EmitDefaultValue=false)]
        public DateTime? ReceivedDate { get; set; }

        /// <summary>
        /// receivedBy
        /// </summary>
        /// <value>receivedBy</value>
        [DataMember(Name="receivedBy", EmitDefaultValue=false)]
        public EntityRefContract ReceivedBy { get; set; }

        /// <summary>
        /// isAddedToConditionSet
        /// </summary>
        /// <value>isAddedToConditionSet</value>
        [DataMember(Name="isAddedToConditionSet", EmitDefaultValue=false)]
        public bool? IsAddedToConditionSet { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public List<EFolderCommentContract> Comments { get; set; }

        /// <summary>
        /// Gets or Sets Documents
        /// </summary>
        [DataMember(Name="documents", EmitDefaultValue=false)]
        public List<EntityRefContract> Documents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EFolderUnderwritingConditionContract {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PriorTo: ").Append(PriorTo).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  AllowToClear: ").Append(AllowToClear).Append("\n");
            sb.Append("  PrintExternally: ").Append(PrintExternally).Append("\n");
            sb.Append("  PrintInternally: ").Append(PrintInternally).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  IsFulfilled: ").Append(IsFulfilled).Append("\n");
            sb.Append("  FulfilledDate: ").Append(FulfilledDate).Append("\n");
            sb.Append("  FulfilledBy: ").Append(FulfilledBy).Append("\n");
            sb.Append("  IsReviewed: ").Append(IsReviewed).Append("\n");
            sb.Append("  ReviewedDate: ").Append(ReviewedDate).Append("\n");
            sb.Append("  ReviewedBy: ").Append(ReviewedBy).Append("\n");
            sb.Append("  IsRejected: ").Append(IsRejected).Append("\n");
            sb.Append("  RejectedDate: ").Append(RejectedDate).Append("\n");
            sb.Append("  RejectedBy: ").Append(RejectedBy).Append("\n");
            sb.Append("  IsCleared: ").Append(IsCleared).Append("\n");
            sb.Append("  ClearedDate: ").Append(ClearedDate).Append("\n");
            sb.Append("  ClearedBy: ").Append(ClearedBy).Append("\n");
            sb.Append("  IsWaived: ").Append(IsWaived).Append("\n");
            sb.Append("  WaivedDate: ").Append(WaivedDate).Append("\n");
            sb.Append("  WaivedBy: ").Append(WaivedBy).Append("\n");
            sb.Append("  TpoConditionDocType: ").Append(TpoConditionDocType).Append("\n");
            sb.Append("  TpoConditionDocGuid: ").Append(TpoConditionDocGuid).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  ConditionType: ").Append(ConditionType).Append("\n");
            sb.Append("  IsRemoved: ").Append(IsRemoved).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Application: ").Append(Application).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  ExpectedDate: ").Append(ExpectedDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDate: ").Append(StatusDate).Append("\n");
            sb.Append("  DaysToReceive: ").Append(DaysToReceive).Append("\n");
            sb.Append("  RequestedFrom: ").Append(RequestedFrom).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  IsRequested: ").Append(IsRequested).Append("\n");
            sb.Append("  RequestedDate: ").Append(RequestedDate).Append("\n");
            sb.Append("  RequestedBy: ").Append(RequestedBy).Append("\n");
            sb.Append("  IsRerequested: ").Append(IsRerequested).Append("\n");
            sb.Append("  RerequestedDate: ").Append(RerequestedDate).Append("\n");
            sb.Append("  RerequestedBy: ").Append(RerequestedBy).Append("\n");
            sb.Append("  IsReceived: ").Append(IsReceived).Append("\n");
            sb.Append("  ReceivedDate: ").Append(ReceivedDate).Append("\n");
            sb.Append("  ReceivedBy: ").Append(ReceivedBy).Append("\n");
            sb.Append("  IsAddedToConditionSet: ").Append(IsAddedToConditionSet).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EFolderUnderwritingConditionContract);
        }

        /// <summary>
        /// Returns true if EFolderUnderwritingConditionContract instances are equal
        /// </summary>
        /// <param name="input">Instance of EFolderUnderwritingConditionContract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EFolderUnderwritingConditionContract input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PriorTo == input.PriorTo ||
                    (this.PriorTo != null &&
                    this.PriorTo.Equals(input.PriorTo))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.AllowToClear == input.AllowToClear ||
                    (this.AllowToClear != null &&
                    this.AllowToClear.Equals(input.AllowToClear))
                ) && 
                (
                    this.PrintExternally == input.PrintExternally ||
                    (this.PrintExternally != null &&
                    this.PrintExternally.Equals(input.PrintExternally))
                ) && 
                (
                    this.PrintInternally == input.PrintInternally ||
                    (this.PrintInternally != null &&
                    this.PrintInternally.Equals(input.PrintInternally))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.IsFulfilled == input.IsFulfilled ||
                    (this.IsFulfilled != null &&
                    this.IsFulfilled.Equals(input.IsFulfilled))
                ) && 
                (
                    this.FulfilledDate == input.FulfilledDate ||
                    (this.FulfilledDate != null &&
                    this.FulfilledDate.Equals(input.FulfilledDate))
                ) && 
                (
                    this.FulfilledBy == input.FulfilledBy ||
                    (this.FulfilledBy != null &&
                    this.FulfilledBy.Equals(input.FulfilledBy))
                ) && 
                (
                    this.IsReviewed == input.IsReviewed ||
                    (this.IsReviewed != null &&
                    this.IsReviewed.Equals(input.IsReviewed))
                ) && 
                (
                    this.ReviewedDate == input.ReviewedDate ||
                    (this.ReviewedDate != null &&
                    this.ReviewedDate.Equals(input.ReviewedDate))
                ) && 
                (
                    this.ReviewedBy == input.ReviewedBy ||
                    (this.ReviewedBy != null &&
                    this.ReviewedBy.Equals(input.ReviewedBy))
                ) && 
                (
                    this.IsRejected == input.IsRejected ||
                    (this.IsRejected != null &&
                    this.IsRejected.Equals(input.IsRejected))
                ) && 
                (
                    this.RejectedDate == input.RejectedDate ||
                    (this.RejectedDate != null &&
                    this.RejectedDate.Equals(input.RejectedDate))
                ) && 
                (
                    this.RejectedBy == input.RejectedBy ||
                    (this.RejectedBy != null &&
                    this.RejectedBy.Equals(input.RejectedBy))
                ) && 
                (
                    this.IsCleared == input.IsCleared ||
                    (this.IsCleared != null &&
                    this.IsCleared.Equals(input.IsCleared))
                ) && 
                (
                    this.ClearedDate == input.ClearedDate ||
                    (this.ClearedDate != null &&
                    this.ClearedDate.Equals(input.ClearedDate))
                ) && 
                (
                    this.ClearedBy == input.ClearedBy ||
                    (this.ClearedBy != null &&
                    this.ClearedBy.Equals(input.ClearedBy))
                ) && 
                (
                    this.IsWaived == input.IsWaived ||
                    (this.IsWaived != null &&
                    this.IsWaived.Equals(input.IsWaived))
                ) && 
                (
                    this.WaivedDate == input.WaivedDate ||
                    (this.WaivedDate != null &&
                    this.WaivedDate.Equals(input.WaivedDate))
                ) && 
                (
                    this.WaivedBy == input.WaivedBy ||
                    (this.WaivedBy != null &&
                    this.WaivedBy.Equals(input.WaivedBy))
                ) && 
                (
                    this.TpoConditionDocType == input.TpoConditionDocType ||
                    (this.TpoConditionDocType != null &&
                    this.TpoConditionDocType.Equals(input.TpoConditionDocType))
                ) && 
                (
                    this.TpoConditionDocGuid == input.TpoConditionDocGuid ||
                    (this.TpoConditionDocGuid != null &&
                    this.TpoConditionDocGuid.Equals(input.TpoConditionDocGuid))
                ) && 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                ) && 
                (
                    this.ConditionType == input.ConditionType ||
                    (this.ConditionType != null &&
                    this.ConditionType.Equals(input.ConditionType))
                ) && 
                (
                    this.IsRemoved == input.IsRemoved ||
                    (this.IsRemoved != null &&
                    this.IsRemoved.Equals(input.IsRemoved))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Application == input.Application ||
                    (this.Application != null &&
                    this.Application.Equals(input.Application))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.ExpectedDate == input.ExpectedDate ||
                    (this.ExpectedDate != null &&
                    this.ExpectedDate.Equals(input.ExpectedDate))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusDate == input.StatusDate ||
                    (this.StatusDate != null &&
                    this.StatusDate.Equals(input.StatusDate))
                ) && 
                (
                    this.DaysToReceive == input.DaysToReceive ||
                    (this.DaysToReceive != null &&
                    this.DaysToReceive.Equals(input.DaysToReceive))
                ) && 
                (
                    this.RequestedFrom == input.RequestedFrom ||
                    (this.RequestedFrom != null &&
                    this.RequestedFrom.Equals(input.RequestedFrom))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.IsRequested == input.IsRequested ||
                    (this.IsRequested != null &&
                    this.IsRequested.Equals(input.IsRequested))
                ) && 
                (
                    this.RequestedDate == input.RequestedDate ||
                    (this.RequestedDate != null &&
                    this.RequestedDate.Equals(input.RequestedDate))
                ) && 
                (
                    this.RequestedBy == input.RequestedBy ||
                    (this.RequestedBy != null &&
                    this.RequestedBy.Equals(input.RequestedBy))
                ) && 
                (
                    this.IsRerequested == input.IsRerequested ||
                    (this.IsRerequested != null &&
                    this.IsRerequested.Equals(input.IsRerequested))
                ) && 
                (
                    this.RerequestedDate == input.RerequestedDate ||
                    (this.RerequestedDate != null &&
                    this.RerequestedDate.Equals(input.RerequestedDate))
                ) && 
                (
                    this.RerequestedBy == input.RerequestedBy ||
                    (this.RerequestedBy != null &&
                    this.RerequestedBy.Equals(input.RerequestedBy))
                ) && 
                (
                    this.IsReceived == input.IsReceived ||
                    (this.IsReceived != null &&
                    this.IsReceived.Equals(input.IsReceived))
                ) && 
                (
                    this.ReceivedDate == input.ReceivedDate ||
                    (this.ReceivedDate != null &&
                    this.ReceivedDate.Equals(input.ReceivedDate))
                ) && 
                (
                    this.ReceivedBy == input.ReceivedBy ||
                    (this.ReceivedBy != null &&
                    this.ReceivedBy.Equals(input.ReceivedBy))
                ) && 
                (
                    this.IsAddedToConditionSet == input.IsAddedToConditionSet ||
                    (this.IsAddedToConditionSet != null &&
                    this.IsAddedToConditionSet.Equals(input.IsAddedToConditionSet))
                ) && 
                (
                    this.Comments == input.Comments ||
                    this.Comments != null &&
                    this.Comments.SequenceEqual(input.Comments)
                ) && 
                (
                    this.Documents == input.Documents ||
                    this.Documents != null &&
                    this.Documents.SequenceEqual(input.Documents)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PriorTo != null)
                    hashCode = hashCode * 59 + this.PriorTo.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.AllowToClear != null)
                    hashCode = hashCode * 59 + this.AllowToClear.GetHashCode();
                if (this.PrintExternally != null)
                    hashCode = hashCode * 59 + this.PrintExternally.GetHashCode();
                if (this.PrintInternally != null)
                    hashCode = hashCode * 59 + this.PrintInternally.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.IsFulfilled != null)
                    hashCode = hashCode * 59 + this.IsFulfilled.GetHashCode();
                if (this.FulfilledDate != null)
                    hashCode = hashCode * 59 + this.FulfilledDate.GetHashCode();
                if (this.FulfilledBy != null)
                    hashCode = hashCode * 59 + this.FulfilledBy.GetHashCode();
                if (this.IsReviewed != null)
                    hashCode = hashCode * 59 + this.IsReviewed.GetHashCode();
                if (this.ReviewedDate != null)
                    hashCode = hashCode * 59 + this.ReviewedDate.GetHashCode();
                if (this.ReviewedBy != null)
                    hashCode = hashCode * 59 + this.ReviewedBy.GetHashCode();
                if (this.IsRejected != null)
                    hashCode = hashCode * 59 + this.IsRejected.GetHashCode();
                if (this.RejectedDate != null)
                    hashCode = hashCode * 59 + this.RejectedDate.GetHashCode();
                if (this.RejectedBy != null)
                    hashCode = hashCode * 59 + this.RejectedBy.GetHashCode();
                if (this.IsCleared != null)
                    hashCode = hashCode * 59 + this.IsCleared.GetHashCode();
                if (this.ClearedDate != null)
                    hashCode = hashCode * 59 + this.ClearedDate.GetHashCode();
                if (this.ClearedBy != null)
                    hashCode = hashCode * 59 + this.ClearedBy.GetHashCode();
                if (this.IsWaived != null)
                    hashCode = hashCode * 59 + this.IsWaived.GetHashCode();
                if (this.WaivedDate != null)
                    hashCode = hashCode * 59 + this.WaivedDate.GetHashCode();
                if (this.WaivedBy != null)
                    hashCode = hashCode * 59 + this.WaivedBy.GetHashCode();
                if (this.TpoConditionDocType != null)
                    hashCode = hashCode * 59 + this.TpoConditionDocType.GetHashCode();
                if (this.TpoConditionDocGuid != null)
                    hashCode = hashCode * 59 + this.TpoConditionDocGuid.GetHashCode();
                if (this.TemplateId != null)
                    hashCode = hashCode * 59 + this.TemplateId.GetHashCode();
                if (this.ConditionType != null)
                    hashCode = hashCode * 59 + this.ConditionType.GetHashCode();
                if (this.IsRemoved != null)
                    hashCode = hashCode * 59 + this.IsRemoved.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Application != null)
                    hashCode = hashCode * 59 + this.Application.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.ExpectedDate != null)
                    hashCode = hashCode * 59 + this.ExpectedDate.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusDate != null)
                    hashCode = hashCode * 59 + this.StatusDate.GetHashCode();
                if (this.DaysToReceive != null)
                    hashCode = hashCode * 59 + this.DaysToReceive.GetHashCode();
                if (this.RequestedFrom != null)
                    hashCode = hashCode * 59 + this.RequestedFrom.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.IsRequested != null)
                    hashCode = hashCode * 59 + this.IsRequested.GetHashCode();
                if (this.RequestedDate != null)
                    hashCode = hashCode * 59 + this.RequestedDate.GetHashCode();
                if (this.RequestedBy != null)
                    hashCode = hashCode * 59 + this.RequestedBy.GetHashCode();
                if (this.IsRerequested != null)
                    hashCode = hashCode * 59 + this.IsRerequested.GetHashCode();
                if (this.RerequestedDate != null)
                    hashCode = hashCode * 59 + this.RerequestedDate.GetHashCode();
                if (this.RerequestedBy != null)
                    hashCode = hashCode * 59 + this.RerequestedBy.GetHashCode();
                if (this.IsReceived != null)
                    hashCode = hashCode * 59 + this.IsReceived.GetHashCode();
                if (this.ReceivedDate != null)
                    hashCode = hashCode * 59 + this.ReceivedDate.GetHashCode();
                if (this.ReceivedBy != null)
                    hashCode = hashCode * 59 + this.ReceivedBy.GetHashCode();
                if (this.IsAddedToConditionSet != null)
                    hashCode = hashCode * 59 + this.IsAddedToConditionSet.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.Documents != null)
                    hashCode = hashCode * 59 + this.Documents.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
