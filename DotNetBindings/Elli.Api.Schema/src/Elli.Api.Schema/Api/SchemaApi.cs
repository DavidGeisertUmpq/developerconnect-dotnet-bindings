/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/

/* 
 * Schema
 *
 * Represents schema operations on Loan.
 *
 * OpenAPI spec version: 1.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Elli.Api.Schema.Client;
using Elli.Api.Schema.Model;

namespace Elli.Api.Schema.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchemaApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Loan Schema.
        /// </summary>
        /// <remarks>
        /// Get full loan schema.
        /// </remarks>
        /// <exception cref="Elli.Api.Schema.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entities">Loan entities separated by &#39;,&#39; for which schema definition is requested. (optional)</param>
        /// <param name="includeFieldExtensions">Include Field Extensions. (optional)</param>
        /// <returns>string</returns>
        string GetLoanSchema (string entities = null, bool? includeFieldExtensions = null);

        /// <summary>
        /// Get Loan Schema.
        /// </summary>
        /// <remarks>
        /// Get full loan schema.
        /// </remarks>
        /// <exception cref="Elli.Api.Schema.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entities">Loan entities separated by &#39;,&#39; for which schema definition is requested. (optional)</param>
        /// <param name="includeFieldExtensions">Include Field Extensions. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetLoanSchemaWithHttpInfo (string entities = null, bool? includeFieldExtensions = null);
        /// <summary>
        /// Get Loan Schema By FieldId.
        /// </summary>
        /// <remarks>
        /// Get loan schema for a specific field by its field id.
        /// </remarks>
        /// <exception cref="Elli.Api.Schema.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Loan field id for which schema is requested.</param>
        /// <returns>string</returns>
        string GetLoanSchemaByFieldId (string fieldId);

        /// <summary>
        /// Get Loan Schema By FieldId.
        /// </summary>
        /// <remarks>
        /// Get loan schema for a specific field by its field id.
        /// </remarks>
        /// <exception cref="Elli.Api.Schema.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Loan field id for which schema is requested.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetLoanSchemaByFieldIdWithHttpInfo (string fieldId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Loan Schema.
        /// </summary>
        /// <remarks>
        /// Get full loan schema.
        /// </remarks>
        /// <exception cref="Elli.Api.Schema.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entities">Loan entities separated by &#39;,&#39; for which schema definition is requested. (optional)</param>
        /// <param name="includeFieldExtensions">Include Field Extensions. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetLoanSchemaAsync (string entities = null, bool? includeFieldExtensions = null);

        /// <summary>
        /// Get Loan Schema.
        /// </summary>
        /// <remarks>
        /// Get full loan schema.
        /// </remarks>
        /// <exception cref="Elli.Api.Schema.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entities">Loan entities separated by &#39;,&#39; for which schema definition is requested. (optional)</param>
        /// <param name="includeFieldExtensions">Include Field Extensions. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetLoanSchemaAsyncWithHttpInfo (string entities = null, bool? includeFieldExtensions = null);
        /// <summary>
        /// Get Loan Schema By FieldId.
        /// </summary>
        /// <remarks>
        /// Get loan schema for a specific field by its field id.
        /// </remarks>
        /// <exception cref="Elli.Api.Schema.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Loan field id for which schema is requested.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetLoanSchemaByFieldIdAsync (string fieldId);

        /// <summary>
        /// Get Loan Schema By FieldId.
        /// </summary>
        /// <remarks>
        /// Get loan schema for a specific field by its field id.
        /// </remarks>
        /// <exception cref="Elli.Api.Schema.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Loan field id for which schema is requested.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetLoanSchemaByFieldIdAsyncWithHttpInfo (string fieldId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SchemaApi : ISchemaApi
    {
        private Elli.Api.Schema.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchemaApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Elli.Api.Schema.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SchemaApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Elli.Api.Schema.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Elli.Api.Schema.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Loan Schema. Get full loan schema.
        /// </summary>
        /// <exception cref="Elli.Api.Schema.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entities">Loan entities separated by &#39;,&#39; for which schema definition is requested. (optional)</param>
        /// <param name="includeFieldExtensions">Include Field Extensions. (optional)</param>
        /// <returns>string</returns>
        public string GetLoanSchema (string entities = null, bool? includeFieldExtensions = null)
        {
             ApiResponse<string> localVarResponse = GetLoanSchemaWithHttpInfo(entities, includeFieldExtensions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Loan Schema. Get full loan schema.
        /// </summary>
        /// <exception cref="Elli.Api.Schema.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entities">Loan entities separated by &#39;,&#39; for which schema definition is requested. (optional)</param>
        /// <param name="includeFieldExtensions">Include Field Extensions. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetLoanSchemaWithHttpInfo (string entities = null, bool? includeFieldExtensions = null)
        {

            var localVarPath = "/encompass/v1/schema/loan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entities != null) localVarQueryParams.Add("entities", Configuration.ApiClient.ParameterToString(entities)); // query parameter
            if (includeFieldExtensions != null) localVarQueryParams.Add("includeFieldExtensions", Configuration.ApiClient.ParameterToString(includeFieldExtensions)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoanSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get Loan Schema. Get full loan schema.
        /// </summary>
        /// <exception cref="Elli.Api.Schema.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entities">Loan entities separated by &#39;,&#39; for which schema definition is requested. (optional)</param>
        /// <param name="includeFieldExtensions">Include Field Extensions. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetLoanSchemaAsync (string entities = null, bool? includeFieldExtensions = null)
        {
             ApiResponse<string> localVarResponse = await GetLoanSchemaAsyncWithHttpInfo(entities, includeFieldExtensions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Loan Schema. Get full loan schema.
        /// </summary>
        /// <exception cref="Elli.Api.Schema.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entities">Loan entities separated by &#39;,&#39; for which schema definition is requested. (optional)</param>
        /// <param name="includeFieldExtensions">Include Field Extensions. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetLoanSchemaAsyncWithHttpInfo (string entities = null, bool? includeFieldExtensions = null)
        {

            var localVarPath = "/encompass/v1/schema/loan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entities != null) localVarQueryParams.Add("entities", Configuration.ApiClient.ParameterToString(entities)); // query parameter
            if (includeFieldExtensions != null) localVarQueryParams.Add("includeFieldExtensions", Configuration.ApiClient.ParameterToString(includeFieldExtensions)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoanSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get Loan Schema By FieldId. Get loan schema for a specific field by its field id.
        /// </summary>
        /// <exception cref="Elli.Api.Schema.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Loan field id for which schema is requested.</param>
        /// <returns>string</returns>
        public string GetLoanSchemaByFieldId (string fieldId)
        {
             ApiResponse<string> localVarResponse = GetLoanSchemaByFieldIdWithHttpInfo(fieldId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Loan Schema By FieldId. Get loan schema for a specific field by its field id.
        /// </summary>
        /// <exception cref="Elli.Api.Schema.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Loan field id for which schema is requested.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetLoanSchemaByFieldIdWithHttpInfo (string fieldId)
        {
            // verify the required parameter 'fieldId' is set
            if (fieldId == null)
                throw new ApiException(400, "Missing required parameter 'fieldId' when calling SchemaApi->GetLoanSchemaByFieldId");

            var localVarPath = "/encompass/v1/schema/loan/{fieldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldId != null) localVarPathParams.Add("fieldId", Configuration.ApiClient.ParameterToString(fieldId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoanSchemaByFieldId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get Loan Schema By FieldId. Get loan schema for a specific field by its field id.
        /// </summary>
        /// <exception cref="Elli.Api.Schema.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Loan field id for which schema is requested.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetLoanSchemaByFieldIdAsync (string fieldId)
        {
             ApiResponse<string> localVarResponse = await GetLoanSchemaByFieldIdAsyncWithHttpInfo(fieldId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Loan Schema By FieldId. Get loan schema for a specific field by its field id.
        /// </summary>
        /// <exception cref="Elli.Api.Schema.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldId">Loan field id for which schema is requested.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetLoanSchemaByFieldIdAsyncWithHttpInfo (string fieldId)
        {
            // verify the required parameter 'fieldId' is set
            if (fieldId == null)
                throw new ApiException(400, "Missing required parameter 'fieldId' when calling SchemaApi->GetLoanSchemaByFieldId");

            var localVarPath = "/encompass/v1/schema/loan/{fieldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldId != null) localVarPathParams.Add("fieldId", Configuration.ApiClient.ParameterToString(fieldId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoanSchemaByFieldId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
