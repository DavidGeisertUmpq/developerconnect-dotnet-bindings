/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/

/* 
 * Contacts
 *
 * Represents borrower and business contacts
 *
 * OpenAPI spec version: 1.3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Elli.Api.Contacts.Client;
using Elli.Api.Contacts.Model;

namespace Elli.Api.Contacts.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactGroupApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create New Contact Group
        /// </summary>
        /// <remarks>
        /// Creates a new Contact Group to be associated with contacts
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactGroupContract"> (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties of the resource. id - Returns the ID assigned to the resource. (optional)</param>
        /// <returns>Object</returns>
        Object CreateContactGroup (ContactGroupContract contactGroupContract = null, string view = null);

        /// <summary>
        /// Create New Contact Group
        /// </summary>
        /// <remarks>
        /// Creates a new Contact Group to be associated with contacts
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactGroupContract"> (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties of the resource. id - Returns the ID assigned to the resource. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateContactGroupWithHttpInfo (ContactGroupContract contactGroupContract = null, string view = null);
        /// <summary>
        /// Delete contact Group
        /// </summary>
        /// <remarks>
        /// Removes contact Group of specified groupId
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a group</param>
        /// <returns></returns>
        void DeleteContactGroup (string groupId);

        /// <summary>
        /// Delete contact Group
        /// </summary>
        /// <remarks>
        /// Removes contact Group of specified groupId
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactGroupWithHttpInfo (string groupId);
        /// <summary>
        /// Get contact Group by Id
        /// </summary>
        /// <remarks>
        /// Returns Contact Group details for a given groupId
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a group</param>
        /// <returns>ContactGroupContract</returns>
        ContactGroupContract GetContactGroup (string groupId);

        /// <summary>
        /// Get contact Group by Id
        /// </summary>
        /// <remarks>
        /// Returns Contact Group details for a given groupId
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a group</param>
        /// <returns>ApiResponse of ContactGroupContract</returns>
        ApiResponse<ContactGroupContract> GetContactGroupWithHttpInfo (string groupId);
        /// <summary>
        /// Get All contact Groups
        /// </summary>
        /// <remarks>
        /// Returns All contact Groups for a given contact type({Borrower | Business })
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactType">Type of a contact e.g Borrower|Business</param>
        /// <param name="groupType">Type of a group e.g Private|Public (optional)</param>
        /// <returns>List&lt;ContactGroupContract&gt;</returns>
        List<ContactGroupContract> GetContactGroups (string contactType, string groupType = null);

        /// <summary>
        /// Get All contact Groups
        /// </summary>
        /// <remarks>
        /// Returns All contact Groups for a given contact type({Borrower | Business })
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactType">Type of a contact e.g Borrower|Business</param>
        /// <param name="groupType">Type of a group e.g Private|Public (optional)</param>
        /// <returns>ApiResponse of List&lt;ContactGroupContract&gt;</returns>
        ApiResponse<List<ContactGroupContract>> GetContactGroupsWithHttpInfo (string contactType, string groupType = null);
        /// <summary>
        /// Get All contacts associated with a group
        /// </summary>
        /// <remarks>
        /// Returns All contacts associated with a group specified by group id
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a Group</param>
        /// <param name="start">Start index or record number to retrieve a set of contacts. This is defaulted to 1. (optional)</param>
        /// <param name="limit">This is the maximum number of records user wants to fetch. Response size is limited to 6 MB hence this is recalculated if response size exceeds 6 MB. Default value is 1000 and max value for this parameter is limited to 10000 in any case. (optional)</param>
        /// <returns>List&lt;EntityRefContract&gt;</returns>
        List<EntityRefContract> GetContactsOfGroup (string groupId, string start = null, string limit = null);

        /// <summary>
        /// Get All contacts associated with a group
        /// </summary>
        /// <remarks>
        /// Returns All contacts associated with a group specified by group id
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a Group</param>
        /// <param name="start">Start index or record number to retrieve a set of contacts. This is defaulted to 1. (optional)</param>
        /// <param name="limit">This is the maximum number of records user wants to fetch. Response size is limited to 6 MB hence this is recalculated if response size exceeds 6 MB. Default value is 1000 and max value for this parameter is limited to 10000 in any case. (optional)</param>
        /// <returns>ApiResponse of List&lt;EntityRefContract&gt;</returns>
        ApiResponse<List<EntityRefContract>> GetContactsOfGroupWithHttpInfo (string groupId, string start = null, string limit = null);
        /// <summary>
        /// Update Contact Group
        /// </summary>
        /// <remarks>
        /// Updates Contact Group details
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a Group</param>
        /// <param name="contactGroupContract"> (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties of the resource. id - Returns the ID assigned to the resource. (optional)</param>
        /// <returns>Object</returns>
        Object UpdateContactGroup (string groupId, ContactGroupContract contactGroupContract = null, string view = null);

        /// <summary>
        /// Update Contact Group
        /// </summary>
        /// <remarks>
        /// Updates Contact Group details
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a Group</param>
        /// <param name="contactGroupContract"> (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties of the resource. id - Returns the ID assigned to the resource. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateContactGroupWithHttpInfo (string groupId, ContactGroupContract contactGroupContract = null, string view = null);
        /// <summary>
        /// Update Contacts within a Group
        /// </summary>
        /// <remarks>
        /// Add/Remove Contacts within a Group specified by groupId
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a Group</param>
        /// <param name="action">Specifies action to be performed on contacts (add/remove)</param>
        /// <param name="entityRefContract"> (optional)</param>
        /// <returns></returns>
        void UpdateContactsOfGroup (string groupId, string action, List<EntityRefContract> entityRefContract = null);

        /// <summary>
        /// Update Contacts within a Group
        /// </summary>
        /// <remarks>
        /// Add/Remove Contacts within a Group specified by groupId
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a Group</param>
        /// <param name="action">Specifies action to be performed on contacts (add/remove)</param>
        /// <param name="entityRefContract"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateContactsOfGroupWithHttpInfo (string groupId, string action, List<EntityRefContract> entityRefContract = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create New Contact Group
        /// </summary>
        /// <remarks>
        /// Creates a new Contact Group to be associated with contacts
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactGroupContract"> (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties of the resource. id - Returns the ID assigned to the resource. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateContactGroupAsync (ContactGroupContract contactGroupContract = null, string view = null);

        /// <summary>
        /// Create New Contact Group
        /// </summary>
        /// <remarks>
        /// Creates a new Contact Group to be associated with contacts
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactGroupContract"> (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties of the resource. id - Returns the ID assigned to the resource. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateContactGroupAsyncWithHttpInfo (ContactGroupContract contactGroupContract = null, string view = null);
        /// <summary>
        /// Delete contact Group
        /// </summary>
        /// <remarks>
        /// Removes contact Group of specified groupId
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a group</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactGroupAsync (string groupId);

        /// <summary>
        /// Delete contact Group
        /// </summary>
        /// <remarks>
        /// Removes contact Group of specified groupId
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a group</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactGroupAsyncWithHttpInfo (string groupId);
        /// <summary>
        /// Get contact Group by Id
        /// </summary>
        /// <remarks>
        /// Returns Contact Group details for a given groupId
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a group</param>
        /// <returns>Task of ContactGroupContract</returns>
        System.Threading.Tasks.Task<ContactGroupContract> GetContactGroupAsync (string groupId);

        /// <summary>
        /// Get contact Group by Id
        /// </summary>
        /// <remarks>
        /// Returns Contact Group details for a given groupId
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a group</param>
        /// <returns>Task of ApiResponse (ContactGroupContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactGroupContract>> GetContactGroupAsyncWithHttpInfo (string groupId);
        /// <summary>
        /// Get All contact Groups
        /// </summary>
        /// <remarks>
        /// Returns All contact Groups for a given contact type({Borrower | Business })
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactType">Type of a contact e.g Borrower|Business</param>
        /// <param name="groupType">Type of a group e.g Private|Public (optional)</param>
        /// <returns>Task of List&lt;ContactGroupContract&gt;</returns>
        System.Threading.Tasks.Task<List<ContactGroupContract>> GetContactGroupsAsync (string contactType, string groupType = null);

        /// <summary>
        /// Get All contact Groups
        /// </summary>
        /// <remarks>
        /// Returns All contact Groups for a given contact type({Borrower | Business })
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactType">Type of a contact e.g Borrower|Business</param>
        /// <param name="groupType">Type of a group e.g Private|Public (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ContactGroupContract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContactGroupContract>>> GetContactGroupsAsyncWithHttpInfo (string contactType, string groupType = null);
        /// <summary>
        /// Get All contacts associated with a group
        /// </summary>
        /// <remarks>
        /// Returns All contacts associated with a group specified by group id
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a Group</param>
        /// <param name="start">Start index or record number to retrieve a set of contacts. This is defaulted to 1. (optional)</param>
        /// <param name="limit">This is the maximum number of records user wants to fetch. Response size is limited to 6 MB hence this is recalculated if response size exceeds 6 MB. Default value is 1000 and max value for this parameter is limited to 10000 in any case. (optional)</param>
        /// <returns>Task of List&lt;EntityRefContract&gt;</returns>
        System.Threading.Tasks.Task<List<EntityRefContract>> GetContactsOfGroupAsync (string groupId, string start = null, string limit = null);

        /// <summary>
        /// Get All contacts associated with a group
        /// </summary>
        /// <remarks>
        /// Returns All contacts associated with a group specified by group id
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a Group</param>
        /// <param name="start">Start index or record number to retrieve a set of contacts. This is defaulted to 1. (optional)</param>
        /// <param name="limit">This is the maximum number of records user wants to fetch. Response size is limited to 6 MB hence this is recalculated if response size exceeds 6 MB. Default value is 1000 and max value for this parameter is limited to 10000 in any case. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EntityRefContract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EntityRefContract>>> GetContactsOfGroupAsyncWithHttpInfo (string groupId, string start = null, string limit = null);
        /// <summary>
        /// Update Contact Group
        /// </summary>
        /// <remarks>
        /// Updates Contact Group details
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a Group</param>
        /// <param name="contactGroupContract"> (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties of the resource. id - Returns the ID assigned to the resource. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateContactGroupAsync (string groupId, ContactGroupContract contactGroupContract = null, string view = null);

        /// <summary>
        /// Update Contact Group
        /// </summary>
        /// <remarks>
        /// Updates Contact Group details
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a Group</param>
        /// <param name="contactGroupContract"> (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties of the resource. id - Returns the ID assigned to the resource. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateContactGroupAsyncWithHttpInfo (string groupId, ContactGroupContract contactGroupContract = null, string view = null);
        /// <summary>
        /// Update Contacts within a Group
        /// </summary>
        /// <remarks>
        /// Add/Remove Contacts within a Group specified by groupId
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a Group</param>
        /// <param name="action">Specifies action to be performed on contacts (add/remove)</param>
        /// <param name="entityRefContract"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateContactsOfGroupAsync (string groupId, string action, List<EntityRefContract> entityRefContract = null);

        /// <summary>
        /// Update Contacts within a Group
        /// </summary>
        /// <remarks>
        /// Add/Remove Contacts within a Group specified by groupId
        /// </remarks>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a Group</param>
        /// <param name="action">Specifies action to be performed on contacts (add/remove)</param>
        /// <param name="entityRefContract"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateContactsOfGroupAsyncWithHttpInfo (string groupId, string action, List<EntityRefContract> entityRefContract = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContactGroupApi : IContactGroupApi
    {
        private Elli.Api.Contacts.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactGroupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactGroupApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Elli.Api.Contacts.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactGroupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContactGroupApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Elli.Api.Contacts.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Elli.Api.Contacts.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create New Contact Group Creates a new Contact Group to be associated with contacts
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactGroupContract"> (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties of the resource. id - Returns the ID assigned to the resource. (optional)</param>
        /// <returns>Object</returns>
        public Object CreateContactGroup (ContactGroupContract contactGroupContract = null, string view = null)
        {
             ApiResponse<Object> localVarResponse = CreateContactGroupWithHttpInfo(contactGroupContract, view);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create New Contact Group Creates a new Contact Group to be associated with contacts
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactGroupContract"> (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties of the resource. id - Returns the ID assigned to the resource. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateContactGroupWithHttpInfo (ContactGroupContract contactGroupContract = null, string view = null)
        {

            var localVarPath = "/encompass/v1/contactGroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (view != null) localVarQueryParams.Add("view", Configuration.ApiClient.ParameterToString(view)); // query parameter
            if (contactGroupContract != null && contactGroupContract.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contactGroupContract); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactGroupContract; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContactGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create New Contact Group Creates a new Contact Group to be associated with contacts
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactGroupContract"> (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties of the resource. id - Returns the ID assigned to the resource. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateContactGroupAsync (ContactGroupContract contactGroupContract = null, string view = null)
        {
             ApiResponse<Object> localVarResponse = await CreateContactGroupAsyncWithHttpInfo(contactGroupContract, view);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create New Contact Group Creates a new Contact Group to be associated with contacts
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactGroupContract"> (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties of the resource. id - Returns the ID assigned to the resource. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateContactGroupAsyncWithHttpInfo (ContactGroupContract contactGroupContract = null, string view = null)
        {

            var localVarPath = "/encompass/v1/contactGroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (view != null) localVarQueryParams.Add("view", Configuration.ApiClient.ParameterToString(view)); // query parameter
            if (contactGroupContract != null && contactGroupContract.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contactGroupContract); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactGroupContract; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContactGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete contact Group Removes contact Group of specified groupId
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a group</param>
        /// <returns></returns>
        public void DeleteContactGroup (string groupId)
        {
             DeleteContactGroupWithHttpInfo(groupId);
        }

        /// <summary>
        /// Delete contact Group Removes contact Group of specified groupId
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactGroupWithHttpInfo (string groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ContactGroupApi->DeleteContactGroup");

            var localVarPath = "/encompass/v1/contactGroups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete contact Group Removes contact Group of specified groupId
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a group</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactGroupAsync (string groupId)
        {
             await DeleteContactGroupAsyncWithHttpInfo(groupId);

        }

        /// <summary>
        /// Delete contact Group Removes contact Group of specified groupId
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a group</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactGroupAsyncWithHttpInfo (string groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ContactGroupApi->DeleteContactGroup");

            var localVarPath = "/encompass/v1/contactGroups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get contact Group by Id Returns Contact Group details for a given groupId
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a group</param>
        /// <returns>ContactGroupContract</returns>
        public ContactGroupContract GetContactGroup (string groupId)
        {
             ApiResponse<ContactGroupContract> localVarResponse = GetContactGroupWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get contact Group by Id Returns Contact Group details for a given groupId
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a group</param>
        /// <returns>ApiResponse of ContactGroupContract</returns>
        public ApiResponse< ContactGroupContract > GetContactGroupWithHttpInfo (string groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ContactGroupApi->GetContactGroup");

            var localVarPath = "/encompass/v1/contactGroups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactGroupContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactGroupContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactGroupContract)));
        }

        /// <summary>
        /// Get contact Group by Id Returns Contact Group details for a given groupId
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a group</param>
        /// <returns>Task of ContactGroupContract</returns>
        public async System.Threading.Tasks.Task<ContactGroupContract> GetContactGroupAsync (string groupId)
        {
             ApiResponse<ContactGroupContract> localVarResponse = await GetContactGroupAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get contact Group by Id Returns Contact Group details for a given groupId
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a group</param>
        /// <returns>Task of ApiResponse (ContactGroupContract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactGroupContract>> GetContactGroupAsyncWithHttpInfo (string groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ContactGroupApi->GetContactGroup");

            var localVarPath = "/encompass/v1/contactGroups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactGroupContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactGroupContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactGroupContract)));
        }

        /// <summary>
        /// Get All contact Groups Returns All contact Groups for a given contact type({Borrower | Business })
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactType">Type of a contact e.g Borrower|Business</param>
        /// <param name="groupType">Type of a group e.g Private|Public (optional)</param>
        /// <returns>List&lt;ContactGroupContract&gt;</returns>
        public List<ContactGroupContract> GetContactGroups (string contactType, string groupType = null)
        {
             ApiResponse<List<ContactGroupContract>> localVarResponse = GetContactGroupsWithHttpInfo(contactType, groupType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All contact Groups Returns All contact Groups for a given contact type({Borrower | Business })
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactType">Type of a contact e.g Borrower|Business</param>
        /// <param name="groupType">Type of a group e.g Private|Public (optional)</param>
        /// <returns>ApiResponse of List&lt;ContactGroupContract&gt;</returns>
        public ApiResponse< List<ContactGroupContract> > GetContactGroupsWithHttpInfo (string contactType, string groupType = null)
        {
            // verify the required parameter 'contactType' is set
            if (contactType == null)
                throw new ApiException(400, "Missing required parameter 'contactType' when calling ContactGroupApi->GetContactGroups");

            var localVarPath = "/encompass/v1/contactGroups/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactType != null) localVarQueryParams.Add("contactType", Configuration.ApiClient.ParameterToString(contactType)); // query parameter
            if (groupType != null) localVarQueryParams.Add("groupType", Configuration.ApiClient.ParameterToString(groupType)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContactGroupContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ContactGroupContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContactGroupContract>)));
        }

        /// <summary>
        /// Get All contact Groups Returns All contact Groups for a given contact type({Borrower | Business })
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactType">Type of a contact e.g Borrower|Business</param>
        /// <param name="groupType">Type of a group e.g Private|Public (optional)</param>
        /// <returns>Task of List&lt;ContactGroupContract&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContactGroupContract>> GetContactGroupsAsync (string contactType, string groupType = null)
        {
             ApiResponse<List<ContactGroupContract>> localVarResponse = await GetContactGroupsAsyncWithHttpInfo(contactType, groupType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All contact Groups Returns All contact Groups for a given contact type({Borrower | Business })
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactType">Type of a contact e.g Borrower|Business</param>
        /// <param name="groupType">Type of a group e.g Private|Public (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ContactGroupContract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ContactGroupContract>>> GetContactGroupsAsyncWithHttpInfo (string contactType, string groupType = null)
        {
            // verify the required parameter 'contactType' is set
            if (contactType == null)
                throw new ApiException(400, "Missing required parameter 'contactType' when calling ContactGroupApi->GetContactGroups");

            var localVarPath = "/encompass/v1/contactGroups/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactType != null) localVarQueryParams.Add("contactType", Configuration.ApiClient.ParameterToString(contactType)); // query parameter
            if (groupType != null) localVarQueryParams.Add("groupType", Configuration.ApiClient.ParameterToString(groupType)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContactGroupContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ContactGroupContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContactGroupContract>)));
        }

        /// <summary>
        /// Get All contacts associated with a group Returns All contacts associated with a group specified by group id
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a Group</param>
        /// <param name="start">Start index or record number to retrieve a set of contacts. This is defaulted to 1. (optional)</param>
        /// <param name="limit">This is the maximum number of records user wants to fetch. Response size is limited to 6 MB hence this is recalculated if response size exceeds 6 MB. Default value is 1000 and max value for this parameter is limited to 10000 in any case. (optional)</param>
        /// <returns>List&lt;EntityRefContract&gt;</returns>
        public List<EntityRefContract> GetContactsOfGroup (string groupId, string start = null, string limit = null)
        {
             ApiResponse<List<EntityRefContract>> localVarResponse = GetContactsOfGroupWithHttpInfo(groupId, start, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All contacts associated with a group Returns All contacts associated with a group specified by group id
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a Group</param>
        /// <param name="start">Start index or record number to retrieve a set of contacts. This is defaulted to 1. (optional)</param>
        /// <param name="limit">This is the maximum number of records user wants to fetch. Response size is limited to 6 MB hence this is recalculated if response size exceeds 6 MB. Default value is 1000 and max value for this parameter is limited to 10000 in any case. (optional)</param>
        /// <returns>ApiResponse of List&lt;EntityRefContract&gt;</returns>
        public ApiResponse< List<EntityRefContract> > GetContactsOfGroupWithHttpInfo (string groupId, string start = null, string limit = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ContactGroupApi->GetContactsOfGroup");

            var localVarPath = "/encompass/v1/contactGroups/{groupId}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactsOfGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EntityRefContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EntityRefContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EntityRefContract>)));
        }

        /// <summary>
        /// Get All contacts associated with a group Returns All contacts associated with a group specified by group id
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a Group</param>
        /// <param name="start">Start index or record number to retrieve a set of contacts. This is defaulted to 1. (optional)</param>
        /// <param name="limit">This is the maximum number of records user wants to fetch. Response size is limited to 6 MB hence this is recalculated if response size exceeds 6 MB. Default value is 1000 and max value for this parameter is limited to 10000 in any case. (optional)</param>
        /// <returns>Task of List&lt;EntityRefContract&gt;</returns>
        public async System.Threading.Tasks.Task<List<EntityRefContract>> GetContactsOfGroupAsync (string groupId, string start = null, string limit = null)
        {
             ApiResponse<List<EntityRefContract>> localVarResponse = await GetContactsOfGroupAsyncWithHttpInfo(groupId, start, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All contacts associated with a group Returns All contacts associated with a group specified by group id
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a Group</param>
        /// <param name="start">Start index or record number to retrieve a set of contacts. This is defaulted to 1. (optional)</param>
        /// <param name="limit">This is the maximum number of records user wants to fetch. Response size is limited to 6 MB hence this is recalculated if response size exceeds 6 MB. Default value is 1000 and max value for this parameter is limited to 10000 in any case. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EntityRefContract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EntityRefContract>>> GetContactsOfGroupAsyncWithHttpInfo (string groupId, string start = null, string limit = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ContactGroupApi->GetContactsOfGroup");

            var localVarPath = "/encompass/v1/contactGroups/{groupId}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactsOfGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EntityRefContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EntityRefContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EntityRefContract>)));
        }

        /// <summary>
        /// Update Contact Group Updates Contact Group details
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a Group</param>
        /// <param name="contactGroupContract"> (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties of the resource. id - Returns the ID assigned to the resource. (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateContactGroup (string groupId, ContactGroupContract contactGroupContract = null, string view = null)
        {
             ApiResponse<Object> localVarResponse = UpdateContactGroupWithHttpInfo(groupId, contactGroupContract, view);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Contact Group Updates Contact Group details
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a Group</param>
        /// <param name="contactGroupContract"> (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties of the resource. id - Returns the ID assigned to the resource. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateContactGroupWithHttpInfo (string groupId, ContactGroupContract contactGroupContract = null, string view = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ContactGroupApi->UpdateContactGroup");

            var localVarPath = "/encompass/v1/contactGroups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (view != null) localVarQueryParams.Add("view", Configuration.ApiClient.ParameterToString(view)); // query parameter
            if (contactGroupContract != null && contactGroupContract.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contactGroupContract); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactGroupContract; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContactGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update Contact Group Updates Contact Group details
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a Group</param>
        /// <param name="contactGroupContract"> (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties of the resource. id - Returns the ID assigned to the resource. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateContactGroupAsync (string groupId, ContactGroupContract contactGroupContract = null, string view = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateContactGroupAsyncWithHttpInfo(groupId, contactGroupContract, view);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Contact Group Updates Contact Group details
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a Group</param>
        /// <param name="contactGroupContract"> (optional)</param>
        /// <param name="view">Possible values are: entity - Returns all properties of the resource. id - Returns the ID assigned to the resource. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateContactGroupAsyncWithHttpInfo (string groupId, ContactGroupContract contactGroupContract = null, string view = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ContactGroupApi->UpdateContactGroup");

            var localVarPath = "/encompass/v1/contactGroups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (view != null) localVarQueryParams.Add("view", Configuration.ApiClient.ParameterToString(view)); // query parameter
            if (contactGroupContract != null && contactGroupContract.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contactGroupContract); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactGroupContract; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContactGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update Contacts within a Group Add/Remove Contacts within a Group specified by groupId
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a Group</param>
        /// <param name="action">Specifies action to be performed on contacts (add/remove)</param>
        /// <param name="entityRefContract"> (optional)</param>
        /// <returns></returns>
        public void UpdateContactsOfGroup (string groupId, string action, List<EntityRefContract> entityRefContract = null)
        {
             UpdateContactsOfGroupWithHttpInfo(groupId, action, entityRefContract);
        }

        /// <summary>
        /// Update Contacts within a Group Add/Remove Contacts within a Group specified by groupId
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a Group</param>
        /// <param name="action">Specifies action to be performed on contacts (add/remove)</param>
        /// <param name="entityRefContract"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateContactsOfGroupWithHttpInfo (string groupId, string action, List<EntityRefContract> entityRefContract = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ContactGroupApi->UpdateContactsOfGroup");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling ContactGroupApi->UpdateContactsOfGroup");

            var localVarPath = "/encompass/v1/contactGroups/{groupId}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (action != null) localVarQueryParams.Add("action", Configuration.ApiClient.ParameterToString(action)); // query parameter
            if (entityRefContract != null && entityRefContract.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entityRefContract); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entityRefContract; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContactsOfGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Contacts within a Group Add/Remove Contacts within a Group specified by groupId
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a Group</param>
        /// <param name="action">Specifies action to be performed on contacts (add/remove)</param>
        /// <param name="entityRefContract"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateContactsOfGroupAsync (string groupId, string action, List<EntityRefContract> entityRefContract = null)
        {
             await UpdateContactsOfGroupAsyncWithHttpInfo(groupId, action, entityRefContract);

        }

        /// <summary>
        /// Update Contacts within a Group Add/Remove Contacts within a Group specified by groupId
        /// </summary>
        /// <exception cref="Elli.Api.Contacts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Unique Identifier of a Group</param>
        /// <param name="action">Specifies action to be performed on contacts (add/remove)</param>
        /// <param name="entityRefContract"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateContactsOfGroupAsyncWithHttpInfo (string groupId, string action, List<EntityRefContract> entityRefContract = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ContactGroupApi->UpdateContactsOfGroup");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling ContactGroupApi->UpdateContactsOfGroup");

            var localVarPath = "/encompass/v1/contactGroups/{groupId}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (action != null) localVarQueryParams.Add("action", Configuration.ApiClient.ParameterToString(action)); // query parameter
            if (entityRefContract != null && entityRefContract.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entityRefContract); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entityRefContract; // byte array
            }

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContactsOfGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
