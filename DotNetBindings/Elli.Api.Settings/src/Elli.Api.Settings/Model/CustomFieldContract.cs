/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/


/* 
 * Settings
 *
 * Represents settings operations on Company, Loan, Contact etc.
 *
 * OpenAPI spec version: 1.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elli.Api.Settings.Client.SwaggerDateConverter;

namespace Elli.Api.Settings.Model
{
    /// <summary>
    /// CustomFieldContract
    /// </summary>
    [DataContract]
    public partial class CustomFieldContract :  IEquatable<CustomFieldContract>, IValidatableObject
    {
    
        
        /// <summary>
        /// Loan custom field name.
        /// </summary>
        /// <value>Loan custom field name.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Description for loan custom field.
        /// </summary>
        /// <value>Description for loan custom field.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Field format, for example - STRING, INTEGER, DROPDOWNLIST, AUDIT etc. This is NONE by default.
        /// </summary>
        /// <value>Field format, for example - STRING, INTEGER, DROPDOWNLIST, AUDIT etc. This is NONE by default.</value>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public string Format { get; set; }

        /// <summary>
        /// Length allowed for field value when field format is STRING.
        /// </summary>
        /// <value>Length allowed for field value when field format is STRING.</value>
        [DataMember(Name="maxLength", EmitDefaultValue=false)]
        public int? MaxLength { get; set; }

        /// <summary>
        /// This is the code for calculation from which the value of this field is derived.
        /// </summary>
        /// <value>This is the code for calculation from which the value of this field is derived.</value>
        [DataMember(Name="calculation", EmitDefaultValue=false)]
        public string Calculation { get; set; }

        /// <summary>
        /// Gets or Sets Audit
        /// </summary>
        [DataMember(Name="audit", EmitDefaultValue=false)]
        public CustomFieldContractAudit Audit { get; set; }

        /// <summary>
        /// This is the list of dropdown values when field format is DROPDOWNLIST or DROPDOWN.
        /// </summary>
        /// <value>This is the list of dropdown values when field format is DROPDOWNLIST or DROPDOWN.</value>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public List<string> Options { get; set; }

        /// <summary>
        /// Model path for loan custom field.
        /// </summary>
        /// <value>Model path for loan custom field.</value>
        [DataMember(Name="modelPath", EmitDefaultValue=false)]
        public string ModelPath { get; set; }

        /// <summary>
        /// Indicates whether the field has a calculation associated.
        /// </summary>
        /// <value>Indicates whether the field has a calculation associated.</value>
        [DataMember(Name="isCalculatedField", EmitDefaultValue=false)]
        public bool? IsCalculatedField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomFieldContract {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  Calculation: ").Append(Calculation).Append("\n");
            sb.Append("  Audit: ").Append(Audit).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  ModelPath: ").Append(ModelPath).Append("\n");
            sb.Append("  IsCalculatedField: ").Append(IsCalculatedField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomFieldContract);
        }

        /// <summary>
        /// Returns true if CustomFieldContract instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomFieldContract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomFieldContract input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.MaxLength == input.MaxLength ||
                    (this.MaxLength != null &&
                    this.MaxLength.Equals(input.MaxLength))
                ) && 
                (
                    this.Calculation == input.Calculation ||
                    (this.Calculation != null &&
                    this.Calculation.Equals(input.Calculation))
                ) && 
                (
                    this.Audit == input.Audit ||
                    (this.Audit != null &&
                    this.Audit.Equals(input.Audit))
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                ) && 
                (
                    this.ModelPath == input.ModelPath ||
                    (this.ModelPath != null &&
                    this.ModelPath.Equals(input.ModelPath))
                ) && 
                (
                    this.IsCalculatedField == input.IsCalculatedField ||
                    (this.IsCalculatedField != null &&
                    this.IsCalculatedField.Equals(input.IsCalculatedField))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.MaxLength != null)
                    hashCode = hashCode * 59 + this.MaxLength.GetHashCode();
                if (this.Calculation != null)
                    hashCode = hashCode * 59 + this.Calculation.GetHashCode();
                if (this.Audit != null)
                    hashCode = hashCode * 59 + this.Audit.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                if (this.ModelPath != null)
                    hashCode = hashCode * 59 + this.ModelPath.GetHashCode();
                if (this.IsCalculatedField != null)
                    hashCode = hashCode * 59 + this.IsCalculatedField.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
