/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/


/* 
 * Settings
 *
 * Represents settings operations on Company, Loan, Contact etc.
 *
 * OpenAPI spec version: 1.4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elli.Api.Settings.Client.SwaggerDateConverter;

namespace Elli.Api.Settings.Model
{
    /// <summary>
    /// OrganizationInfoContractLicense
    /// </summary>
    [DataContract]
    public partial class OrganizationInfoContractLicense :  IEquatable<OrganizationInfoContractLicense>, IValidatableObject
    {
    
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="allowLoansWithIssues", EmitDefaultValue=false)]
        public int? AllowLoansWithIssues { get; set; }

        /// <summary>
        /// Indicates the exempted creditors
        /// </summary>
        /// <value>Indicates the exempted creditors</value>
        [DataMember(Name="atrExemptCreditors", EmitDefaultValue=false)]
        public string AtrExemptCreditors { get; set; }

        /// <summary>
        /// Indicates if &#39;small creditor&#39; or &#39;Rural small creditor&#39; is set.
        /// </summary>
        /// <value>Indicates if &#39;small creditor&#39; or &#39;Rural small creditor&#39; is set.</value>
        [DataMember(Name="atrSmallCreditors", EmitDefaultValue=false)]
        public string AtrSmallCreditors { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="msgUploadNonApprovedLoans", EmitDefaultValue=false)]
        public string MsgUploadNonApprovedLoans { get; set; }

        /// <summary>
        /// Home state code
        /// </summary>
        /// <value>Home state code</value>
        [DataMember(Name="homeState", EmitDefaultValue=false)]
        public string HomeState { get; set; }

        /// <summary>
        /// Lender type
        /// </summary>
        /// <value>Lender type</value>
        [DataMember(Name="lenderType", EmitDefaultValue=false)]
        public string LenderType { get; set; }

        /// <summary>
        /// it can be set to &#39;NoStatutoryElection&#39; or &#39;UCCCElectionForAllLoans&#39; optionally.
        /// </summary>
        /// <value>it can be set to &#39;NoStatutoryElection&#39; or &#39;UCCCElectionForAllLoans&#39; optionally.</value>
        [DataMember(Name="statutoryStatusKansasType", EmitDefaultValue=false)]
        public string StatutoryStatusKansasType { get; set; }

        /// <summary>
        /// It can be set to &#39;NoStatutoryElection&#39; or &#39;CreditGrantorLawElection&#39;
        /// </summary>
        /// <value>It can be set to &#39;NoStatutoryElection&#39; or &#39;CreditGrantorLawElection&#39;</value>
        [DataMember(Name="statutoryStatusMarylandType", EmitDefaultValue=false)]
        public string StatutoryStatusMarylandType { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="useCustomLenderProfileForECS", EmitDefaultValue=false)]
        public bool? UseCustomLenderProfileForECS { get; set; }

        /// <summary>
        /// Indicates if parent organization information can be used for licenses.
        /// </summary>
        /// <value>Indicates if parent organization information can be used for licenses.</value>
        [DataMember(Name="useParentInformation", EmitDefaultValue=false)]
        public bool? UseParentInformation { get; set; }

        /// <summary>
        /// Gets or Sets StateLicenseExtTypes
        /// </summary>
        [DataMember(Name="stateLicenseExtTypes", EmitDefaultValue=false)]
        public List<OrganizationInfoContractLicenseStateLicenseExtTypes> StateLicenseExtTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrganizationInfoContractLicense {\n");
            sb.Append("  AllowLoansWithIssues: ").Append(AllowLoansWithIssues).Append("\n");
            sb.Append("  AtrExemptCreditors: ").Append(AtrExemptCreditors).Append("\n");
            sb.Append("  AtrSmallCreditors: ").Append(AtrSmallCreditors).Append("\n");
            sb.Append("  MsgUploadNonApprovedLoans: ").Append(MsgUploadNonApprovedLoans).Append("\n");
            sb.Append("  HomeState: ").Append(HomeState).Append("\n");
            sb.Append("  LenderType: ").Append(LenderType).Append("\n");
            sb.Append("  StatutoryStatusKansasType: ").Append(StatutoryStatusKansasType).Append("\n");
            sb.Append("  StatutoryStatusMarylandType: ").Append(StatutoryStatusMarylandType).Append("\n");
            sb.Append("  UseCustomLenderProfileForECS: ").Append(UseCustomLenderProfileForECS).Append("\n");
            sb.Append("  UseParentInformation: ").Append(UseParentInformation).Append("\n");
            sb.Append("  StateLicenseExtTypes: ").Append(StateLicenseExtTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrganizationInfoContractLicense);
        }

        /// <summary>
        /// Returns true if OrganizationInfoContractLicense instances are equal
        /// </summary>
        /// <param name="input">Instance of OrganizationInfoContractLicense to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrganizationInfoContractLicense input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowLoansWithIssues == input.AllowLoansWithIssues ||
                    (this.AllowLoansWithIssues != null &&
                    this.AllowLoansWithIssues.Equals(input.AllowLoansWithIssues))
                ) && 
                (
                    this.AtrExemptCreditors == input.AtrExemptCreditors ||
                    (this.AtrExemptCreditors != null &&
                    this.AtrExemptCreditors.Equals(input.AtrExemptCreditors))
                ) && 
                (
                    this.AtrSmallCreditors == input.AtrSmallCreditors ||
                    (this.AtrSmallCreditors != null &&
                    this.AtrSmallCreditors.Equals(input.AtrSmallCreditors))
                ) && 
                (
                    this.MsgUploadNonApprovedLoans == input.MsgUploadNonApprovedLoans ||
                    (this.MsgUploadNonApprovedLoans != null &&
                    this.MsgUploadNonApprovedLoans.Equals(input.MsgUploadNonApprovedLoans))
                ) && 
                (
                    this.HomeState == input.HomeState ||
                    (this.HomeState != null &&
                    this.HomeState.Equals(input.HomeState))
                ) && 
                (
                    this.LenderType == input.LenderType ||
                    (this.LenderType != null &&
                    this.LenderType.Equals(input.LenderType))
                ) && 
                (
                    this.StatutoryStatusKansasType == input.StatutoryStatusKansasType ||
                    (this.StatutoryStatusKansasType != null &&
                    this.StatutoryStatusKansasType.Equals(input.StatutoryStatusKansasType))
                ) && 
                (
                    this.StatutoryStatusMarylandType == input.StatutoryStatusMarylandType ||
                    (this.StatutoryStatusMarylandType != null &&
                    this.StatutoryStatusMarylandType.Equals(input.StatutoryStatusMarylandType))
                ) && 
                (
                    this.UseCustomLenderProfileForECS == input.UseCustomLenderProfileForECS ||
                    (this.UseCustomLenderProfileForECS != null &&
                    this.UseCustomLenderProfileForECS.Equals(input.UseCustomLenderProfileForECS))
                ) && 
                (
                    this.UseParentInformation == input.UseParentInformation ||
                    (this.UseParentInformation != null &&
                    this.UseParentInformation.Equals(input.UseParentInformation))
                ) && 
                (
                    this.StateLicenseExtTypes == input.StateLicenseExtTypes ||
                    this.StateLicenseExtTypes != null &&
                    this.StateLicenseExtTypes.SequenceEqual(input.StateLicenseExtTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowLoansWithIssues != null)
                    hashCode = hashCode * 59 + this.AllowLoansWithIssues.GetHashCode();
                if (this.AtrExemptCreditors != null)
                    hashCode = hashCode * 59 + this.AtrExemptCreditors.GetHashCode();
                if (this.AtrSmallCreditors != null)
                    hashCode = hashCode * 59 + this.AtrSmallCreditors.GetHashCode();
                if (this.MsgUploadNonApprovedLoans != null)
                    hashCode = hashCode * 59 + this.MsgUploadNonApprovedLoans.GetHashCode();
                if (this.HomeState != null)
                    hashCode = hashCode * 59 + this.HomeState.GetHashCode();
                if (this.LenderType != null)
                    hashCode = hashCode * 59 + this.LenderType.GetHashCode();
                if (this.StatutoryStatusKansasType != null)
                    hashCode = hashCode * 59 + this.StatutoryStatusKansasType.GetHashCode();
                if (this.StatutoryStatusMarylandType != null)
                    hashCode = hashCode * 59 + this.StatutoryStatusMarylandType.GetHashCode();
                if (this.UseCustomLenderProfileForECS != null)
                    hashCode = hashCode * 59 + this.UseCustomLenderProfileForECS.GetHashCode();
                if (this.UseParentInformation != null)
                    hashCode = hashCode * 59 + this.UseParentInformation.GetHashCode();
                if (this.StateLicenseExtTypes != null)
                    hashCode = hashCode * 59 + this.StateLicenseExtTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
