/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/


/* 
 * Settings
 *
 * Represents settings operations on Company, Loan, Contact etc.
 *
 * OpenAPI spec version: 1.4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elli.Api.Settings.Client.SwaggerDateConverter;

namespace Elli.Api.Settings.Model
{
    /// <summary>
    /// OrganizationInfoContract
    /// </summary>
    [DataContract]
    public partial class OrganizationInfoContract :  IEquatable<OrganizationInfoContract>, IValidatableObject
    {
    
        
        /// <summary>
        /// Unique Identifier of Organization
        /// </summary>
        /// <value>Unique Identifier of Organization</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Name of organization
        /// </summary>
        /// <value>Name of organization</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Description of organization
        /// </summary>
        /// <value>Description of organization</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets OrgInformation
        /// </summary>
        [DataMember(Name="orgInformation", EmitDefaultValue=false)]
        public OrganizationInfoContractOrgInformation OrgInformation { get; set; }

        /// <summary>
        /// Gets or Sets Nmls
        /// </summary>
        [DataMember(Name="nmls", EmitDefaultValue=false)]
        public OrganizationInfoContractNmls Nmls { get; set; }

        /// <summary>
        /// Gets or Sets MersMin
        /// </summary>
        [DataMember(Name="mersMin", EmitDefaultValue=false)]
        public OrganizationInfoContractMersMin MersMin { get; set; }

        /// <summary>
        /// Gets or Sets LegalEntityIdentifier
        /// </summary>
        [DataMember(Name="legalEntityIdentifier", EmitDefaultValue=false)]
        public OrganizationInfoContractLegalEntityIdentifier LegalEntityIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets ConsumerConnectLOSearch
        /// </summary>
        [DataMember(Name="consumerConnectLOSearch", EmitDefaultValue=false)]
        public OrganizationInfoContractConsumerConnectLOSearch ConsumerConnectLOSearch { get; set; }

        /// <summary>
        /// Gets or Sets OnrpSettings
        /// </summary>
        [DataMember(Name="onrpSettings", EmitDefaultValue=false)]
        public OrganizationInfoContractOnrpSettings OnrpSettings { get; set; }

        /// <summary>
        /// Email Signature of an organization
        /// </summary>
        /// <value>Email Signature of an organization</value>
        [DataMember(Name="emailSignature", EmitDefaultValue=false)]
        public string EmailSignature { get; set; }

        /// <summary>
        /// Gets or Sets License
        /// </summary>
        [DataMember(Name="license", EmitDefaultValue=false)]
        public OrganizationInfoContractLicense License { get; set; }

        /// <summary>
        /// Gets or Sets ParentOrg
        /// </summary>
        [DataMember(Name="parentOrg", EmitDefaultValue=false)]
        public EntityRefContract ParentOrg { get; set; }

        /// <summary>
        /// Number of child organizations.
        /// </summary>
        /// <value>Number of child organizations.</value>
        [DataMember(Name="numberOfChildOrganizations", EmitDefaultValue=false)]
        public int? NumberOfChildOrganizations { get; set; }

        /// <summary>
        /// Number of users associated with organization.
        /// </summary>
        /// <value>Number of users associated with organization.</value>
        [DataMember(Name="numberOfChildUsers", EmitDefaultValue=false)]
        public int? NumberOfChildUsers { get; set; }

        /// <summary>
        /// Gets or Sets Children
        /// </summary>
        [DataMember(Name="children", EmitDefaultValue=false)]
        public List<OrganizationEntityRefContract> Children { get; set; }

        /// <summary>
        /// Gets or Sets CompensationPlans
        /// </summary>
        [DataMember(Name="compensationPlans", EmitDefaultValue=false)]
        public CompensationPlanContract CompensationPlans { get; set; }

        /// <summary>
        /// Gets or Sets CcSite
        /// </summary>
        [DataMember(Name="ccSite", EmitDefaultValue=false)]
        public OrganizationInfoContractCcSite CcSite { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrganizationInfoContract {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  OrgInformation: ").Append(OrgInformation).Append("\n");
            sb.Append("  Nmls: ").Append(Nmls).Append("\n");
            sb.Append("  MersMin: ").Append(MersMin).Append("\n");
            sb.Append("  LegalEntityIdentifier: ").Append(LegalEntityIdentifier).Append("\n");
            sb.Append("  ConsumerConnectLOSearch: ").Append(ConsumerConnectLOSearch).Append("\n");
            sb.Append("  OnrpSettings: ").Append(OnrpSettings).Append("\n");
            sb.Append("  EmailSignature: ").Append(EmailSignature).Append("\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  ParentOrg: ").Append(ParentOrg).Append("\n");
            sb.Append("  NumberOfChildOrganizations: ").Append(NumberOfChildOrganizations).Append("\n");
            sb.Append("  NumberOfChildUsers: ").Append(NumberOfChildUsers).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  CompensationPlans: ").Append(CompensationPlans).Append("\n");
            sb.Append("  CcSite: ").Append(CcSite).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrganizationInfoContract);
        }

        /// <summary>
        /// Returns true if OrganizationInfoContract instances are equal
        /// </summary>
        /// <param name="input">Instance of OrganizationInfoContract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrganizationInfoContract input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.OrgInformation == input.OrgInformation ||
                    (this.OrgInformation != null &&
                    this.OrgInformation.Equals(input.OrgInformation))
                ) && 
                (
                    this.Nmls == input.Nmls ||
                    (this.Nmls != null &&
                    this.Nmls.Equals(input.Nmls))
                ) && 
                (
                    this.MersMin == input.MersMin ||
                    (this.MersMin != null &&
                    this.MersMin.Equals(input.MersMin))
                ) && 
                (
                    this.LegalEntityIdentifier == input.LegalEntityIdentifier ||
                    (this.LegalEntityIdentifier != null &&
                    this.LegalEntityIdentifier.Equals(input.LegalEntityIdentifier))
                ) && 
                (
                    this.ConsumerConnectLOSearch == input.ConsumerConnectLOSearch ||
                    (this.ConsumerConnectLOSearch != null &&
                    this.ConsumerConnectLOSearch.Equals(input.ConsumerConnectLOSearch))
                ) && 
                (
                    this.OnrpSettings == input.OnrpSettings ||
                    (this.OnrpSettings != null &&
                    this.OnrpSettings.Equals(input.OnrpSettings))
                ) && 
                (
                    this.EmailSignature == input.EmailSignature ||
                    (this.EmailSignature != null &&
                    this.EmailSignature.Equals(input.EmailSignature))
                ) && 
                (
                    this.License == input.License ||
                    (this.License != null &&
                    this.License.Equals(input.License))
                ) && 
                (
                    this.ParentOrg == input.ParentOrg ||
                    (this.ParentOrg != null &&
                    this.ParentOrg.Equals(input.ParentOrg))
                ) && 
                (
                    this.NumberOfChildOrganizations == input.NumberOfChildOrganizations ||
                    (this.NumberOfChildOrganizations != null &&
                    this.NumberOfChildOrganizations.Equals(input.NumberOfChildOrganizations))
                ) && 
                (
                    this.NumberOfChildUsers == input.NumberOfChildUsers ||
                    (this.NumberOfChildUsers != null &&
                    this.NumberOfChildUsers.Equals(input.NumberOfChildUsers))
                ) && 
                (
                    this.Children == input.Children ||
                    this.Children != null &&
                    this.Children.SequenceEqual(input.Children)
                ) && 
                (
                    this.CompensationPlans == input.CompensationPlans ||
                    (this.CompensationPlans != null &&
                    this.CompensationPlans.Equals(input.CompensationPlans))
                ) && 
                (
                    this.CcSite == input.CcSite ||
                    (this.CcSite != null &&
                    this.CcSite.Equals(input.CcSite))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.OrgInformation != null)
                    hashCode = hashCode * 59 + this.OrgInformation.GetHashCode();
                if (this.Nmls != null)
                    hashCode = hashCode * 59 + this.Nmls.GetHashCode();
                if (this.MersMin != null)
                    hashCode = hashCode * 59 + this.MersMin.GetHashCode();
                if (this.LegalEntityIdentifier != null)
                    hashCode = hashCode * 59 + this.LegalEntityIdentifier.GetHashCode();
                if (this.ConsumerConnectLOSearch != null)
                    hashCode = hashCode * 59 + this.ConsumerConnectLOSearch.GetHashCode();
                if (this.OnrpSettings != null)
                    hashCode = hashCode * 59 + this.OnrpSettings.GetHashCode();
                if (this.EmailSignature != null)
                    hashCode = hashCode * 59 + this.EmailSignature.GetHashCode();
                if (this.License != null)
                    hashCode = hashCode * 59 + this.License.GetHashCode();
                if (this.ParentOrg != null)
                    hashCode = hashCode * 59 + this.ParentOrg.GetHashCode();
                if (this.NumberOfChildOrganizations != null)
                    hashCode = hashCode * 59 + this.NumberOfChildOrganizations.GetHashCode();
                if (this.NumberOfChildUsers != null)
                    hashCode = hashCode * 59 + this.NumberOfChildUsers.GetHashCode();
                if (this.Children != null)
                    hashCode = hashCode * 59 + this.Children.GetHashCode();
                if (this.CompensationPlans != null)
                    hashCode = hashCode * 59 + this.CompensationPlans.GetHashCode();
                if (this.CcSite != null)
                    hashCode = hashCode * 59 + this.CcSite.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
