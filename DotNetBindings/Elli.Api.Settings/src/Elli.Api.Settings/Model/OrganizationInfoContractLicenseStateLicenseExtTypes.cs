/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/


/* 
 * Settings
 *
 * Represents settings operations on Company, Loan, Contact etc.
 *
 * OpenAPI spec version: 1.4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Elli.Api.Settings.Client.SwaggerDateConverter;

namespace Elli.Api.Settings.Model
{
    /// <summary>
    /// OrganizationInfoContractLicenseStateLicenseExtTypes
    /// </summary>
    [DataContract]
    public partial class OrganizationInfoContractLicenseStateLicenseExtTypes :  IEquatable<OrganizationInfoContractLicenseStateLicenseExtTypes>, IValidatableObject
    {
    
        
        /// <summary>
        /// State code
        /// </summary>
        /// <value>State code</value>
        [DataMember(Name="stateAbbrevation", EmitDefaultValue=false)]
        public string StateAbbrevation { get; set; }

        /// <summary>
        /// License type
        /// </summary>
        /// <value>License type</value>
        [DataMember(Name="licenseType", EmitDefaultValue=false)]
        public string LicenseType { get; set; }

        /// <summary>
        /// Indicate if license is exempted.
        /// </summary>
        /// <value>Indicate if license is exempted.</value>
        [DataMember(Name="isExempted", EmitDefaultValue=false)]
        public bool? IsExempted { get; set; }

        /// <summary>
        /// License number
        /// </summary>
        /// <value>License number</value>
        [DataMember(Name="licenseNo", EmitDefaultValue=false)]
        public string LicenseNo { get; set; }

        /// <summary>
        /// Issue date
        /// </summary>
        /// <value>Issue date</value>
        [DataMember(Name="issueDate", EmitDefaultValue=false)]
        public string IssueDate { get; set; }

        /// <summary>
        /// Start date
        /// </summary>
        /// <value>Start date</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// End date
        /// </summary>
        /// <value>End date</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public string EndDate { get; set; }

        /// <summary>
        /// License status
        /// </summary>
        /// <value>License status</value>
        [DataMember(Name="licenseStatus", EmitDefaultValue=false)]
        public string LicenseStatus { get; set; }

        /// <summary>
        /// Status date
        /// </summary>
        /// <value>Status date</value>
        [DataMember(Name="statusDate", EmitDefaultValue=false)]
        public string StatusDate { get; set; }

        /// <summary>
        /// indicates if license is approved.
        /// </summary>
        /// <value>indicates if license is approved.</value>
        [DataMember(Name="isApproved", EmitDefaultValue=false)]
        public bool? IsApproved { get; set; }

        /// <summary>
        /// Last checked
        /// </summary>
        /// <value>Last checked</value>
        [DataMember(Name="lastChecked", EmitDefaultValue=false)]
        public string LastChecked { get; set; }

        /// <summary>
        /// Indicate if license is selected for organization.
        /// </summary>
        /// <value>Indicate if license is selected for organization.</value>
        [DataMember(Name="isSelected", EmitDefaultValue=false)]
        public bool? IsSelected { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrganizationInfoContractLicenseStateLicenseExtTypes {\n");
            sb.Append("  StateAbbrevation: ").Append(StateAbbrevation).Append("\n");
            sb.Append("  LicenseType: ").Append(LicenseType).Append("\n");
            sb.Append("  IsExempted: ").Append(IsExempted).Append("\n");
            sb.Append("  LicenseNo: ").Append(LicenseNo).Append("\n");
            sb.Append("  IssueDate: ").Append(IssueDate).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  LicenseStatus: ").Append(LicenseStatus).Append("\n");
            sb.Append("  StatusDate: ").Append(StatusDate).Append("\n");
            sb.Append("  IsApproved: ").Append(IsApproved).Append("\n");
            sb.Append("  LastChecked: ").Append(LastChecked).Append("\n");
            sb.Append("  IsSelected: ").Append(IsSelected).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrganizationInfoContractLicenseStateLicenseExtTypes);
        }

        /// <summary>
        /// Returns true if OrganizationInfoContractLicenseStateLicenseExtTypes instances are equal
        /// </summary>
        /// <param name="input">Instance of OrganizationInfoContractLicenseStateLicenseExtTypes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrganizationInfoContractLicenseStateLicenseExtTypes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StateAbbrevation == input.StateAbbrevation ||
                    (this.StateAbbrevation != null &&
                    this.StateAbbrevation.Equals(input.StateAbbrevation))
                ) && 
                (
                    this.LicenseType == input.LicenseType ||
                    (this.LicenseType != null &&
                    this.LicenseType.Equals(input.LicenseType))
                ) && 
                (
                    this.IsExempted == input.IsExempted ||
                    (this.IsExempted != null &&
                    this.IsExempted.Equals(input.IsExempted))
                ) && 
                (
                    this.LicenseNo == input.LicenseNo ||
                    (this.LicenseNo != null &&
                    this.LicenseNo.Equals(input.LicenseNo))
                ) && 
                (
                    this.IssueDate == input.IssueDate ||
                    (this.IssueDate != null &&
                    this.IssueDate.Equals(input.IssueDate))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.LicenseStatus == input.LicenseStatus ||
                    (this.LicenseStatus != null &&
                    this.LicenseStatus.Equals(input.LicenseStatus))
                ) && 
                (
                    this.StatusDate == input.StatusDate ||
                    (this.StatusDate != null &&
                    this.StatusDate.Equals(input.StatusDate))
                ) && 
                (
                    this.IsApproved == input.IsApproved ||
                    (this.IsApproved != null &&
                    this.IsApproved.Equals(input.IsApproved))
                ) && 
                (
                    this.LastChecked == input.LastChecked ||
                    (this.LastChecked != null &&
                    this.LastChecked.Equals(input.LastChecked))
                ) && 
                (
                    this.IsSelected == input.IsSelected ||
                    (this.IsSelected != null &&
                    this.IsSelected.Equals(input.IsSelected))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StateAbbrevation != null)
                    hashCode = hashCode * 59 + this.StateAbbrevation.GetHashCode();
                if (this.LicenseType != null)
                    hashCode = hashCode * 59 + this.LicenseType.GetHashCode();
                if (this.IsExempted != null)
                    hashCode = hashCode * 59 + this.IsExempted.GetHashCode();
                if (this.LicenseNo != null)
                    hashCode = hashCode * 59 + this.LicenseNo.GetHashCode();
                if (this.IssueDate != null)
                    hashCode = hashCode * 59 + this.IssueDate.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.LicenseStatus != null)
                    hashCode = hashCode * 59 + this.LicenseStatus.GetHashCode();
                if (this.StatusDate != null)
                    hashCode = hashCode * 59 + this.StatusDate.GetHashCode();
                if (this.IsApproved != null)
                    hashCode = hashCode * 59 + this.IsApproved.GetHashCode();
                if (this.LastChecked != null)
                    hashCode = hashCode * 59 + this.LastChecked.GetHashCode();
                if (this.IsSelected != null)
                    hashCode = hashCode * 59 + this.IsSelected.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
