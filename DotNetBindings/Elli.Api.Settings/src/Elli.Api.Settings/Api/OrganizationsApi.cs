/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/

/* 
 * Settings
 *
 * Represents settings operations on Company, Loan, Contact etc.
 *
 * OpenAPI spec version: 1.4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Elli.Api.Settings.Client;
using Elli.Api.Settings.Model;

namespace Elli.Api.Settings.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganizationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get organization detail
        /// </summary>
        /// <remarks>
        /// Returns the organization details. It supports three types of view. By default &#39;Summary&#39; will be returns. in &#39;Summary&#39; view, response will have basic organization details along with parent organization reference. when view is &#39;Entity&#39;, response will have complete organization details. When view is &#39;Hierarchy&#39;, organization children like like child organizations and associated users will be included in response. Case is ignored.
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId">Organization id for which details are requested.</param>
        /// <param name="view">Indicates the level of details required in response. Acceptable values are summary, entity or hierarchy. summary by default. (optional)</param>
        /// <returns>OrganizationInfoContract</returns>
        OrganizationInfoContract GetOrganization (string orgId, string view = null);

        /// <summary>
        /// Get organization detail
        /// </summary>
        /// <remarks>
        /// Returns the organization details. It supports three types of view. By default &#39;Summary&#39; will be returns. in &#39;Summary&#39; view, response will have basic organization details along with parent organization reference. when view is &#39;Entity&#39;, response will have complete organization details. When view is &#39;Hierarchy&#39;, organization children like like child organizations and associated users will be included in response. Case is ignored.
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId">Organization id for which details are requested.</param>
        /// <param name="view">Indicates the level of details required in response. Acceptable values are summary, entity or hierarchy. summary by default. (optional)</param>
        /// <returns>ApiResponse of OrganizationInfoContract</returns>
        ApiResponse<OrganizationInfoContract> GetOrganizationWithHttpInfo (string orgId, string view = null);
        /// <summary>
        /// Returnes entity reference for child organizations and users
        /// </summary>
        /// <remarks>
        /// Returns the entity references of child organizations and users. it supports the pagination using query parameters start and limit. Case is ignored.
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId">Organization id for which details are requested.</param>
        /// <param name="recursive">Accepted values - True or False, false by default. If this is passed as true, response includes all the below child organizations and their users till end of tree. If not, only immediate child organization and users of organization for which details are requested, will be included in response. (optional)</param>
        /// <param name="type">Accepted values - Organization or User. By default, both organizations and users will included in response. User can request only organizations using type &#x3D; organization and users using type &#x3D; user. (optional)</param>
        /// <param name="start">Starting record number in pagination. (optional)</param>
        /// <param name="limit">Number of records in result. (optional)</param>
        /// <returns>List&lt;EntityRefContract&gt;</returns>
        List<EntityRefContract> GetOrganizationChildren (string orgId, string recursive = null, string type = null, string start = null, string limit = null);

        /// <summary>
        /// Returnes entity reference for child organizations and users
        /// </summary>
        /// <remarks>
        /// Returns the entity references of child organizations and users. it supports the pagination using query parameters start and limit. Case is ignored.
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId">Organization id for which details are requested.</param>
        /// <param name="recursive">Accepted values - True or False, false by default. If this is passed as true, response includes all the below child organizations and their users till end of tree. If not, only immediate child organization and users of organization for which details are requested, will be included in response. (optional)</param>
        /// <param name="type">Accepted values - Organization or User. By default, both organizations and users will included in response. User can request only organizations using type &#x3D; organization and users using type &#x3D; user. (optional)</param>
        /// <param name="start">Starting record number in pagination. (optional)</param>
        /// <param name="limit">Number of records in result. (optional)</param>
        /// <returns>ApiResponse of List&lt;EntityRefContract&gt;</returns>
        ApiResponse<List<EntityRefContract>> GetOrganizationChildrenWithHttpInfo (string orgId, string recursive = null, string type = null, string start = null, string limit = null);
        /// <summary>
        /// Get list of organizations
        /// </summary>
        /// <remarks>
        /// Returns information for all organizations. it supports the pagination using query parameters start and limit. ParentId can be used to filter the result. It supports three types of view. By default &#39;Summary&#39; will be returns. in &#39;Summary&#39; view, response will have basic organization details along with parent organization reference. when view is &#39;Entity&#39;, response will have complete organization details. When view is &#39;Hierarchy&#39;, organization children like like child organizations and associated users will be included in response. Case is ignored.
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="view">By default summary view will be returned. It also supports &#39;Entity&#39; and &#39;Hierarchy&#39;. &#39;Summary&#39; view returns basic information along with parent organization reference. &#39;Entity&#39; view will return complete details of organization. &#39;Hierarchy&#39; view will return the id, description and children of organization including users. (optional)</param>
        /// <param name="parentId">Result will be filtered based on parent id. It will return organizations with matching parent id. (optional)</param>
        /// <param name="start">Starting record number in pagination. Default is 1 (optional)</param>
        /// <param name="limit">Number of records in result. (optional)</param>
        /// <returns>List&lt;OrganizationInfoContract&gt;</returns>
        List<OrganizationInfoContract> GetOrganizations (string view = null, string parentId = null, string start = null, string limit = null);

        /// <summary>
        /// Get list of organizations
        /// </summary>
        /// <remarks>
        /// Returns information for all organizations. it supports the pagination using query parameters start and limit. ParentId can be used to filter the result. It supports three types of view. By default &#39;Summary&#39; will be returns. in &#39;Summary&#39; view, response will have basic organization details along with parent organization reference. when view is &#39;Entity&#39;, response will have complete organization details. When view is &#39;Hierarchy&#39;, organization children like like child organizations and associated users will be included in response. Case is ignored.
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="view">By default summary view will be returned. It also supports &#39;Entity&#39; and &#39;Hierarchy&#39;. &#39;Summary&#39; view returns basic information along with parent organization reference. &#39;Entity&#39; view will return complete details of organization. &#39;Hierarchy&#39; view will return the id, description and children of organization including users. (optional)</param>
        /// <param name="parentId">Result will be filtered based on parent id. It will return organizations with matching parent id. (optional)</param>
        /// <param name="start">Starting record number in pagination. Default is 1 (optional)</param>
        /// <param name="limit">Number of records in result. (optional)</param>
        /// <returns>ApiResponse of List&lt;OrganizationInfoContract&gt;</returns>
        ApiResponse<List<OrganizationInfoContract>> GetOrganizationsWithHttpInfo (string view = null, string parentId = null, string start = null, string limit = null);
        /// <summary>
        /// Get root organization detail
        /// </summary>
        /// <remarks>
        /// Returns the root organization details. It supports three types of view. By default &#39;Summary&#39; will be returns. in &#39;Summary&#39; view, response will have basic organization details along with parent organization reference. when view is &#39;Entity&#39;, response will have complete organization details. When view is &#39;Hierarchy&#39;, organization children like like child organizations and associated users will be included in response. Case is ignored.
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="view">Indicates the level of details required in response. Acceptable values are summary, entity or hierarchy. summary by default. (optional)</param>
        /// <returns>OrganizationInfoContract</returns>
        OrganizationInfoContract GetRootOrganization (string view = null);

        /// <summary>
        /// Get root organization detail
        /// </summary>
        /// <remarks>
        /// Returns the root organization details. It supports three types of view. By default &#39;Summary&#39; will be returns. in &#39;Summary&#39; view, response will have basic organization details along with parent organization reference. when view is &#39;Entity&#39;, response will have complete organization details. When view is &#39;Hierarchy&#39;, organization children like like child organizations and associated users will be included in response. Case is ignored.
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="view">Indicates the level of details required in response. Acceptable values are summary, entity or hierarchy. summary by default. (optional)</param>
        /// <returns>ApiResponse of OrganizationInfoContract</returns>
        ApiResponse<OrganizationInfoContract> GetRootOrganizationWithHttpInfo (string view = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get organization detail
        /// </summary>
        /// <remarks>
        /// Returns the organization details. It supports three types of view. By default &#39;Summary&#39; will be returns. in &#39;Summary&#39; view, response will have basic organization details along with parent organization reference. when view is &#39;Entity&#39;, response will have complete organization details. When view is &#39;Hierarchy&#39;, organization children like like child organizations and associated users will be included in response. Case is ignored.
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId">Organization id for which details are requested.</param>
        /// <param name="view">Indicates the level of details required in response. Acceptable values are summary, entity or hierarchy. summary by default. (optional)</param>
        /// <returns>Task of OrganizationInfoContract</returns>
        System.Threading.Tasks.Task<OrganizationInfoContract> GetOrganizationAsync (string orgId, string view = null);

        /// <summary>
        /// Get organization detail
        /// </summary>
        /// <remarks>
        /// Returns the organization details. It supports three types of view. By default &#39;Summary&#39; will be returns. in &#39;Summary&#39; view, response will have basic organization details along with parent organization reference. when view is &#39;Entity&#39;, response will have complete organization details. When view is &#39;Hierarchy&#39;, organization children like like child organizations and associated users will be included in response. Case is ignored.
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId">Organization id for which details are requested.</param>
        /// <param name="view">Indicates the level of details required in response. Acceptable values are summary, entity or hierarchy. summary by default. (optional)</param>
        /// <returns>Task of ApiResponse (OrganizationInfoContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationInfoContract>> GetOrganizationAsyncWithHttpInfo (string orgId, string view = null);
        /// <summary>
        /// Returnes entity reference for child organizations and users
        /// </summary>
        /// <remarks>
        /// Returns the entity references of child organizations and users. it supports the pagination using query parameters start and limit. Case is ignored.
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId">Organization id for which details are requested.</param>
        /// <param name="recursive">Accepted values - True or False, false by default. If this is passed as true, response includes all the below child organizations and their users till end of tree. If not, only immediate child organization and users of organization for which details are requested, will be included in response. (optional)</param>
        /// <param name="type">Accepted values - Organization or User. By default, both organizations and users will included in response. User can request only organizations using type &#x3D; organization and users using type &#x3D; user. (optional)</param>
        /// <param name="start">Starting record number in pagination. (optional)</param>
        /// <param name="limit">Number of records in result. (optional)</param>
        /// <returns>Task of List&lt;EntityRefContract&gt;</returns>
        System.Threading.Tasks.Task<List<EntityRefContract>> GetOrganizationChildrenAsync (string orgId, string recursive = null, string type = null, string start = null, string limit = null);

        /// <summary>
        /// Returnes entity reference for child organizations and users
        /// </summary>
        /// <remarks>
        /// Returns the entity references of child organizations and users. it supports the pagination using query parameters start and limit. Case is ignored.
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId">Organization id for which details are requested.</param>
        /// <param name="recursive">Accepted values - True or False, false by default. If this is passed as true, response includes all the below child organizations and their users till end of tree. If not, only immediate child organization and users of organization for which details are requested, will be included in response. (optional)</param>
        /// <param name="type">Accepted values - Organization or User. By default, both organizations and users will included in response. User can request only organizations using type &#x3D; organization and users using type &#x3D; user. (optional)</param>
        /// <param name="start">Starting record number in pagination. (optional)</param>
        /// <param name="limit">Number of records in result. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EntityRefContract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EntityRefContract>>> GetOrganizationChildrenAsyncWithHttpInfo (string orgId, string recursive = null, string type = null, string start = null, string limit = null);
        /// <summary>
        /// Get list of organizations
        /// </summary>
        /// <remarks>
        /// Returns information for all organizations. it supports the pagination using query parameters start and limit. ParentId can be used to filter the result. It supports three types of view. By default &#39;Summary&#39; will be returns. in &#39;Summary&#39; view, response will have basic organization details along with parent organization reference. when view is &#39;Entity&#39;, response will have complete organization details. When view is &#39;Hierarchy&#39;, organization children like like child organizations and associated users will be included in response. Case is ignored.
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="view">By default summary view will be returned. It also supports &#39;Entity&#39; and &#39;Hierarchy&#39;. &#39;Summary&#39; view returns basic information along with parent organization reference. &#39;Entity&#39; view will return complete details of organization. &#39;Hierarchy&#39; view will return the id, description and children of organization including users. (optional)</param>
        /// <param name="parentId">Result will be filtered based on parent id. It will return organizations with matching parent id. (optional)</param>
        /// <param name="start">Starting record number in pagination. Default is 1 (optional)</param>
        /// <param name="limit">Number of records in result. (optional)</param>
        /// <returns>Task of List&lt;OrganizationInfoContract&gt;</returns>
        System.Threading.Tasks.Task<List<OrganizationInfoContract>> GetOrganizationsAsync (string view = null, string parentId = null, string start = null, string limit = null);

        /// <summary>
        /// Get list of organizations
        /// </summary>
        /// <remarks>
        /// Returns information for all organizations. it supports the pagination using query parameters start and limit. ParentId can be used to filter the result. It supports three types of view. By default &#39;Summary&#39; will be returns. in &#39;Summary&#39; view, response will have basic organization details along with parent organization reference. when view is &#39;Entity&#39;, response will have complete organization details. When view is &#39;Hierarchy&#39;, organization children like like child organizations and associated users will be included in response. Case is ignored.
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="view">By default summary view will be returned. It also supports &#39;Entity&#39; and &#39;Hierarchy&#39;. &#39;Summary&#39; view returns basic information along with parent organization reference. &#39;Entity&#39; view will return complete details of organization. &#39;Hierarchy&#39; view will return the id, description and children of organization including users. (optional)</param>
        /// <param name="parentId">Result will be filtered based on parent id. It will return organizations with matching parent id. (optional)</param>
        /// <param name="start">Starting record number in pagination. Default is 1 (optional)</param>
        /// <param name="limit">Number of records in result. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OrganizationInfoContract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrganizationInfoContract>>> GetOrganizationsAsyncWithHttpInfo (string view = null, string parentId = null, string start = null, string limit = null);
        /// <summary>
        /// Get root organization detail
        /// </summary>
        /// <remarks>
        /// Returns the root organization details. It supports three types of view. By default &#39;Summary&#39; will be returns. in &#39;Summary&#39; view, response will have basic organization details along with parent organization reference. when view is &#39;Entity&#39;, response will have complete organization details. When view is &#39;Hierarchy&#39;, organization children like like child organizations and associated users will be included in response. Case is ignored.
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="view">Indicates the level of details required in response. Acceptable values are summary, entity or hierarchy. summary by default. (optional)</param>
        /// <returns>Task of OrganizationInfoContract</returns>
        System.Threading.Tasks.Task<OrganizationInfoContract> GetRootOrganizationAsync (string view = null);

        /// <summary>
        /// Get root organization detail
        /// </summary>
        /// <remarks>
        /// Returns the root organization details. It supports three types of view. By default &#39;Summary&#39; will be returns. in &#39;Summary&#39; view, response will have basic organization details along with parent organization reference. when view is &#39;Entity&#39;, response will have complete organization details. When view is &#39;Hierarchy&#39;, organization children like like child organizations and associated users will be included in response. Case is ignored.
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="view">Indicates the level of details required in response. Acceptable values are summary, entity or hierarchy. summary by default. (optional)</param>
        /// <returns>Task of ApiResponse (OrganizationInfoContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationInfoContract>> GetRootOrganizationAsyncWithHttpInfo (string view = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrganizationsApi : IOrganizationsApi
    {
        private Elli.Api.Settings.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganizationsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Elli.Api.Settings.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrganizationsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Elli.Api.Settings.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Elli.Api.Settings.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get organization detail Returns the organization details. It supports three types of view. By default &#39;Summary&#39; will be returns. in &#39;Summary&#39; view, response will have basic organization details along with parent organization reference. when view is &#39;Entity&#39;, response will have complete organization details. When view is &#39;Hierarchy&#39;, organization children like like child organizations and associated users will be included in response. Case is ignored.
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId">Organization id for which details are requested.</param>
        /// <param name="view">Indicates the level of details required in response. Acceptable values are summary, entity or hierarchy. summary by default. (optional)</param>
        /// <returns>OrganizationInfoContract</returns>
        public OrganizationInfoContract GetOrganization (string orgId, string view = null)
        {
             ApiResponse<OrganizationInfoContract> localVarResponse = GetOrganizationWithHttpInfo(orgId, view);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get organization detail Returns the organization details. It supports three types of view. By default &#39;Summary&#39; will be returns. in &#39;Summary&#39; view, response will have basic organization details along with parent organization reference. when view is &#39;Entity&#39;, response will have complete organization details. When view is &#39;Hierarchy&#39;, organization children like like child organizations and associated users will be included in response. Case is ignored.
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId">Organization id for which details are requested.</param>
        /// <param name="view">Indicates the level of details required in response. Acceptable values are summary, entity or hierarchy. summary by default. (optional)</param>
        /// <returns>ApiResponse of OrganizationInfoContract</returns>
        public ApiResponse< OrganizationInfoContract > GetOrganizationWithHttpInfo (string orgId, string view = null)
        {
            // verify the required parameter 'orgId' is set
            if (orgId == null)
                throw new ApiException(400, "Missing required parameter 'orgId' when calling OrganizationsApi->GetOrganization");

            var localVarPath = "/encompass/v1/organizations/{orgId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgId != null) localVarPathParams.Add("orgId", Configuration.ApiClient.ParameterToString(orgId)); // path parameter
            if (view != null) localVarQueryParams.Add("view", Configuration.ApiClient.ParameterToString(view)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationInfoContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationInfoContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationInfoContract)));
        }

        /// <summary>
        /// Get organization detail Returns the organization details. It supports three types of view. By default &#39;Summary&#39; will be returns. in &#39;Summary&#39; view, response will have basic organization details along with parent organization reference. when view is &#39;Entity&#39;, response will have complete organization details. When view is &#39;Hierarchy&#39;, organization children like like child organizations and associated users will be included in response. Case is ignored.
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId">Organization id for which details are requested.</param>
        /// <param name="view">Indicates the level of details required in response. Acceptable values are summary, entity or hierarchy. summary by default. (optional)</param>
        /// <returns>Task of OrganizationInfoContract</returns>
        public async System.Threading.Tasks.Task<OrganizationInfoContract> GetOrganizationAsync (string orgId, string view = null)
        {
             ApiResponse<OrganizationInfoContract> localVarResponse = await GetOrganizationAsyncWithHttpInfo(orgId, view);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get organization detail Returns the organization details. It supports three types of view. By default &#39;Summary&#39; will be returns. in &#39;Summary&#39; view, response will have basic organization details along with parent organization reference. when view is &#39;Entity&#39;, response will have complete organization details. When view is &#39;Hierarchy&#39;, organization children like like child organizations and associated users will be included in response. Case is ignored.
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId">Organization id for which details are requested.</param>
        /// <param name="view">Indicates the level of details required in response. Acceptable values are summary, entity or hierarchy. summary by default. (optional)</param>
        /// <returns>Task of ApiResponse (OrganizationInfoContract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationInfoContract>> GetOrganizationAsyncWithHttpInfo (string orgId, string view = null)
        {
            // verify the required parameter 'orgId' is set
            if (orgId == null)
                throw new ApiException(400, "Missing required parameter 'orgId' when calling OrganizationsApi->GetOrganization");

            var localVarPath = "/encompass/v1/organizations/{orgId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgId != null) localVarPathParams.Add("orgId", Configuration.ApiClient.ParameterToString(orgId)); // path parameter
            if (view != null) localVarQueryParams.Add("view", Configuration.ApiClient.ParameterToString(view)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationInfoContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationInfoContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationInfoContract)));
        }

        /// <summary>
        /// Returnes entity reference for child organizations and users Returns the entity references of child organizations and users. it supports the pagination using query parameters start and limit. Case is ignored.
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId">Organization id for which details are requested.</param>
        /// <param name="recursive">Accepted values - True or False, false by default. If this is passed as true, response includes all the below child organizations and their users till end of tree. If not, only immediate child organization and users of organization for which details are requested, will be included in response. (optional)</param>
        /// <param name="type">Accepted values - Organization or User. By default, both organizations and users will included in response. User can request only organizations using type &#x3D; organization and users using type &#x3D; user. (optional)</param>
        /// <param name="start">Starting record number in pagination. (optional)</param>
        /// <param name="limit">Number of records in result. (optional)</param>
        /// <returns>List&lt;EntityRefContract&gt;</returns>
        public List<EntityRefContract> GetOrganizationChildren (string orgId, string recursive = null, string type = null, string start = null, string limit = null)
        {
             ApiResponse<List<EntityRefContract>> localVarResponse = GetOrganizationChildrenWithHttpInfo(orgId, recursive, type, start, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returnes entity reference for child organizations and users Returns the entity references of child organizations and users. it supports the pagination using query parameters start and limit. Case is ignored.
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId">Organization id for which details are requested.</param>
        /// <param name="recursive">Accepted values - True or False, false by default. If this is passed as true, response includes all the below child organizations and their users till end of tree. If not, only immediate child organization and users of organization for which details are requested, will be included in response. (optional)</param>
        /// <param name="type">Accepted values - Organization or User. By default, both organizations and users will included in response. User can request only organizations using type &#x3D; organization and users using type &#x3D; user. (optional)</param>
        /// <param name="start">Starting record number in pagination. (optional)</param>
        /// <param name="limit">Number of records in result. (optional)</param>
        /// <returns>ApiResponse of List&lt;EntityRefContract&gt;</returns>
        public ApiResponse< List<EntityRefContract> > GetOrganizationChildrenWithHttpInfo (string orgId, string recursive = null, string type = null, string start = null, string limit = null)
        {
            // verify the required parameter 'orgId' is set
            if (orgId == null)
                throw new ApiException(400, "Missing required parameter 'orgId' when calling OrganizationsApi->GetOrganizationChildren");

            var localVarPath = "/encompass/v1/organizations/{orgId}/children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgId != null) localVarPathParams.Add("orgId", Configuration.ApiClient.ParameterToString(orgId)); // path parameter
            if (recursive != null) localVarQueryParams.Add("recursive", Configuration.ApiClient.ParameterToString(recursive)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationChildren", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EntityRefContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EntityRefContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EntityRefContract>)));
        }

        /// <summary>
        /// Returnes entity reference for child organizations and users Returns the entity references of child organizations and users. it supports the pagination using query parameters start and limit. Case is ignored.
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId">Organization id for which details are requested.</param>
        /// <param name="recursive">Accepted values - True or False, false by default. If this is passed as true, response includes all the below child organizations and their users till end of tree. If not, only immediate child organization and users of organization for which details are requested, will be included in response. (optional)</param>
        /// <param name="type">Accepted values - Organization or User. By default, both organizations and users will included in response. User can request only organizations using type &#x3D; organization and users using type &#x3D; user. (optional)</param>
        /// <param name="start">Starting record number in pagination. (optional)</param>
        /// <param name="limit">Number of records in result. (optional)</param>
        /// <returns>Task of List&lt;EntityRefContract&gt;</returns>
        public async System.Threading.Tasks.Task<List<EntityRefContract>> GetOrganizationChildrenAsync (string orgId, string recursive = null, string type = null, string start = null, string limit = null)
        {
             ApiResponse<List<EntityRefContract>> localVarResponse = await GetOrganizationChildrenAsyncWithHttpInfo(orgId, recursive, type, start, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returnes entity reference for child organizations and users Returns the entity references of child organizations and users. it supports the pagination using query parameters start and limit. Case is ignored.
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgId">Organization id for which details are requested.</param>
        /// <param name="recursive">Accepted values - True or False, false by default. If this is passed as true, response includes all the below child organizations and their users till end of tree. If not, only immediate child organization and users of organization for which details are requested, will be included in response. (optional)</param>
        /// <param name="type">Accepted values - Organization or User. By default, both organizations and users will included in response. User can request only organizations using type &#x3D; organization and users using type &#x3D; user. (optional)</param>
        /// <param name="start">Starting record number in pagination. (optional)</param>
        /// <param name="limit">Number of records in result. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EntityRefContract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EntityRefContract>>> GetOrganizationChildrenAsyncWithHttpInfo (string orgId, string recursive = null, string type = null, string start = null, string limit = null)
        {
            // verify the required parameter 'orgId' is set
            if (orgId == null)
                throw new ApiException(400, "Missing required parameter 'orgId' when calling OrganizationsApi->GetOrganizationChildren");

            var localVarPath = "/encompass/v1/organizations/{orgId}/children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgId != null) localVarPathParams.Add("orgId", Configuration.ApiClient.ParameterToString(orgId)); // path parameter
            if (recursive != null) localVarQueryParams.Add("recursive", Configuration.ApiClient.ParameterToString(recursive)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationChildren", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EntityRefContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EntityRefContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EntityRefContract>)));
        }

        /// <summary>
        /// Get list of organizations Returns information for all organizations. it supports the pagination using query parameters start and limit. ParentId can be used to filter the result. It supports three types of view. By default &#39;Summary&#39; will be returns. in &#39;Summary&#39; view, response will have basic organization details along with parent organization reference. when view is &#39;Entity&#39;, response will have complete organization details. When view is &#39;Hierarchy&#39;, organization children like like child organizations and associated users will be included in response. Case is ignored.
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="view">By default summary view will be returned. It also supports &#39;Entity&#39; and &#39;Hierarchy&#39;. &#39;Summary&#39; view returns basic information along with parent organization reference. &#39;Entity&#39; view will return complete details of organization. &#39;Hierarchy&#39; view will return the id, description and children of organization including users. (optional)</param>
        /// <param name="parentId">Result will be filtered based on parent id. It will return organizations with matching parent id. (optional)</param>
        /// <param name="start">Starting record number in pagination. Default is 1 (optional)</param>
        /// <param name="limit">Number of records in result. (optional)</param>
        /// <returns>List&lt;OrganizationInfoContract&gt;</returns>
        public List<OrganizationInfoContract> GetOrganizations (string view = null, string parentId = null, string start = null, string limit = null)
        {
             ApiResponse<List<OrganizationInfoContract>> localVarResponse = GetOrganizationsWithHttpInfo(view, parentId, start, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of organizations Returns information for all organizations. it supports the pagination using query parameters start and limit. ParentId can be used to filter the result. It supports three types of view. By default &#39;Summary&#39; will be returns. in &#39;Summary&#39; view, response will have basic organization details along with parent organization reference. when view is &#39;Entity&#39;, response will have complete organization details. When view is &#39;Hierarchy&#39;, organization children like like child organizations and associated users will be included in response. Case is ignored.
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="view">By default summary view will be returned. It also supports &#39;Entity&#39; and &#39;Hierarchy&#39;. &#39;Summary&#39; view returns basic information along with parent organization reference. &#39;Entity&#39; view will return complete details of organization. &#39;Hierarchy&#39; view will return the id, description and children of organization including users. (optional)</param>
        /// <param name="parentId">Result will be filtered based on parent id. It will return organizations with matching parent id. (optional)</param>
        /// <param name="start">Starting record number in pagination. Default is 1 (optional)</param>
        /// <param name="limit">Number of records in result. (optional)</param>
        /// <returns>ApiResponse of List&lt;OrganizationInfoContract&gt;</returns>
        public ApiResponse< List<OrganizationInfoContract> > GetOrganizationsWithHttpInfo (string view = null, string parentId = null, string start = null, string limit = null)
        {

            var localVarPath = "/encompass/v1/organizations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (view != null) localVarQueryParams.Add("view", Configuration.ApiClient.ParameterToString(view)); // query parameter
            if (parentId != null) localVarQueryParams.Add("parentId", Configuration.ApiClient.ParameterToString(parentId)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrganizationInfoContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrganizationInfoContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrganizationInfoContract>)));
        }

        /// <summary>
        /// Get list of organizations Returns information for all organizations. it supports the pagination using query parameters start and limit. ParentId can be used to filter the result. It supports three types of view. By default &#39;Summary&#39; will be returns. in &#39;Summary&#39; view, response will have basic organization details along with parent organization reference. when view is &#39;Entity&#39;, response will have complete organization details. When view is &#39;Hierarchy&#39;, organization children like like child organizations and associated users will be included in response. Case is ignored.
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="view">By default summary view will be returned. It also supports &#39;Entity&#39; and &#39;Hierarchy&#39;. &#39;Summary&#39; view returns basic information along with parent organization reference. &#39;Entity&#39; view will return complete details of organization. &#39;Hierarchy&#39; view will return the id, description and children of organization including users. (optional)</param>
        /// <param name="parentId">Result will be filtered based on parent id. It will return organizations with matching parent id. (optional)</param>
        /// <param name="start">Starting record number in pagination. Default is 1 (optional)</param>
        /// <param name="limit">Number of records in result. (optional)</param>
        /// <returns>Task of List&lt;OrganizationInfoContract&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrganizationInfoContract>> GetOrganizationsAsync (string view = null, string parentId = null, string start = null, string limit = null)
        {
             ApiResponse<List<OrganizationInfoContract>> localVarResponse = await GetOrganizationsAsyncWithHttpInfo(view, parentId, start, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of organizations Returns information for all organizations. it supports the pagination using query parameters start and limit. ParentId can be used to filter the result. It supports three types of view. By default &#39;Summary&#39; will be returns. in &#39;Summary&#39; view, response will have basic organization details along with parent organization reference. when view is &#39;Entity&#39;, response will have complete organization details. When view is &#39;Hierarchy&#39;, organization children like like child organizations and associated users will be included in response. Case is ignored.
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="view">By default summary view will be returned. It also supports &#39;Entity&#39; and &#39;Hierarchy&#39;. &#39;Summary&#39; view returns basic information along with parent organization reference. &#39;Entity&#39; view will return complete details of organization. &#39;Hierarchy&#39; view will return the id, description and children of organization including users. (optional)</param>
        /// <param name="parentId">Result will be filtered based on parent id. It will return organizations with matching parent id. (optional)</param>
        /// <param name="start">Starting record number in pagination. Default is 1 (optional)</param>
        /// <param name="limit">Number of records in result. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OrganizationInfoContract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OrganizationInfoContract>>> GetOrganizationsAsyncWithHttpInfo (string view = null, string parentId = null, string start = null, string limit = null)
        {

            var localVarPath = "/encompass/v1/organizations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (view != null) localVarQueryParams.Add("view", Configuration.ApiClient.ParameterToString(view)); // query parameter
            if (parentId != null) localVarQueryParams.Add("parentId", Configuration.ApiClient.ParameterToString(parentId)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrganizationInfoContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrganizationInfoContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrganizationInfoContract>)));
        }

        /// <summary>
        /// Get root organization detail Returns the root organization details. It supports three types of view. By default &#39;Summary&#39; will be returns. in &#39;Summary&#39; view, response will have basic organization details along with parent organization reference. when view is &#39;Entity&#39;, response will have complete organization details. When view is &#39;Hierarchy&#39;, organization children like like child organizations and associated users will be included in response. Case is ignored.
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="view">Indicates the level of details required in response. Acceptable values are summary, entity or hierarchy. summary by default. (optional)</param>
        /// <returns>OrganizationInfoContract</returns>
        public OrganizationInfoContract GetRootOrganization (string view = null)
        {
             ApiResponse<OrganizationInfoContract> localVarResponse = GetRootOrganizationWithHttpInfo(view);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get root organization detail Returns the root organization details. It supports three types of view. By default &#39;Summary&#39; will be returns. in &#39;Summary&#39; view, response will have basic organization details along with parent organization reference. when view is &#39;Entity&#39;, response will have complete organization details. When view is &#39;Hierarchy&#39;, organization children like like child organizations and associated users will be included in response. Case is ignored.
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="view">Indicates the level of details required in response. Acceptable values are summary, entity or hierarchy. summary by default. (optional)</param>
        /// <returns>ApiResponse of OrganizationInfoContract</returns>
        public ApiResponse< OrganizationInfoContract > GetRootOrganizationWithHttpInfo (string view = null)
        {

            var localVarPath = "/encompass/v1/organizations/root";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (view != null) localVarQueryParams.Add("view", Configuration.ApiClient.ParameterToString(view)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRootOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationInfoContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationInfoContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationInfoContract)));
        }

        /// <summary>
        /// Get root organization detail Returns the root organization details. It supports three types of view. By default &#39;Summary&#39; will be returns. in &#39;Summary&#39; view, response will have basic organization details along with parent organization reference. when view is &#39;Entity&#39;, response will have complete organization details. When view is &#39;Hierarchy&#39;, organization children like like child organizations and associated users will be included in response. Case is ignored.
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="view">Indicates the level of details required in response. Acceptable values are summary, entity or hierarchy. summary by default. (optional)</param>
        /// <returns>Task of OrganizationInfoContract</returns>
        public async System.Threading.Tasks.Task<OrganizationInfoContract> GetRootOrganizationAsync (string view = null)
        {
             ApiResponse<OrganizationInfoContract> localVarResponse = await GetRootOrganizationAsyncWithHttpInfo(view);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get root organization detail Returns the root organization details. It supports three types of view. By default &#39;Summary&#39; will be returns. in &#39;Summary&#39; view, response will have basic organization details along with parent organization reference. when view is &#39;Entity&#39;, response will have complete organization details. When view is &#39;Hierarchy&#39;, organization children like like child organizations and associated users will be included in response. Case is ignored.
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="view">Indicates the level of details required in response. Acceptable values are summary, entity or hierarchy. summary by default. (optional)</param>
        /// <returns>Task of ApiResponse (OrganizationInfoContract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationInfoContract>> GetRootOrganizationAsyncWithHttpInfo (string view = null)
        {

            var localVarPath = "/encompass/v1/organizations/root";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (view != null) localVarQueryParams.Add("view", Configuration.ApiClient.ParameterToString(view)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRootOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationInfoContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationInfoContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationInfoContract)));
        }

    }
}
