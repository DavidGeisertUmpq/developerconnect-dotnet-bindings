/*
* Copyright 2017 Ellie Mae, Inc.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  1. Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
*
*  2. Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*  3. Neither the name of the copyright holder nor the names of its
*     contributors may be used to endorse or promote products derived from this
*     software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/

/* 
 * Settings
 *
 * Represents settings operations on Company, Loan, Contact etc.
 *
 * OpenAPI spec version: 1.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Elli.Api.Settings.Client;
using Elli.Api.Settings.Model;

namespace Elli.Api.Settings.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Assigned Permission Rights
        /// </summary>
        /// <remarks>
        /// Returns assigned permission rights of specific user
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <param name="category">User settings category (optional)</param>
        /// <returns>Object</returns>
        Object GetAssignedPermissionRights (string userId, string category = null);

        /// <summary>
        /// Get Assigned Permission Rights
        /// </summary>
        /// <remarks>
        /// Returns assigned permission rights of specific user
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <param name="category">User settings category (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetAssignedPermissionRightsWithHttpInfo (string userId, string category = null);
        /// <summary>
        /// Get Effective Permission Rights
        /// </summary>
        /// <remarks>
        /// Returns effective permission rights of specific user
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <param name="category">User settings category (optional)</param>
        /// <returns>Object</returns>
        Object GetEffectivePermissionRights (string userId, string category = null);

        /// <summary>
        /// Get Effective Permission Rights
        /// </summary>
        /// <remarks>
        /// Returns effective permission rights of specific user
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <param name="category">User settings category (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetEffectivePermissionRightsWithHttpInfo (string userId, string category = null);
        /// <summary>
        /// Get License details
        /// </summary>
        /// <remarks>
        /// Returns License of specific user
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <param name="state">State code (optional)</param>
        /// <returns>List&lt;LicenseContract&gt;</returns>
        List<LicenseContract> GetLicenseInfo (string userId, string state = null);

        /// <summary>
        /// Get License details
        /// </summary>
        /// <remarks>
        /// Returns License of specific user
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <param name="state">State code (optional)</param>
        /// <returns>ApiResponse of List&lt;LicenseContract&gt;</returns>
        ApiResponse<List<LicenseContract>> GetLicenseInfoWithHttpInfo (string userId, string state = null);
        /// <summary>
        /// Get compensation plans
        /// </summary>
        /// <remarks>
        /// Returns compensation plans associated to a user
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <returns>CompensationPlanContract</returns>
        CompensationPlanContract GetUserCompPlans (string userId);

        /// <summary>
        /// Get compensation plans
        /// </summary>
        /// <remarks>
        /// Returns compensation plans associated to a user
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <returns>ApiResponse of CompensationPlanContract</returns>
        ApiResponse<CompensationPlanContract> GetUserCompPlansWithHttpInfo (string userId);
        /// <summary>
        /// Get List of user groups
        /// </summary>
        /// <remarks>
        /// Returns List of groups for specific user
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique Identifier of user</param>
        /// <returns>List&lt;EntityRefContract&gt;</returns>
        List<EntityRefContract> GetUserGroups (string id);

        /// <summary>
        /// Get List of user groups
        /// </summary>
        /// <remarks>
        /// Returns List of groups for specific user
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique Identifier of user</param>
        /// <returns>ApiResponse of List&lt;EntityRefContract&gt;</returns>
        ApiResponse<List<EntityRefContract>> GetUserGroupsWithHttpInfo (string id);
        /// <summary>
        /// Get User profile
        /// </summary>
        /// <remarks>
        /// Returns User profile based on user name / id provided
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique Identifier of user</param>
        /// <param name="viewEmailSignature">Flag indicates email signature should be returned or not (optional)</param>
        /// <returns>UserContract</returns>
        UserContract GetUserProfile (string id, string viewEmailSignature = null);

        /// <summary>
        /// Get User profile
        /// </summary>
        /// <remarks>
        /// Returns User profile based on user name / id provided
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique Identifier of user</param>
        /// <param name="viewEmailSignature">Flag indicates email signature should be returned or not (optional)</param>
        /// <returns>ApiResponse of UserContract</returns>
        ApiResponse<UserContract> GetUserProfileWithHttpInfo (string id, string viewEmailSignature = null);
        /// <summary>
        /// Get List of users
        /// </summary>
        /// <remarks>
        /// Returns All users
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewEmailSignature">Flag indicates email signature should be returned or not (optional)</param>
        /// <param name="groupId">Unique identifier of User Group (optional)</param>
        /// <param name="roleId">Unique identifier of Role (optional)</param>
        /// <param name="personaId">Unique identifier of User Persona (optional)</param>
        /// <param name="featureId">Unique identifier of feature (optional)</param>
        /// <param name="organizationId">Unique identifier of an organization (optional)</param>
        /// <param name="userName">Name of user (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of users. This is defaulted to 1. (optional)</param>
        /// <param name="limit">This is the maximum number of records user wants to fetch. Response size is limited to 6 MB hence this is recalculated if response size exceeds 6 MB. Default value is 1000 and max value for this parameter is limited to 10000 in any case. (optional)</param>
        /// <returns>List&lt;UserContract&gt;</returns>
        List<UserContract> GetUserProfiles (string viewEmailSignature = null, string groupId = null, string roleId = null, string personaId = null, string featureId = null, string organizationId = null, string userName = null, string start = null, string limit = null);

        /// <summary>
        /// Get List of users
        /// </summary>
        /// <remarks>
        /// Returns All users
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewEmailSignature">Flag indicates email signature should be returned or not (optional)</param>
        /// <param name="groupId">Unique identifier of User Group (optional)</param>
        /// <param name="roleId">Unique identifier of Role (optional)</param>
        /// <param name="personaId">Unique identifier of User Persona (optional)</param>
        /// <param name="featureId">Unique identifier of feature (optional)</param>
        /// <param name="organizationId">Unique identifier of an organization (optional)</param>
        /// <param name="userName">Name of user (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of users. This is defaulted to 1. (optional)</param>
        /// <param name="limit">This is the maximum number of records user wants to fetch. Response size is limited to 6 MB hence this is recalculated if response size exceeds 6 MB. Default value is 1000 and max value for this parameter is limited to 10000 in any case. (optional)</param>
        /// <returns>ApiResponse of List&lt;UserContract&gt;</returns>
        ApiResponse<List<UserContract>> GetUserProfilesWithHttpInfo (string viewEmailSignature = null, string groupId = null, string roleId = null, string personaId = null, string featureId = null, string organizationId = null, string userName = null, string start = null, string limit = null);
        /// <summary>
        /// Get User&#39;s self profile
        /// </summary>
        /// <remarks>
        /// Returns profile for the logged in user.
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewEmailSignature">Flag indicates email signature should be returned or not (optional)</param>
        /// <returns>UserContract</returns>
        UserContract GetUserSelfProfile (string viewEmailSignature = null);

        /// <summary>
        /// Get User&#39;s self profile
        /// </summary>
        /// <remarks>
        /// Returns profile for the logged in user.
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewEmailSignature">Flag indicates email signature should be returned or not (optional)</param>
        /// <returns>ApiResponse of UserContract</returns>
        ApiResponse<UserContract> GetUserSelfProfileWithHttpInfo (string viewEmailSignature = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Assigned Permission Rights
        /// </summary>
        /// <remarks>
        /// Returns assigned permission rights of specific user
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <param name="category">User settings category (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetAssignedPermissionRightsAsync (string userId, string category = null);

        /// <summary>
        /// Get Assigned Permission Rights
        /// </summary>
        /// <remarks>
        /// Returns assigned permission rights of specific user
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <param name="category">User settings category (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAssignedPermissionRightsAsyncWithHttpInfo (string userId, string category = null);
        /// <summary>
        /// Get Effective Permission Rights
        /// </summary>
        /// <remarks>
        /// Returns effective permission rights of specific user
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <param name="category">User settings category (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetEffectivePermissionRightsAsync (string userId, string category = null);

        /// <summary>
        /// Get Effective Permission Rights
        /// </summary>
        /// <remarks>
        /// Returns effective permission rights of specific user
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <param name="category">User settings category (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEffectivePermissionRightsAsyncWithHttpInfo (string userId, string category = null);
        /// <summary>
        /// Get License details
        /// </summary>
        /// <remarks>
        /// Returns License of specific user
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <param name="state">State code (optional)</param>
        /// <returns>Task of List&lt;LicenseContract&gt;</returns>
        System.Threading.Tasks.Task<List<LicenseContract>> GetLicenseInfoAsync (string userId, string state = null);

        /// <summary>
        /// Get License details
        /// </summary>
        /// <remarks>
        /// Returns License of specific user
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <param name="state">State code (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LicenseContract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LicenseContract>>> GetLicenseInfoAsyncWithHttpInfo (string userId, string state = null);
        /// <summary>
        /// Get compensation plans
        /// </summary>
        /// <remarks>
        /// Returns compensation plans associated to a user
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <returns>Task of CompensationPlanContract</returns>
        System.Threading.Tasks.Task<CompensationPlanContract> GetUserCompPlansAsync (string userId);

        /// <summary>
        /// Get compensation plans
        /// </summary>
        /// <remarks>
        /// Returns compensation plans associated to a user
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <returns>Task of ApiResponse (CompensationPlanContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompensationPlanContract>> GetUserCompPlansAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Get List of user groups
        /// </summary>
        /// <remarks>
        /// Returns List of groups for specific user
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique Identifier of user</param>
        /// <returns>Task of List&lt;EntityRefContract&gt;</returns>
        System.Threading.Tasks.Task<List<EntityRefContract>> GetUserGroupsAsync (string id);

        /// <summary>
        /// Get List of user groups
        /// </summary>
        /// <remarks>
        /// Returns List of groups for specific user
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique Identifier of user</param>
        /// <returns>Task of ApiResponse (List&lt;EntityRefContract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EntityRefContract>>> GetUserGroupsAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get User profile
        /// </summary>
        /// <remarks>
        /// Returns User profile based on user name / id provided
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique Identifier of user</param>
        /// <param name="viewEmailSignature">Flag indicates email signature should be returned or not (optional)</param>
        /// <returns>Task of UserContract</returns>
        System.Threading.Tasks.Task<UserContract> GetUserProfileAsync (string id, string viewEmailSignature = null);

        /// <summary>
        /// Get User profile
        /// </summary>
        /// <remarks>
        /// Returns User profile based on user name / id provided
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique Identifier of user</param>
        /// <param name="viewEmailSignature">Flag indicates email signature should be returned or not (optional)</param>
        /// <returns>Task of ApiResponse (UserContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserContract>> GetUserProfileAsyncWithHttpInfo (string id, string viewEmailSignature = null);
        /// <summary>
        /// Get List of users
        /// </summary>
        /// <remarks>
        /// Returns All users
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewEmailSignature">Flag indicates email signature should be returned or not (optional)</param>
        /// <param name="groupId">Unique identifier of User Group (optional)</param>
        /// <param name="roleId">Unique identifier of Role (optional)</param>
        /// <param name="personaId">Unique identifier of User Persona (optional)</param>
        /// <param name="featureId">Unique identifier of feature (optional)</param>
        /// <param name="organizationId">Unique identifier of an organization (optional)</param>
        /// <param name="userName">Name of user (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of users. This is defaulted to 1. (optional)</param>
        /// <param name="limit">This is the maximum number of records user wants to fetch. Response size is limited to 6 MB hence this is recalculated if response size exceeds 6 MB. Default value is 1000 and max value for this parameter is limited to 10000 in any case. (optional)</param>
        /// <returns>Task of List&lt;UserContract&gt;</returns>
        System.Threading.Tasks.Task<List<UserContract>> GetUserProfilesAsync (string viewEmailSignature = null, string groupId = null, string roleId = null, string personaId = null, string featureId = null, string organizationId = null, string userName = null, string start = null, string limit = null);

        /// <summary>
        /// Get List of users
        /// </summary>
        /// <remarks>
        /// Returns All users
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewEmailSignature">Flag indicates email signature should be returned or not (optional)</param>
        /// <param name="groupId">Unique identifier of User Group (optional)</param>
        /// <param name="roleId">Unique identifier of Role (optional)</param>
        /// <param name="personaId">Unique identifier of User Persona (optional)</param>
        /// <param name="featureId">Unique identifier of feature (optional)</param>
        /// <param name="organizationId">Unique identifier of an organization (optional)</param>
        /// <param name="userName">Name of user (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of users. This is defaulted to 1. (optional)</param>
        /// <param name="limit">This is the maximum number of records user wants to fetch. Response size is limited to 6 MB hence this is recalculated if response size exceeds 6 MB. Default value is 1000 and max value for this parameter is limited to 10000 in any case. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;UserContract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserContract>>> GetUserProfilesAsyncWithHttpInfo (string viewEmailSignature = null, string groupId = null, string roleId = null, string personaId = null, string featureId = null, string organizationId = null, string userName = null, string start = null, string limit = null);
        /// <summary>
        /// Get User&#39;s self profile
        /// </summary>
        /// <remarks>
        /// Returns profile for the logged in user.
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewEmailSignature">Flag indicates email signature should be returned or not (optional)</param>
        /// <returns>Task of UserContract</returns>
        System.Threading.Tasks.Task<UserContract> GetUserSelfProfileAsync (string viewEmailSignature = null);

        /// <summary>
        /// Get User&#39;s self profile
        /// </summary>
        /// <remarks>
        /// Returns profile for the logged in user.
        /// </remarks>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewEmailSignature">Flag indicates email signature should be returned or not (optional)</param>
        /// <returns>Task of ApiResponse (UserContract)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserContract>> GetUserSelfProfileAsyncWithHttpInfo (string viewEmailSignature = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private Elli.Api.Settings.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Elli.Api.Settings.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Elli.Api.Settings.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Elli.Api.Settings.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Assigned Permission Rights Returns assigned permission rights of specific user
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <param name="category">User settings category (optional)</param>
        /// <returns>Object</returns>
        public Object GetAssignedPermissionRights (string userId, string category = null)
        {
             ApiResponse<Object> localVarResponse = GetAssignedPermissionRightsWithHttpInfo(userId, category);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Assigned Permission Rights Returns assigned permission rights of specific user
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <param name="category">User settings category (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetAssignedPermissionRightsWithHttpInfo (string userId, string category = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->GetAssignedPermissionRights");

            var localVarPath = "/encompass/v1/company/users/{userId}/assignedRights";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (category != null) localVarQueryParams.Add("category", Configuration.ApiClient.ParameterToString(category)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssignedPermissionRights", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get Assigned Permission Rights Returns assigned permission rights of specific user
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <param name="category">User settings category (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetAssignedPermissionRightsAsync (string userId, string category = null)
        {
             ApiResponse<Object> localVarResponse = await GetAssignedPermissionRightsAsyncWithHttpInfo(userId, category);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Assigned Permission Rights Returns assigned permission rights of specific user
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <param name="category">User settings category (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetAssignedPermissionRightsAsyncWithHttpInfo (string userId, string category = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->GetAssignedPermissionRights");

            var localVarPath = "/encompass/v1/company/users/{userId}/assignedRights";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (category != null) localVarQueryParams.Add("category", Configuration.ApiClient.ParameterToString(category)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssignedPermissionRights", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get Effective Permission Rights Returns effective permission rights of specific user
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <param name="category">User settings category (optional)</param>
        /// <returns>Object</returns>
        public Object GetEffectivePermissionRights (string userId, string category = null)
        {
             ApiResponse<Object> localVarResponse = GetEffectivePermissionRightsWithHttpInfo(userId, category);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Effective Permission Rights Returns effective permission rights of specific user
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <param name="category">User settings category (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetEffectivePermissionRightsWithHttpInfo (string userId, string category = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->GetEffectivePermissionRights");

            var localVarPath = "/encompass/v1/company/users/{userId}/effectiveRights";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (category != null) localVarQueryParams.Add("category", Configuration.ApiClient.ParameterToString(category)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEffectivePermissionRights", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get Effective Permission Rights Returns effective permission rights of specific user
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <param name="category">User settings category (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetEffectivePermissionRightsAsync (string userId, string category = null)
        {
             ApiResponse<Object> localVarResponse = await GetEffectivePermissionRightsAsyncWithHttpInfo(userId, category);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Effective Permission Rights Returns effective permission rights of specific user
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <param name="category">User settings category (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetEffectivePermissionRightsAsyncWithHttpInfo (string userId, string category = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->GetEffectivePermissionRights");

            var localVarPath = "/encompass/v1/company/users/{userId}/effectiveRights";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (category != null) localVarQueryParams.Add("category", Configuration.ApiClient.ParameterToString(category)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEffectivePermissionRights", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get License details Returns License of specific user
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <param name="state">State code (optional)</param>
        /// <returns>List&lt;LicenseContract&gt;</returns>
        public List<LicenseContract> GetLicenseInfo (string userId, string state = null)
        {
             ApiResponse<List<LicenseContract>> localVarResponse = GetLicenseInfoWithHttpInfo(userId, state);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get License details Returns License of specific user
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <param name="state">State code (optional)</param>
        /// <returns>ApiResponse of List&lt;LicenseContract&gt;</returns>
        public ApiResponse< List<LicenseContract> > GetLicenseInfoWithHttpInfo (string userId, string state = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->GetLicenseInfo");

            var localVarPath = "/encompass/v1/company/users/{userId}/licenses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (state != null) localVarQueryParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLicenseInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LicenseContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LicenseContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LicenseContract>)));
        }

        /// <summary>
        /// Get License details Returns License of specific user
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <param name="state">State code (optional)</param>
        /// <returns>Task of List&lt;LicenseContract&gt;</returns>
        public async System.Threading.Tasks.Task<List<LicenseContract>> GetLicenseInfoAsync (string userId, string state = null)
        {
             ApiResponse<List<LicenseContract>> localVarResponse = await GetLicenseInfoAsyncWithHttpInfo(userId, state);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get License details Returns License of specific user
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <param name="state">State code (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LicenseContract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LicenseContract>>> GetLicenseInfoAsyncWithHttpInfo (string userId, string state = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->GetLicenseInfo");

            var localVarPath = "/encompass/v1/company/users/{userId}/licenses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (state != null) localVarQueryParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLicenseInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LicenseContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LicenseContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LicenseContract>)));
        }

        /// <summary>
        /// Get compensation plans Returns compensation plans associated to a user
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <returns>CompensationPlanContract</returns>
        public CompensationPlanContract GetUserCompPlans (string userId)
        {
             ApiResponse<CompensationPlanContract> localVarResponse = GetUserCompPlansWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get compensation plans Returns compensation plans associated to a user
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <returns>ApiResponse of CompensationPlanContract</returns>
        public ApiResponse< CompensationPlanContract > GetUserCompPlansWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->GetUserCompPlans");

            var localVarPath = "/encompass/v1/company/users/{userId}/compensation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserCompPlans", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompensationPlanContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CompensationPlanContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompensationPlanContract)));
        }

        /// <summary>
        /// Get compensation plans Returns compensation plans associated to a user
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <returns>Task of CompensationPlanContract</returns>
        public async System.Threading.Tasks.Task<CompensationPlanContract> GetUserCompPlansAsync (string userId)
        {
             ApiResponse<CompensationPlanContract> localVarResponse = await GetUserCompPlansAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get compensation plans Returns compensation plans associated to a user
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Unique Identifier of user</param>
        /// <returns>Task of ApiResponse (CompensationPlanContract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CompensationPlanContract>> GetUserCompPlansAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->GetUserCompPlans");

            var localVarPath = "/encompass/v1/company/users/{userId}/compensation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserCompPlans", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompensationPlanContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CompensationPlanContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompensationPlanContract)));
        }

        /// <summary>
        /// Get List of user groups Returns List of groups for specific user
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique Identifier of user</param>
        /// <returns>List&lt;EntityRefContract&gt;</returns>
        public List<EntityRefContract> GetUserGroups (string id)
        {
             ApiResponse<List<EntityRefContract>> localVarResponse = GetUserGroupsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get List of user groups Returns List of groups for specific user
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique Identifier of user</param>
        /// <returns>ApiResponse of List&lt;EntityRefContract&gt;</returns>
        public ApiResponse< List<EntityRefContract> > GetUserGroupsWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserGroups");

            var localVarPath = "/encompass/v1/company/users/{id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EntityRefContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EntityRefContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EntityRefContract>)));
        }

        /// <summary>
        /// Get List of user groups Returns List of groups for specific user
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique Identifier of user</param>
        /// <returns>Task of List&lt;EntityRefContract&gt;</returns>
        public async System.Threading.Tasks.Task<List<EntityRefContract>> GetUserGroupsAsync (string id)
        {
             ApiResponse<List<EntityRefContract>> localVarResponse = await GetUserGroupsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get List of user groups Returns List of groups for specific user
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique Identifier of user</param>
        /// <returns>Task of ApiResponse (List&lt;EntityRefContract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EntityRefContract>>> GetUserGroupsAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserGroups");

            var localVarPath = "/encompass/v1/company/users/{id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EntityRefContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EntityRefContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EntityRefContract>)));
        }

        /// <summary>
        /// Get User profile Returns User profile based on user name / id provided
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique Identifier of user</param>
        /// <param name="viewEmailSignature">Flag indicates email signature should be returned or not (optional)</param>
        /// <returns>UserContract</returns>
        public UserContract GetUserProfile (string id, string viewEmailSignature = null)
        {
             ApiResponse<UserContract> localVarResponse = GetUserProfileWithHttpInfo(id, viewEmailSignature);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get User profile Returns User profile based on user name / id provided
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique Identifier of user</param>
        /// <param name="viewEmailSignature">Flag indicates email signature should be returned or not (optional)</param>
        /// <returns>ApiResponse of UserContract</returns>
        public ApiResponse< UserContract > GetUserProfileWithHttpInfo (string id, string viewEmailSignature = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserProfile");

            var localVarPath = "/encompass/v1/company/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (viewEmailSignature != null) localVarQueryParams.Add("viewEmailSignature", Configuration.ApiClient.ParameterToString(viewEmailSignature)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserContract)));
        }

        /// <summary>
        /// Get User profile Returns User profile based on user name / id provided
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique Identifier of user</param>
        /// <param name="viewEmailSignature">Flag indicates email signature should be returned or not (optional)</param>
        /// <returns>Task of UserContract</returns>
        public async System.Threading.Tasks.Task<UserContract> GetUserProfileAsync (string id, string viewEmailSignature = null)
        {
             ApiResponse<UserContract> localVarResponse = await GetUserProfileAsyncWithHttpInfo(id, viewEmailSignature);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get User profile Returns User profile based on user name / id provided
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique Identifier of user</param>
        /// <param name="viewEmailSignature">Flag indicates email signature should be returned or not (optional)</param>
        /// <returns>Task of ApiResponse (UserContract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserContract>> GetUserProfileAsyncWithHttpInfo (string id, string viewEmailSignature = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserProfile");

            var localVarPath = "/encompass/v1/company/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (viewEmailSignature != null) localVarQueryParams.Add("viewEmailSignature", Configuration.ApiClient.ParameterToString(viewEmailSignature)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserContract)));
        }

        /// <summary>
        /// Get List of users Returns All users
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewEmailSignature">Flag indicates email signature should be returned or not (optional)</param>
        /// <param name="groupId">Unique identifier of User Group (optional)</param>
        /// <param name="roleId">Unique identifier of Role (optional)</param>
        /// <param name="personaId">Unique identifier of User Persona (optional)</param>
        /// <param name="featureId">Unique identifier of feature (optional)</param>
        /// <param name="organizationId">Unique identifier of an organization (optional)</param>
        /// <param name="userName">Name of user (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of users. This is defaulted to 1. (optional)</param>
        /// <param name="limit">This is the maximum number of records user wants to fetch. Response size is limited to 6 MB hence this is recalculated if response size exceeds 6 MB. Default value is 1000 and max value for this parameter is limited to 10000 in any case. (optional)</param>
        /// <returns>List&lt;UserContract&gt;</returns>
        public List<UserContract> GetUserProfiles (string viewEmailSignature = null, string groupId = null, string roleId = null, string personaId = null, string featureId = null, string organizationId = null, string userName = null, string start = null, string limit = null)
        {
             ApiResponse<List<UserContract>> localVarResponse = GetUserProfilesWithHttpInfo(viewEmailSignature, groupId, roleId, personaId, featureId, organizationId, userName, start, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get List of users Returns All users
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewEmailSignature">Flag indicates email signature should be returned or not (optional)</param>
        /// <param name="groupId">Unique identifier of User Group (optional)</param>
        /// <param name="roleId">Unique identifier of Role (optional)</param>
        /// <param name="personaId">Unique identifier of User Persona (optional)</param>
        /// <param name="featureId">Unique identifier of feature (optional)</param>
        /// <param name="organizationId">Unique identifier of an organization (optional)</param>
        /// <param name="userName">Name of user (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of users. This is defaulted to 1. (optional)</param>
        /// <param name="limit">This is the maximum number of records user wants to fetch. Response size is limited to 6 MB hence this is recalculated if response size exceeds 6 MB. Default value is 1000 and max value for this parameter is limited to 10000 in any case. (optional)</param>
        /// <returns>ApiResponse of List&lt;UserContract&gt;</returns>
        public ApiResponse< List<UserContract> > GetUserProfilesWithHttpInfo (string viewEmailSignature = null, string groupId = null, string roleId = null, string personaId = null, string featureId = null, string organizationId = null, string userName = null, string start = null, string limit = null)
        {

            var localVarPath = "/encompass/v1/company/users/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewEmailSignature != null) localVarQueryParams.Add("viewEmailSignature", Configuration.ApiClient.ParameterToString(viewEmailSignature)); // query parameter
            if (groupId != null) localVarQueryParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // query parameter
            if (roleId != null) localVarQueryParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // query parameter
            if (personaId != null) localVarQueryParams.Add("personaId", Configuration.ApiClient.ParameterToString(personaId)); // query parameter
            if (featureId != null) localVarQueryParams.Add("featureId", Configuration.ApiClient.ParameterToString(featureId)); // query parameter
            if (organizationId != null) localVarQueryParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // query parameter
            if (userName != null) localVarQueryParams.Add("userName", Configuration.ApiClient.ParameterToString(userName)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserContract>)));
        }

        /// <summary>
        /// Get List of users Returns All users
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewEmailSignature">Flag indicates email signature should be returned or not (optional)</param>
        /// <param name="groupId">Unique identifier of User Group (optional)</param>
        /// <param name="roleId">Unique identifier of Role (optional)</param>
        /// <param name="personaId">Unique identifier of User Persona (optional)</param>
        /// <param name="featureId">Unique identifier of feature (optional)</param>
        /// <param name="organizationId">Unique identifier of an organization (optional)</param>
        /// <param name="userName">Name of user (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of users. This is defaulted to 1. (optional)</param>
        /// <param name="limit">This is the maximum number of records user wants to fetch. Response size is limited to 6 MB hence this is recalculated if response size exceeds 6 MB. Default value is 1000 and max value for this parameter is limited to 10000 in any case. (optional)</param>
        /// <returns>Task of List&lt;UserContract&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserContract>> GetUserProfilesAsync (string viewEmailSignature = null, string groupId = null, string roleId = null, string personaId = null, string featureId = null, string organizationId = null, string userName = null, string start = null, string limit = null)
        {
             ApiResponse<List<UserContract>> localVarResponse = await GetUserProfilesAsyncWithHttpInfo(viewEmailSignature, groupId, roleId, personaId, featureId, organizationId, userName, start, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get List of users Returns All users
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewEmailSignature">Flag indicates email signature should be returned or not (optional)</param>
        /// <param name="groupId">Unique identifier of User Group (optional)</param>
        /// <param name="roleId">Unique identifier of Role (optional)</param>
        /// <param name="personaId">Unique identifier of User Persona (optional)</param>
        /// <param name="featureId">Unique identifier of feature (optional)</param>
        /// <param name="organizationId">Unique identifier of an organization (optional)</param>
        /// <param name="userName">Name of user (optional)</param>
        /// <param name="start">Start index or record number to retrieve a set of users. This is defaulted to 1. (optional)</param>
        /// <param name="limit">This is the maximum number of records user wants to fetch. Response size is limited to 6 MB hence this is recalculated if response size exceeds 6 MB. Default value is 1000 and max value for this parameter is limited to 10000 in any case. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;UserContract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserContract>>> GetUserProfilesAsyncWithHttpInfo (string viewEmailSignature = null, string groupId = null, string roleId = null, string personaId = null, string featureId = null, string organizationId = null, string userName = null, string start = null, string limit = null)
        {

            var localVarPath = "/encompass/v1/company/users/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewEmailSignature != null) localVarQueryParams.Add("viewEmailSignature", Configuration.ApiClient.ParameterToString(viewEmailSignature)); // query parameter
            if (groupId != null) localVarQueryParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // query parameter
            if (roleId != null) localVarQueryParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // query parameter
            if (personaId != null) localVarQueryParams.Add("personaId", Configuration.ApiClient.ParameterToString(personaId)); // query parameter
            if (featureId != null) localVarQueryParams.Add("featureId", Configuration.ApiClient.ParameterToString(featureId)); // query parameter
            if (organizationId != null) localVarQueryParams.Add("organizationId", Configuration.ApiClient.ParameterToString(organizationId)); // query parameter
            if (userName != null) localVarQueryParams.Add("userName", Configuration.ApiClient.ParameterToString(userName)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserContract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<UserContract>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserContract>)));
        }

        /// <summary>
        /// Get User&#39;s self profile Returns profile for the logged in user.
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewEmailSignature">Flag indicates email signature should be returned or not (optional)</param>
        /// <returns>UserContract</returns>
        public UserContract GetUserSelfProfile (string viewEmailSignature = null)
        {
             ApiResponse<UserContract> localVarResponse = GetUserSelfProfileWithHttpInfo(viewEmailSignature);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get User&#39;s self profile Returns profile for the logged in user.
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewEmailSignature">Flag indicates email signature should be returned or not (optional)</param>
        /// <returns>ApiResponse of UserContract</returns>
        public ApiResponse< UserContract > GetUserSelfProfileWithHttpInfo (string viewEmailSignature = null)
        {

            var localVarPath = "/encompass/v1/company/users/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewEmailSignature != null) localVarQueryParams.Add("viewEmailSignature", Configuration.ApiClient.ParameterToString(viewEmailSignature)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserSelfProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserContract)));
        }

        /// <summary>
        /// Get User&#39;s self profile Returns profile for the logged in user.
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewEmailSignature">Flag indicates email signature should be returned or not (optional)</param>
        /// <returns>Task of UserContract</returns>
        public async System.Threading.Tasks.Task<UserContract> GetUserSelfProfileAsync (string viewEmailSignature = null)
        {
             ApiResponse<UserContract> localVarResponse = await GetUserSelfProfileAsyncWithHttpInfo(viewEmailSignature);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get User&#39;s self profile Returns profile for the logged in user.
        /// </summary>
        /// <exception cref="Elli.Api.Settings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewEmailSignature">Flag indicates email signature should be returned or not (optional)</param>
        /// <returns>Task of ApiResponse (UserContract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserContract>> GetUserSelfProfileAsyncWithHttpInfo (string viewEmailSignature = null)
        {

            var localVarPath = "/encompass/v1/company/users/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewEmailSignature != null) localVarQueryParams.Add("viewEmailSignature", Configuration.ApiClient.ParameterToString(viewEmailSignature)); // query parameter

            // authentication (bearerAuth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserSelfProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserContract) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserContract)));
        }

    }
}
